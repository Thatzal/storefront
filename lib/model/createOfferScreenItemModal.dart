/// name : "item 1"
/// desc : "demo offer"
/// quantity : "2"
/// unit : "3"
/// price : "100.0"
/// currency : "INR"
/// addon : "false"
/// required : "false"
/// toggle_state : "false"
/// media : ["data:@file/png;base64,"]
/// item_condition : {"periodicity":"Today","fromperiod":"01-06-2023","toperiod":"01-06-2023","duration":"","fromperiodtime":"17:25","toperiodtime":"17:25","durationoftime":"","fromlocation":"indore","tolocation":"dewas","atlocation":"","servicepersons":"1","priority":"NORMAL","expiry":"04-06-2023 13:00"}

class CreateOfferScreenItemModal {
  CreateOfferScreenItemModal({
      String? name,
      String? desc,
      String? quantity,
      String? unit,
      String? price,
      String? currency, 
      String? addon,
      String? required,
      String? toggleState, 
      List<String>? media, 
      ItemCondition? itemCondition,}){
    _name = name;
    _desc = desc;
    _quantity = quantity;
    _unit = unit;
    _price = price;
    _currency = currency;
    _addon = addon;
    _required = required;
    _toggleState = toggleState;
    _media = media;
    _itemCondition = itemCondition;
}

  CreateOfferScreenItemModal.fromJson(dynamic json) {
    _name = json['name'];
    _desc = json['desc'];
    _quantity = json['quantity'];
    _unit = json['unit'];
    _price = json['price'];
    _currency = json['currency'];
    _addon = json['addon'];
    _required = json['required'];
    _toggleState = json['toggle_state'];
    _media = json['media'] != null ? json['media'].cast<String>() : [];
    _itemCondition = json['item_condition'] != null ? ItemCondition.fromJson(json['item_condition']) : null;
  }
  String? _name;
  String? _desc;
  String? _quantity;
  String? _unit;
  String? _price;
  String? _currency;
  String? _addon;
  String? _required;
  String? _toggleState;
  List<String>? _media;
  ItemCondition? _itemCondition;
CreateOfferScreenItemModal copyWith({  String? name,
  String? desc,
  String? quantity,
  String? unit,
  String? price,
  String? currency,
  String? addon,
  String? required,
  String? toggleState,
  List<String>? media,
  ItemCondition? itemCondition,
}) => CreateOfferScreenItemModal(  name: name ?? _name,
  desc: desc ?? _desc,
  quantity: quantity ?? _quantity,
  unit: unit ?? _unit,
  price: price ?? _price,
  currency: currency ?? _currency,
  addon: addon ?? _addon,
  required: required ?? _required,
  toggleState: toggleState ?? _toggleState,
  media: media ?? _media,
  itemCondition: itemCondition ?? _itemCondition,
);
  String? get name => _name;
  String? get desc => _desc;
  String? get quantity => _quantity;
  String? get unit => _unit;
  String? get price => _price;
  String? get currency => _currency;
  String? get addon => _addon;
  String? get required => _required;
  String? get toggleState => _toggleState;
  List<String>? get media => _media;
  ItemCondition? get itemCondition => _itemCondition;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = _name;
    map['desc'] = _desc;
    map['quantity'] = _quantity;
    map['unit'] = _unit;
    map['price'] = _price;
    map['currency'] = _currency;
    map['addon'] = _addon;
    map['required'] = _required;
    map['toggle_state'] = _toggleState;
    map['media'] = _media;
    if (_itemCondition != null) {
      map['item_condition'] = _itemCondition?.toJson();
    }
    return map;
  }

}

/// periodicity : "Today"
/// fromperiod : "01-06-2023"
/// toperiod : "01-06-2023"
/// duration : ""
/// fromperiodtime : "17:25"
/// toperiodtime : "17:25"
/// durationoftime : ""
/// fromlocation : "indore"
/// tolocation : "dewas"
/// atlocation : ""
/// servicepersons : "1"
/// priority : "NORMAL"
/// expiry : "04-06-2023 13:00"

class ItemCondition {
  ItemCondition({
      String? periodicity, 
      String? fromperiod, 
      String? toperiod, 
      String? duration, 
      String? fromperiodtime, 
      String? toperiodtime, 
      String? durationoftime, 
      String? fromlocation, 
      String? tolocation, 
      String? atlocation, 
      String? servicepersons, 
      String? priority, 
      String? expiry,}){
    _periodicity = periodicity;
    _fromperiod = fromperiod;
    _toperiod = toperiod;
    _duration = duration;
    _fromperiodtime = fromperiodtime;
    _toperiodtime = toperiodtime;
    _durationoftime = durationoftime;
    _fromlocation = fromlocation;
    _tolocation = tolocation;
    _atlocation = atlocation;
    _servicepersons = servicepersons;
    _priority = priority;
    _expiry = expiry;
}

  ItemCondition.fromJson(dynamic json) {
    _periodicity = json['periodicity'];
    _fromperiod = json['fromperiod'];
    _toperiod = json['toperiod'];
    _duration = json['duration'];
    _fromperiodtime = json['fromperiodtime'];
    _toperiodtime = json['toperiodtime'];
    _durationoftime = json['durationoftime'];
    _fromlocation = json['fromlocation'];
    _tolocation = json['tolocation'];
    _atlocation = json['atlocation'];
    _servicepersons = json['servicepersons'];
    _priority = json['priority'];
    _expiry = json['expiry'];
  }
  String? _periodicity;
  String? _fromperiod;
  String? _toperiod;
  String? _duration;
  String? _fromperiodtime;
  String? _toperiodtime;
  String? _durationoftime;
  String? _fromlocation;
  String? _tolocation;
  String? _atlocation;
  String? _servicepersons;
  String? _priority;
  String? _expiry;
ItemCondition copyWith({  String? periodicity,
  String? fromperiod,
  String? toperiod,
  String? duration,
  String? fromperiodtime,
  String? toperiodtime,
  String? durationoftime,
  String? fromlocation,
  String? tolocation,
  String? atlocation,
  String? servicepersons,
  String? priority,
  String? expiry,
}) => ItemCondition(  periodicity: periodicity ?? _periodicity,
  fromperiod: fromperiod ?? _fromperiod,
  toperiod: toperiod ?? _toperiod,
  duration: duration ?? _duration,
  fromperiodtime: fromperiodtime ?? _fromperiodtime,
  toperiodtime: toperiodtime ?? _toperiodtime,
  durationoftime: durationoftime ?? _durationoftime,
  fromlocation: fromlocation ?? _fromlocation,
  tolocation: tolocation ?? _tolocation,
  atlocation: atlocation ?? _atlocation,
  servicepersons: servicepersons ?? _servicepersons,
  priority: priority ?? _priority,
  expiry: expiry ?? _expiry,
);
  String? get periodicity => _periodicity;
  String? get fromperiod => _fromperiod;
  String? get toperiod => _toperiod;
  String? get duration => _duration;
  String? get fromperiodtime => _fromperiodtime;
  String? get toperiodtime => _toperiodtime;
  String? get durationoftime => _durationoftime;
  String? get fromlocation => _fromlocation;
  String? get tolocation => _tolocation;
  String? get atlocation => _atlocation;
  String? get servicepersons => _servicepersons;
  String? get priority => _priority;
  String? get expiry => _expiry;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['periodicity'] = _periodicity;
    map['fromperiod'] = _fromperiod;
    map['toperiod'] = _toperiod;
    map['duration'] = _duration;
    map['fromperiodtime'] = _fromperiodtime;
    map['toperiodtime'] = _toperiodtime;
    map['durationoftime'] = _durationoftime;
    map['fromlocation'] = _fromlocation;
    map['tolocation'] = _tolocation;
    map['atlocation'] = _atlocation;
    map['servicepersons'] = _servicepersons;
    map['priority'] = _priority;
    map['expiry'] = _expiry;
    return map;
  }

}