import 'dart:async';
import 'dart:convert';
import 'dart:developer';
import 'dart:io';
import 'package:dropdown_button2/dropdown_button2.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/cupertino.dart';
import 'package:dotted_border/dotted_border.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:get/get.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:intl/intl.dart';
import 'package:mask_text_input_formatter/mask_text_input_formatter.dart';
import 'package:path_provider/path_provider.dart';
import 'package:socialapps/Apis/CommonApis.dart';
import 'package:socialapps/Apis/api.dart';
import 'package:socialapps/Apis/urls.dart';
import 'package:socialapps/Auth/login_screen.dart';
import 'package:socialapps/common/ResponsiveBuilder.dart';
import 'package:socialapps/constant/CustomMultiselect.dart';
import 'package:socialapps/constant/constant_function.dart';
import 'package:socialapps/constant/constatnt.dart';
import 'package:socialapps/constant/loader.dart';
import 'package:socialapps/controller/DataManager.dart';
import 'package:socialapps/model/GetCategoryListModal.dart';
import 'package:socialapps/model/GetSegmentListModal.dart';
import 'package:socialapps/model/OfferDataModel.dart';
import 'package:socialapps/model/PrefillOfferDataModel.dart';
import 'package:socialapps/model/ServicePersonListModel.dart';
import 'package:socialapps/model/serviceAreaModel.dart';
import 'package:socialapps/screens/newOfferPage.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:socialapps/screens/widgets/ImagePickeBottomSheet.dart';
import 'package:socialapps/screens/widgets/NewFromScreenWidgets.dart';
import 'package:socialapps/screens/widgets/NewOfferImageListView.dart';
import 'package:socialapps/screens/widgets/NewPeriodPicker/DromToTimePicker.dart';
import 'package:socialapps/screens/widgets/NewPeriodPicker/FromToDatePicker.dart';
import 'package:socialapps/screens/widgets/NewPeriodPicker/ItemDatePicker.dart';
import 'package:socialapps/screens/widgets/SimmerLoadingBuilder.dart';
import 'package:socialapps/screens/widgets/upload_image_camera.dart';
import '../common/style.dart';
import '../constant/loading.dart';
import '../model/GetSubSegmentListModal.dart';
import '../model/UnitListModel.dart';
import 'Dashboard/dashboard_screen.dart';
import 'widgets/NewAddressPickers/NewAddressPickerList.dart';
import 'widgets/NewOfferWidget/commonBottomSheet.dart';
import 'widgets/NewPeriodPicker/ItemTimePicker.dart';
import 'widgets/ShowDurationPicker.dart';


class UpdateOfferScreen extends StatefulWidget {
  OfferDataModelResult OfferData;

  UpdateOfferScreen({Key? key,required this.OfferData}) : super(key: key);

  @override
  State<UpdateOfferScreen> createState() => _UpdateOfferScreenState();
}

class _UpdateOfferScreenState extends State<UpdateOfferScreen> {
  bool cateLoader=false;
  bool segmentLoader=false;
  bool addOfferHide = false;
  int _currentTapindex = 0;

  List<String> selectTypeList = [
    "Deliver",
    "Cancel",
    "Confirm",
    "Template",
    "Modify",
    "New",
  ];

  final List<String> priority = [
    'Normal',
    'Immediate',
    'Premium',
    'Urgent',
    'Low',
    'High',
  ];

  String? selectedValuePriority;
  String? selectedPeriodicityValue;
  var Img = "";
  File? PhotoImg;
  int offerLocationList=1;
  var searchCategoryId = "";
  var searchSegmentId = "";
  var searchSubSegmentId = "";
  var offerPeriodFromDate = "";
  var offerPeriodToDate = "";
  var offerPeriodFromTime = "";
  var offerPeriodToTime = "";
  var offerExpiryDateTime = "";
  String TempDurationDate = "";
  String TempDurationTime = "";
  TextEditingController searchCategoryController = TextEditingController();
  TextEditingController searchSegmentController = TextEditingController();
  TextEditingController searchSubSegmentController = TextEditingController();
  TextEditingController OfferDurationController = TextEditingController();
  TextEditingController OfferPeriodController = TextEditingController();
  TextEditingController OfferPeriodTimeController = TextEditingController();
  TextEditingController OfferExpiryController = TextEditingController();
  TextEditingController OfferFromLocationController = TextEditingController();
  TextEditingController OfferToLocationController = TextEditingController();
  TextEditingController OfferAtLocationController = TextEditingController();

  var maskFormatter = new MaskTextInputFormatter(mask: '##:##:##:##:##', filter: {"#": RegExp(r'[0-9]')});

  List<CategoryData> GetCategoryList = [];
  List<CategoryData> filterGetCategoryList = [];

  List<SegmentResult> getSegmentList = [];
  List<SegmentResult> filterGetSegmentList = [];

  List<SubSegmentResult> getSubSegmentList=[];
  List<SubSegmentResult> filterGetSubSegmentList=[];
  bool showOther = false;
  bool isloadNewCategory = false;
  int selectedCategoryIndex = -1;
  bool showOtherSegment = false;
  bool isloadNewSegment = false;
  int selectedSegmentIndex = -1;
  bool showOtherSubSegment = false;
  bool isloadNewSubSegment = false;
  int Qty = 0;
  int itemCount = 1;
  SubSegmentResult? selectedSubSegmentValue;
  List<ServiceAreaModel> serviceAreaList =[];
  List<dynamic> ItemsList = [];
  List<UnitListData> getUnitList = [];
  List<ServicePersonListModel> ServicePersonList = [];
  List selectedItems = [];
  var months ;
  var diff_mi ;
  var diff_s;
  var diff_hr ;
  var years ;
  var diff_dy ;
  DateTime  ? OfferExpiryDateTime  ;
  DateTime OfferFromDate  = DateTime.now().add(Duration(days: 60));
  DateTime OfferFromTime = DateTime.now().add(Duration(days: 1));
  DateTime OfferToDate = DateTime.now().add(Duration(days: 60));
  DateTime OfferToTime = DateTime.now().add(Duration(days: 1));
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    addLoader = true;
    load();
    // initItems();
    PreFillData();
  }


  @override
  void dispose(){
    super.dispose();
  }
  TextEditingController addSearchController = TextEditingController();
  TextEditingController adressLocationController = TextEditingController();
  TextEditingController OfferInstruction1Controller = TextEditingController();
  TextEditingController OfferInstruction2Controller = TextEditingController();
  late LatLng currentPostion;
  late LatLng pickedPosition;
  String? pickedAdress;
  var lat;
  var long;
  bool addLoader = false;


  load(){
     cateLoader=true;
    DrawAuraAPi.getCategoryListApi().then((value) {
      GetCategoryList = value.result!;
    });
    DrawAuraAPi.getUnitList().then((value) {
      setState(() {
        getUnitList = value.result!;
      });
    });
    DrawAuraAPi.GetServicePersonList().then((value) {
      setState(() {
        ServicePersonList.add( ServicePersonListModel(
          id: 0,
          followers: 0,
          following: 0,
          displayname:  "NEEDED",
          phonenumber: "",
          username: "NEEDED",
          email: "",
          desc: "",
          placeORperson: "",
          businessORpublic: "",
          classification: "",
          movable: false,
          addressORarea: "",
          operatingaddress: "",
          maritalstatus: "",
          passportnumber: null,
          dateofissue: null,
          nationality: null,
          dateofbirth: null,
          gender: "M",
          religion: null,
          subreligion: null,
          caste: null,
          subsect: null,
          numberofcomputations: 0,
          blocked: "NO",
          blockedtime: null,
          deviceToken :"",
          modified: "",
        ));
        ServicePersonList.add( ServicePersonListModel(
          id: -1,
          followers: 0,
          following: 0,
          displayname: "NOT NEEDED",
          phonenumber: "",
          username: "NOT NEEDED",
          email: "",
          desc: "",
          placeORperson: "",
          businessORpublic: "",
          classification: "",
          movable: false,
          addressORarea: "",
          operatingaddress: "",
          maritalstatus: "",
          passportnumber: null,
          dateofissue: null,
          nationality: null,
          dateofbirth: null,
          gender: "M",
          religion: null,
          subreligion: null,
          caste: null,
          subsect: null,
          numberofcomputations: 0,
          blocked: "NO",
          blockedtime: null,
          deviceToken :"",
          modified: "",
        ));
        ServicePersonList.addAll(value);
      });
    });
  }

  String selectedTap = "New";

  void _searchFilter(value,setModalState) {
    setState(() {
      filterGetCategoryList = GetCategoryList.where((name) => name.name!.toLowerCase().contains(value.toLowerCase())).toList();
      filterGetCategoryList.isEmpty ? showOther=true:showOther=false;
    });
    setModalState((){});
  }

  void _searchFilterSegment(value,setModalState) {
    setState(() {
      filterGetSegmentList = getSegmentList.where((name) => name.name!.toLowerCase().contains(value.toLowerCase())).toList();
      filterGetSegmentList.isEmpty ? showOtherSegment=true:showOtherSegment=false;
    });setModalState((){});
  }

  void _searchFilterSubSegment(value,setModalState) {
    setState(() {
      filterGetSubSegmentList = getSubSegmentList.where((name) => name.name!.toLowerCase().contains(value.toLowerCase())).toList();
      filterGetSubSegmentList.isEmpty ? showOtherSubSegment=true:showOtherSubSegment=false;
    });setModalState((){});
  }

  bool isPeriodicityVisible = true;
  bool isDurationVisible = true;
  bool isPeriodVisible = true;
  bool isPeriodTimeVisible = true;
  bool isPriorityVisible = true;
  bool isServicePersonVisible = true;
  bool isExpiryVisible = true;
  List OfferLocationCountList  =[TextEditingController()];
  bool isSinglePeriodSelect = true;
  DateTime  ? ExDTime;

  ///Item Offer

  bool isItemServicePersonVisible = true;
  bool isItemSinglePeriodSelect = true;
  DateTime  ? ItemExDTime;
  bool OfferInstruction1Visible = true;
  bool OfferInstruction2Visible = false;
  bool PublishLoader = false;
  var saveAddress;
  var saveAddressTitle;
  var saveAddressId;
  var userDisplayName;
  bool isOfferFromLocationVisible = false;
  bool isOfferToLocationVisible = false;
  bool isOfferAtLocationVisible = false;
  List  offerDisableFields = [];
  PreFillData() {
    print(widget.OfferData.offerData!.offerBids!.length);
    Future.delayed(Duration(milliseconds: 50),() async{
      final SharedPreferences sharedpreferences = await SharedPreferences.getInstance();
      setState(() {
       
        
        isPrivateOffer =  widget.OfferData.offerData!.privacy.toString().toUpperCase() == "PUBLIC" ?false:true;
        final startTime =DateFormat('dd-MM-yyyy HH:mm').parse('${ widget.OfferData.offerData!.createdAt}');
        final currentTime = DateTime.now();
        diff_dy = currentTime.difference(startTime).inDays;
        years = diff_dy ~/ 365;
        months = (diff_dy-years*365) ~/ 30;
        diff_mi = currentTime.difference(startTime).inMinutes;
        diff_s = currentTime.difference(startTime).inSeconds;
        diff_hr = currentTime.difference(startTime).inHours;


        selectedItems = widget.OfferData.offerData!.offerConditions!.servicepersons!.map((e) =>e).toList();
        if( widget.OfferData.offerData!.offerBids!.isEmpty){
          OfferInstruction1Visible=false;
          OfferInstruction2Visible=false;
        }else if( widget.OfferData.offerData!.offerBids!.length == 1){
          OfferInstruction1Visible=true;
        }else{
          OfferInstruction1Visible=true;
          OfferInstruction2Visible=true;
        }
        userDisplayName = sharedpreferences.getString("UserDisplayName")??"";
        searchCategoryController.text = widget.OfferData.offerData!.category!.name.toString();
        searchSegmentController.text = widget.OfferData.offerData!.segment!.name.toString();
        searchSubSegmentController.text = widget.OfferData.offerData!.subsegment!.name.toString();
        searchCategoryId = widget.OfferData.offerData!.category!.id.toString();
        searchSegmentId =widget.OfferData.offerData!.segment!.id.toString();
        searchSubSegmentId = widget.OfferData.offerData!.subsegment!.id.toString();
        OfferInstruction1Controller.text = widget.OfferData.offerData!.offerBids![0].comment.toString();
        OfferInstruction2Controller.text = widget.OfferData.offerData!.offerBids!.length == 1 ? "": widget.OfferData.offerData!.offerBids![1].comment.toString();
        List serviceTemp = jsonDecode("${widget.OfferData.offerData!.offerareas!.toString()}");
        serviceAreaList = serviceTemp.map((e) => ServiceAreaModel.fromJson(e)).toList();
        adressLocationController.text = widget.OfferData.offerData!.addres.toString();
        selectedTap = "Modify";
        _currentTapindex = widget.OfferData.offerData!.buyORsell.toString() == "BUY"?0:1;
        selectedPeriodicityValue =widget.OfferData.offerData!.offerConditions!.periodicity==null?"": widget.OfferData.offerData!.offerConditions!.periodicity.toString().trim();
        selectedValuePriority = widget.OfferData.offerData!.offerConditions!.priority ==null?"": widget.OfferData.offerData!.offerConditions!.priority.toString().trim();

        final fromPeriodDate = widget.OfferData.offerData!.offerConditions!.fromperiod== null ?"":widget.OfferData.offerData!.offerConditions!.fromperiod.toString();
        final fromPeriodTime = widget.OfferData.offerData!.offerConditions!.fromperiodtime==null?"": widget.OfferData.offerData!.offerConditions!.fromperiodtime.toString();
        final toPeriodDate = widget.OfferData.offerData!.offerConditions!.toperiod == null ?"": widget.OfferData.offerData!.offerConditions!.toperiod.toString();
        final toPeriodTime = widget.OfferData.offerData!.offerConditions!.toperiodtime == null?"": widget.OfferData.offerData!.offerConditions!.toperiodtime.toString();
         print(fromPeriodDate);
         print("FromPeriodTest");
        DateTime FromDatePeriod = fromPeriodDate == ""  ? DateTime.now().add(Duration(days: 60)) :
        fromPeriodTime == "" ?DateFormat('dd/MM/yyyy HH:mm:ss').parse('${fromPeriodDate.replaceAll("-","/")} 00:00:00.000'):
        DateFormat('dd/MM/yyyy HH:mm:ss').parse('${fromPeriodDate.replaceAll("-","/")} $fromPeriodTime');

        DateTime toDatePeriod = toPeriodDate == "" ?DateTime.now().add(Duration(days: 60)) :
        toPeriodTime == ""? DateFormat('dd/MM/yyyy HH:mm:ss').parse('${toPeriodDate.replaceAll("-","/")} 00:00:00.000'):
        DateFormat('dd/MM/yyyy HH:mm:ss').parse('${toPeriodDate.replaceAll("-","/")} $toPeriodTime');
        OfferFromDate =   FromDatePeriod;

        OfferToDate = toDatePeriod;

        DateTime FromTimePeriod = selectedPeriodicityValue.toString().toUpperCase() == "TODAY" ? fromPeriodTime != "" ?  DateFormat('dd/MM/yyyy HH:mm:ss').parse('${DateTime.now().day.toString().length == 1 ?"0${DateTime.now().day}":DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year} $fromPeriodTime') : DateTime.now().add(Duration(days: 1)) :
        selectedPeriodicityValue.toString().toUpperCase() == "TOMORROW" ? fromPeriodTime != "" ?  DateFormat('dd/MM/yyyy HH:mm:ss').parse('${DateTime.now().add(Duration(days: 1)).day.toString().length == 1 ?"0${DateTime.now().add(Duration(days: 1)).day}":DateTime.now().add(Duration(days: 1)).day}/${DateTime.now().month}/${DateTime.now().year} $fromPeriodTime'): DateTime.now().add(Duration(days: 1)): DateTime.now().add(Duration(days: 1));
        OfferFromTime = FromTimePeriod;

        DateTime ToTimePeriod = selectedPeriodicityValue.toString().toUpperCase() == "TODAY" ? toPeriodTime != "" ? DateFormat('dd/MM/yyyy HH:mm:ss').parse('${DateTime.now().day.toString().length == 1 ?"0${DateTime.now().day}":DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year} $toPeriodTime') : DateTime.now().add(Duration(days: 1)) :
        selectedPeriodicityValue.toString().toUpperCase() == "TOMORROW" ? toPeriodTime != "" ? DateFormat('dd/MM/yyyy HH:mm:ss').parse('${DateTime.now().add(Duration(days: 1)).day.toString().length == 1 ?"0${DateTime.now().add(Duration(days: 1)).day}":DateTime.now().add(Duration(days: 1)).day}/${DateTime.now().month}/${DateTime.now().year} $toPeriodTime') : DateTime.now().add(Duration(days: 1)): DateTime.now().add(Duration(days: 1));
        OfferToTime = ToTimePeriod;

        ExDTime = widget.OfferData.offerData!.offerConditions!.expiry==null ? null : DateFormat('dd/MM/yyyy HH:mm:ss').parse('${widget.OfferData.offerData!.offerConditions!.expiry.toString().replaceAll("-","/")}:00');

        print("Converted DateTime");
        print(FromDatePeriod);
        print(FromTimePeriod);
        print(toDatePeriod);
        print(ToTimePeriod);
        // OfferPeriodController.text =
        // selectedPeriodicityValue.toString().toUpperCase() == "TODAY" ||  selectedPeriodicityValue.toString().toUpperCase() == "TOMORROW" ?
        // fromPeriodTime == ""? "":
        // "From  ${fromPeriodTime} ${toPeriodTime != "" ? "To ""${toPeriodTime}":"" }" :
        // fromPeriodDate == ""? "":
        // "From ${fromPeriodDate} ${fromPeriodTime} ${toPeriodDate != "" ? "To " "${toPeriodDate} "  "${toPeriodTime}":"" }";
        OfferPeriodTimeController.text = "${fromPeriodTime=="" && toPeriodTime==""?"": toPeriodTime != ""?"From "+  fromPeriodTime +" To "+toPeriodTime :"From " +  fromPeriodTime}";
        OfferPeriodController.text = "${fromPeriodTime=="" && toPeriodDate=="" ?"": toPeriodDate !=  ""?"From "+ fromPeriodDate+" To " + toPeriodDate :"From "+ fromPeriodDate}";
       // OfferPeriodController.text =fromPeriodTime=="" && fromPeriodDate=="" && toPeriodDate=="" && toPeriodTime==""?"": toPeriodDate != "" && toPeriodTime != ""?"From "+ fromPeriodDate+" " +  fromPeriodTime +" To " + toPeriodDate +" "+toPeriodTime :"From "+ fromPeriodDate+" " +  fromPeriodTime;
        OfferDurationController.text = widget.OfferData.offerData!.offerConditions!.duration==null?"": widget.OfferData.offerData!.offerConditions!.duration.toString();
        OfferExpiryController.text =widget.OfferData.offerData!.offerConditions!.expiry==null?"": widget.OfferData.offerData!.offerConditions!.expiry.toString();
        OfferFromLocationController.text = widget.OfferData.offerData!.offerConditions!.fromlocation == null ?"": widget.OfferData.offerData!.offerConditions!.fromlocation.toString();
        OfferToLocationController.text =  widget.OfferData.offerData!.offerConditions!.tolocation == null ? "": widget.OfferData.offerData!.offerConditions!.tolocation.toString();
        OfferAtLocationController.text = widget.OfferData.offerData!.offerConditions!.atlocation == null ? "": widget.OfferData.offerData!.offerConditions!.atlocation.toString();
        adressLocationController.text = widget.OfferData.offerData!.addres.toString();
        offerPeriodFromDate = widget.OfferData.offerData!.offerConditions!.fromperiod == null ?"":widget.OfferData.offerData!.offerConditions!.fromperiod.toString();
        offerPeriodFromTime =widget.OfferData.offerData!.offerConditions!.fromperiodtime == null?"": widget.OfferData.offerData!.offerConditions!.fromperiodtime.toString();
        offerPeriodToDate = widget.OfferData.offerData!.offerConditions!.toperiod == null ?"": widget.OfferData.offerData!.offerConditions!.toperiod.toString();
        offerPeriodToTime = widget.OfferData.offerData!.offerConditions!.toperiodtime == null?"": widget.OfferData.offerData!.offerConditions!.toperiodtime.toString();
        offerExpiryDateTime = widget.OfferData.offerData!.offerConditions!.expiry == null?"": widget.OfferData.offerData!.offerConditions!.expiry.toString();
          isOfferFromLocationVisible = true;
          isOfferToLocationVisible =  widget.OfferData.offerData!.offerConditions!.tolocation == null ? false:widget.OfferData.offerData!.offerConditions!.tolocation == "" ? false: true;
          isOfferAtLocationVisible = widget.OfferData.offerData!.offerConditions!.atlocation == null ?false :widget.OfferData.offerData!.offerConditions!.atlocation == "" ?false:true;

        offerDisableFields = widget.OfferData.offerData!.offerConditions!.disableFields.toString() == "null" ? [] :jsonDecode("${widget.OfferData.offerData!.offerConditions!.disableFields.toString()}");
        offerDisableFields.contains("offerArea")?serviceAreaList.clear():null;
        offerDisableFields.contains("Periodicity")?isPeriodicityVisible = false:null;
        offerDisableFields.contains("DatePeriod")?isPeriodVisible = false:null;
        offerDisableFields.contains("TimePeriod")?isPeriodTimeVisible = false:null;
        offerDisableFields.contains("Duration")?isDurationVisible = false:null;
        offerDisableFields.contains("Priority")?isPriorityVisible =false:null;
        offerDisableFields.contains("Expiry")?isExpiryVisible =false :null;
        offerDisableFields.contains("FromLocation")?isOfferFromLocationVisible = false :null;
        offerDisableFields.contains("ToLocation")?isOfferToLocationVisible = false:null;
        offerDisableFields.contains("AtLocation")?isOfferAtLocationVisible = false:null;
     //   offerDisableFields.contains("Bid1")?serviceAreaList.clear():null;
      });

      for(var i = 0 ; i<widget.OfferData.offerData!.offerItems!.length ; i++){
        final imageMedia = [];
        final fileUrls = [];
        for(var j = 0 ; j< widget.OfferData.offerData!.offerItems![i].itemMedia!.length ; j++){
          imageMedia.add({
            "file":"${ widget.OfferData.offerData!.offerItems![i].itemMedia![j].id}",
             "name": "${widget.OfferData.offerData!.offerItems![i].itemMedia![j].name}"
          });
          fileUrls.add(
            "${widget.OfferData.offerData!.offerItems![i].itemMedia![j].file}",
          );
        }

        List selectedItemsList = widget.OfferData.offerData!.offerItems![i].offerItemConditions!.servicepersons!.map((e) =>e).toList();
        List<UnitListData> TempUnitList = [];
        final fromPeriodDate = widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromperiod== null ?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromperiod.toString();
        final fromPeriodTime =widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromperiodtime==null?"": widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromperiodtime.toString();
        final toPeriodDate = widget.OfferData.offerData!.offerItems![i].offerItemConditions!.toperiod == null ?"": widget.OfferData.offerData!.offerItems![i].offerItemConditions!.toperiod.toString();
        final toPeriodTime =widget.OfferData.offerData!.offerItems![i].offerItemConditions!.toperiodtime == null?"": widget.OfferData.offerData!.offerItems![i].offerItemConditions!.toperiodtime.toString();

        final ExDTimeItem = widget.OfferData.offerData!.offerItems![i].offerItemConditions!.expiry==null ? null : DateFormat('dd/MM/yyyy HH:mm:ss').parse('${widget.OfferData.offerData!.offerItems![i].offerItemConditions!.expiry.toString().replaceAll("-","/")}:00');

        DateTime FromDatePeriod = fromPeriodDate == ""  ? DateTime.now().add(Duration(days: 60)) :
        fromPeriodTime == "" ?DateFormat('dd/MM/yyyy HH:mm:ss').parse('${fromPeriodDate.replaceAll("-","/")} 00:00:00.000'):
        DateFormat('dd/MM/yyyy HH:mm:ss').parse('${fromPeriodDate.replaceAll("-","/")} $fromPeriodTime');


        DateTime toDatePeriod = toPeriodDate == "" ?DateTime.now().add(Duration(days: 60)) :
        toPeriodTime == ""? DateFormat('dd/MM/yyyy HH:mm:ss').parse('${toPeriodDate.replaceAll("-","/")} 00:00:00.000'):
        DateFormat('dd/MM/yyyy HH:mm:ss').parse('${toPeriodDate.replaceAll("-","/")} $toPeriodTime');

        DateTime FromTimePeriod = selectedPeriodicityValue.toString().toUpperCase() == "TODAY" ? fromPeriodTime != "" ?  DateFormat('dd/MM/yyyy HH:mm:ss').parse('${DateTime.now().day.toString().length == 1 ?"0${DateTime.now().day}":DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year} $fromPeriodTime') : DateTime.now().add(Duration(days: 1)) :
        selectedPeriodicityValue.toString().toUpperCase() == "TOMORROW" ? fromPeriodTime != "" ?  DateFormat('dd/MM/yyyy HH:mm:ss').parse('${DateTime.now().add(Duration(days: 1)).day.toString().length == 1 ?"0${DateTime.now().add(Duration(days: 1)).day}":DateTime.now().add(Duration(days: 1)).day}/${DateTime.now().month}/${DateTime.now().year} $fromPeriodTime'): DateTime.now().add(Duration(days: 1)): DateTime.now().add(Duration(days: 1));

        DateTime ToTimePeriod = selectedPeriodicityValue.toString().toUpperCase() == "TODAY" ? toPeriodTime != "" ? DateFormat('dd/MM/yyyy HH:mm:ss').parse('${DateTime.now().day.toString().length == 1 ?"0${DateTime.now().day}":DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year} $toPeriodTime') : DateTime.now().add(Duration(days: 1)) :
        selectedPeriodicityValue.toString().toUpperCase() == "TOMORROW" ? toPeriodTime != "" ? DateFormat('dd/MM/yyyy HH:mm:ss').parse('${DateTime.now().add(Duration(days: 1)).day.toString().length == 1 ?"0${DateTime.now().add(Duration(days: 1)).day}":DateTime.now().add(Duration(days: 1)).day}/${DateTime.now().month}/${DateTime.now().year} $toPeriodTime') : DateTime.now().add(Duration(days: 1)): DateTime.now().add(Duration(days: 1));

        List  TempDisableFields = [];
        TempDisableFields =  widget.OfferData.offerData!.offerItems![i].offerItemConditions!.disableFields.toString() == "null"  || widget.OfferData.offerData!.offerItems![i].offerItemConditions!.disableFields.toString() == ""? [] : jsonDecode("${ widget.OfferData.offerData!.offerItems![i].offerItemConditions!.disableFields.toString()}");

        ItemsList.add({
        "ItemId": widget.OfferData.offerData!.offerItems![i].id.toString(),
        "itemType" :"Old",
        "name":TextEditingController(text: widget.OfferData.offerData!.offerItems![i].name.toString()),
        "desc":TextEditingController(text: widget.OfferData.offerData!.offerItems![i].desc.toString()),
        "price":TextEditingController(text:  widget.OfferData.offerData!.offerItems![i].price.toString() == "null" ?"": widget.OfferData.offerData!.offerItems![i].price.toString()),
        "unit":TextEditingController(text:  widget.OfferData.offerData!.offerItems![i].unit!.name.toString() == "null"?"": widget.OfferData.offerData!.offerItems![i].unit!.name.toString()),
        "AdvancePrice" : TextEditingController(text :widget.OfferData.offerData!.offerItems![i].advancePrice == null ? "":  widget.OfferData.offerData!.offerItems![i].advancePrice.toString()),
        "AdvanceUnit" : TextEditingController(text :widget.OfferData.offerData!.offerItems![i].advanceUnit!.name == null ? "" :  widget.OfferData.offerData!.offerItems![i].advanceUnit!.name.toString()),
        "MaintenancePrice" : TextEditingController(text :  widget.OfferData.offerData!.offerItems![i].maintenancePrice == null ? "": widget.OfferData.offerData!.offerItems![i].maintenancePrice.toString()),
        "MaintenanceUnit" : TextEditingController(text : widget.OfferData.offerData!.offerItems![i].maintenanceUnit!.name == null ? "" : widget.OfferData.offerData!.offerItems![i].maintenanceUnit!.name.toString()),
        "filterGetUnitList" : TempUnitList,
        "showOtherUnit" : false,
        "isLoadNewUnit" : false,
        "selectedUnitIndex" : -1,
        "SelectedUnitId" : widget.OfferData.offerData!.offerItems![i].unit == null ? null : widget.OfferData.offerData!.offerItems![i].unit!.id.toString() ,
        "filterGetUnitListMain" : TempUnitList,
        "showOtherUnitMain" : false,
        "isLoadNewUnitMain" : false,
        "selectedUnitIndexMain" : -1,
        "SelectedUnitIdMain" : widget.OfferData.offerData!.offerItems![i].maintenanceUnit == null ? null :widget.OfferData.offerData!.offerItems![i].maintenanceUnit!.id.toString(),
        "filterGetUnitListAdva" : TempUnitList,
        "showOtherUnitAdva" : false,
        "isLoadNewUnitAdva" : false,
        "selectedUnitIndexAdva" : -1,
        "SelectedUnitIdAdva" :  widget.OfferData.offerData!.offerItems![i].advanceUnit == null ? null :widget.OfferData.offerData!.offerItems![i].advanceUnit!.id.toString(),
        "fillSelectedPerson" : selectedItemsList,
        "type" : "old",

        "quantity":int.parse(widget.OfferData.offerData!.offerItems![i].quantity.toString()),
        "currency":"INR",
        "addon":widget.OfferData.offerData!.offerItems![i].addon,
        "required":widget.OfferData.offerData!.offerItems![i].required,
        "toggle_state":false,
        "media":imageMedia,
        "isLoadingFile":false,
        "fileUrl":fileUrls,
        "itemConditionView" :false,
        "item_condition":{
          "ItemConditionId": widget.OfferData.offerData!.offerItems![i].offerItemConditions!.id.toString(),
          "periodicityView": true,
          "periodView": true,
          "durationView": true,
          "priorityView": true,
          "expiryView": true,
          "fromlocationView": true,
          "tolocationView": true,
          "atlocationView": true,
          "servicepersons":selectedItemsList,
          "periodicity":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.periodicity == null ?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.periodicity,
          "periodTime":TextEditingController(text:"${fromPeriodTime=="" && toPeriodTime==""?"": toPeriodTime != ""?"From "+  fromPeriodTime +" To "+toPeriodTime :"From " +  fromPeriodTime}"),
          "period":TextEditingController(text:  "${fromPeriodTime=="" && toPeriodDate=="" ?"": toPeriodDate !=  ""?"From "+ fromPeriodDate+" To " + toPeriodDate :"From "+ fromPeriodDate}"),

          //"period":TextEditingController(text:fromPeriodTime=="" && fromPeriodDate=="" && toPeriodDate=="" && toPeriodTime==""?"": toPeriodDate != "" && toPeriodTime != ""?"From "+ fromPeriodDate+" " +  fromPeriodTime +" To " + toPeriodDate +" "+toPeriodTime :"From "+ fromPeriodDate+" " +  fromPeriodTime),
          "fromperiod":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromperiod==null?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromperiod,
          "toperiod":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.toperiod==null?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.toperiod,
          "duration": TextEditingController(text: widget.OfferData.offerData!.offerItems![i].offerItemConditions!.duration==null?"": widget.OfferData.offerData!.offerItems![i].offerItemConditions!.duration),
          "fromperiodtime":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromperiodtime == null ?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromperiodtime,
          "toperiodtime":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.toperiodtime == null ? "":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.toperiodtime,
          "durationoftime":"",
          "fromlocation":TextEditingController(text:  widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromlocation==null?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.fromlocation.toString()),
          "tolocation":TextEditingController(text:  widget.OfferData.offerData!.offerItems![i].offerItemConditions!.tolocation==null?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.tolocation.toString()),
          "atlocation":TextEditingController(text: widget.OfferData.offerData!.offerItems![i].offerItemConditions!.atlocation==null?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.atlocation.toString()),
          "priority": widget.OfferData.offerData!.offerItems![i].offerItemConditions!.priority==null?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.priority.toString(),
          "expiry":TextEditingController(text: widget.OfferData.offerData!.offerItems![i].offerItemConditions!.expiry==null?"":widget.OfferData.offerData!.offerItems![i].offerItemConditions!.expiry.toString()),
           "ExpiryDateTime" : ExDTimeItem,
          "FromPeriodDateFill" : FromDatePeriod,
          "ToPeriodDateFill" : toDatePeriod,
          "FromPeriodTimeFill" : FromTimePeriod,
          "ToPeriodTimeFIll" : ToTimePeriod,
      },
          "showItemPriceMain":TempDisableFields.contains("PriceUnit")?false: true,
          "showItemQty":TempDisableFields.contains("Qty")?false: true,
          "showMediaData":TempDisableFields.contains("UploadMeta")?false: true,
        "isShowItem": true,
        "showItemPrice2":false,
        "showItemPrice3":false,
        "showItemCondition": false,
        "showItemPeriodicity" : TempDisableFields.contains("Periodicity")?false: true,
        "showItemPeriod" :TempDisableFields.contains("DatePeriod")?false: true,
          "showItemPeriodTime" :TempDisableFields.contains("TimePeriod")?false: true,
          "isItemSinglePeriodSelect" :true,
        "showItemDuration" :TempDisableFields.contains("Duration")?false: true,
        "showItemPriority" :TempDisableFields.contains("Priority")?false: true,
        "showItemExpiry" :TempDisableFields.contains("Expiry")?false: true,
        "showItemFromLocation" :TempDisableFields.contains("FromLocation")?false: true,
        "showItemTOLocation" :TempDisableFields.contains("ToLocation")?false: true,
        "showItemAtLocation" :TempDisableFields.contains("AtLocation")?false: true,

      });
    }
      Future.delayed(Duration.zero,() {
        if(mounted){
          setState(() {
            cateLoader=false;
          });
        }
      },);
    },);
  }


  /// periodicity list
  final List<String> periodicityList = [
    "Tomorrow",
    'Today',
    "Weekends",
    "Daily",
    "Monthly",
    "Yearly",
    "Weekly",
    "Weekdays",
    "Once"
  ];
  final List<String> periodicityDailyList = [
    "Daily",
    "Weekdays",
    "Alternate days",
    "Weekends",
    "Once"
  ];
  final List<String> periodicityWeekendsList = [
    "Weekends",
    "Saturday",
    "Sunday",
    "Once"
  ];
  final List<String> periodicityWeekDaysList = [
    "Weekdays",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Alternate days",
    "Once"
  ];
  bool isPrivateOffer = false;
  @override
  Widget build(BuildContext context) {
    var width = MediaQuery.of(context).size.width;
    var tabWidth = ResponsiveHelper.TabModeWidth;
    var height = MediaQuery.of(context).size.height;
    var isMobile = ResponsiveHelper.isMobile(context);
    return Scaffold(
      backgroundColor: ResponsiveHelper.isMobile(context)? Constants.newBackground : Constants.tabBackGroundColor,
      body: responsiveContainer(context,
          ResponsiveHelper.isMobile(context)? Constants.newBackground : Constants.tabBackGroundColor,
          Scaffold(
            appBar:AppBar(
              backgroundColor: const Color(0xFFE7E6E6),
              toolbarHeight: 40,
              elevation: 0,
              automaticallyImplyLeading: false,
              title:cateLoader==true?const SizedBox(): Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  //  Text(saveAddressTitle==""?"":"${saveAddressTitle}", style: black14700),
                  Flexible(
                    child: Container(
                      height: 30,
                      margin: EdgeInsets.only(left:5),
                      padding: const EdgeInsets.symmetric(horizontal: 5,vertical: 5),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(5),
                      ),
                      child:TextFormField(
                        controller: adressLocationController,
                        onTap:() async {
                          Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true,isTitleSelectAsAddress: false))).then((value) {
                            setState(() {
                              adressLocationController.text = value;
                              _currentTapindex == 1 ?  OfferFromLocationController.text = adressLocationController.text :OfferToLocationController.text =  adressLocationController.text;

                            });
                          });

                        },
                        readOnly:true,
                        keyboardType: TextInputType.text,
                        decoration: InputDecoration(hintText:"Location loading..", fillColor:  Colors.white, hintStyle: greyHintStyle,
                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                          floatingLabelBehavior: FloatingLabelBehavior.never,
                          contentPadding: const EdgeInsets.symmetric(horizontal: 5,vertical: 0),
                          border: const OutlineInputBorder(),
                        ),
                        style: Black87HintStyle,
                      ),
                    ),
                  )
                ],
              ),
            ),
            body:cateLoader==true?const Center(child: LoadingWidget()):Stack(
              children:[
                GestureDetector(
                    onTap: () {
                    FocusScope.of(context).requestFocus(new FocusNode());
                  },
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 15),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const SizedBox(height:10),
                            Row(
                              children: [
                                InkWell(
                                    onTap:(){Navigator.pop(context);},
                                    child: const Icon(Icons.arrow_back,size: 24,)),
                                const SizedBox(width: 10,),

                                SizedBox(
                                  height: 25,
                                  child: ElevatedButton(
                                      style: ElevatedButton.styleFrom(
                                          padding: const EdgeInsets.symmetric(horizontal: 10,vertical: 2),
                                          shape: const RoundedRectangleBorder(borderRadius: BorderRadius.only(topRight: Radius.circular(10),topLeft:Radius.circular(10) )),
                                          backgroundColor: Constants.primaryColor1,
                                          elevation: 1
                                      ),
                                      onPressed: () {},
                                      child:  Text("${userDisplayName}",style: WhiteHeadingStyle,)),
                                ),
                                Spacer(),
                                Column(
                                  children: [
                                    InkWell(
                                        onTap:(){
                                          setState(() {
                                            isPrivateOffer = !isPrivateOffer;
                                          });
                                        },
                                        child:isPrivateOffer ? Image(image: AssetImage("assets/secured_lock.png"),width: 22,height: 22,color: primaryColor):Image(image: AssetImage("assets/world.png"),width: 20,height: 20,color: primaryColor,)),
                                    3.height,
                                    Text( isPrivateOffer ?"Private":"Public",style: greyHintStyle,)
                                  ],
                                )

                              ],
                            ),
                            const SizedBox(height:5),
                            //TODO Offering Location
                            Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 0),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                crossAxisAlignment: CrossAxisAlignment.center,
                                children: [
                                  SizedBox(
                                    height: 30,
                                    width:isMobile?width*0.75:tabWidth*0.75,
                                    child:
                                    serviceAreaList.isEmpty  || serviceAreaList[0] == "" || serviceAreaList[0].toString() == "null" ?
                                    Row(
                                        mainAxisAlignment: MainAxisAlignment.start,
                                        crossAxisAlignment: CrossAxisAlignment.center,
                                        children: [Text("Tap Edit To Enter The Area Of Offering",style:BlackSubCardTitle)]
                                    )
                                        :
                                    ListView.builder (
                                      scrollDirection: Axis.horizontal,
                                      itemCount: serviceAreaList.length,
                                      physics: const ScrollPhysics(),
                                      shrinkWrap: false,
                                      itemBuilder: (context, index) {
                                        return Center(
                                          child: Padding(
                                            padding:  EdgeInsets.only(right :10.0),
                                            child: Text("${ serviceAreaList[index].address}",style: BlackSubTitleStyle,),
                                          ),
                                        );
                                      },),
                                  ),
                                  EditBtn((){
                                    showModalBottomSheet<void>(
                                      elevation: 0,
                                      shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.only(topRight: Radius.circular(20),topLeft: Radius.circular(20))
                                      ),
                                      context: context, builder: (context) {
                                      return  StatefulBuilder(builder: (context, setModalState) {
                                        return  Stack(
                                          children: [
                                            ListView(
                                              shrinkWrap: true,
                                              physics: ScrollPhysics(),
                                              padding: EdgeInsets.only(top:30),
                                              children: [

                                                Padding(
                                                  padding: const EdgeInsets.symmetric(horizontal: 15),
                                                  child: ListView.builder (
                                                    scrollDirection: Axis.vertical,
                                                    itemCount: serviceAreaList.length,
                                                    physics: const ScrollPhysics(),
                                                    shrinkWrap: true,
                                                    itemBuilder: (context, index) {
                                                      var data = serviceAreaList[index];
                                                      return Stack(
                                                        children: [
                                                          Padding(
                                                            padding: const EdgeInsets.only(right: 8.0,top:8,bottom: 5,left: 1),
                                                            child: InkWell(
                                                              onTap:() async {

                                                                Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true,isTitleSelectAsAddress: true))).then((value) {
                                                                  setState(() {
                                                                    serviceAreaList[index] = ServiceAreaModel(address: value.toString());
                                                                  });setModalState((){});
                                                                });

                                                              },
                                                              child: Container(
                                                                  height: 35,
                                                                  padding: EdgeInsets.only(left:12),
                                                                  decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                                    BoxShadow(
                                                                        blurRadius: 2.0,
                                                                        color: Colors.black54,
                                                                        offset: Offset(0.0, 0.5) ),
                                                                  ], borderRadius: BorderRadius.circular(5)),
                                                                  width: isMobile ? MediaQuery.of(context).size.width:tabWidth,
                                                                  child: Center(
                                                                      child: Text("${data.address}")
                                                                  )
                                                                // TextFormField(
                                                                //
                                                                //
                                                                //   readOnly:true,
                                                                //   keyboardType: TextInputType.text,
                                                                //   decoration: InputDecoration(hintText:"Offer Location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                //     focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                //     enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                //     floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                //     contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                //     border: const OutlineInputBorder(),
                                                                //   ),
                                                                //   style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                                                                // ),
                                                              ),
                                                            ),
                                                          ),
                                                          Positioned(
                                                              bottom:12,left:2,
                                                              child: InkWell(
                                                                onTap:(){
                                                                  setState((){
                                                                    serviceAreaList.removeAt(index);
                                                                  });setModalState((){});
                                                                },
                                                                child: CircleAvatar(
                                                                  radius:9,
                                                                  backgroundColor: Color(
                                                                      0x3389F6B9) ,
                                                                  child: Center(
                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                  ),
                                                                ),
                                                              )),
                                                          serviceAreaList.length-1 == index?   Positioned(
                                                              top:1,right:2,
                                                              child: InkWell(
                                                                onTap:(){
                                                                  if(serviceAreaList.length == 5){
                                                                    Constants.showToast("Max 5 Offering area are allowed");
                                                                  }else{
                                                                    setState((){
                                                                      serviceAreaList.insert(index, ServiceAreaModel(address: ""));
                                                                    });setModalState((){});
                                                                  }

                                                                },
                                                                child: CircleAvatar(
                                                                  radius:9,
                                                                  backgroundColor: Constants.primaryColor1 ,
                                                                  child: Center(
                                                                      child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                  ),
                                                                ),
                                                              )):SizedBox()
                                                        ],
                                                      );
                                                    },),
                                                ),
                                              ],
                                            ),
                                            Positioned(
                                                top:10,left:0,right:0,
                                                child:BottomSheetDivider())
                                          ],
                                        );
                                      },);
                                    },);
                                  })                                    ],
                              ),
                            ),

                            const SizedBox(height:5),
                          ],
                        ),
                      ),
                      //TODO TabActivity
                      Container(
                        // color: Colors.black12,
                          alignment: Alignment.center,
                          decoration: const BoxDecoration(
                              color:  Color(0xFFD2D0D0),
                              boxShadow: [
                                BoxShadow(
                                    color: Color(0xFFD2D0D0),
                                    blurRadius: 2,
                                    spreadRadius: 2,
                                    offset: Offset(0,4)
                                )
                              ]
                          ),
                          padding:  EdgeInsets.symmetric(horizontal: 10.0),
                          height: 32,
                          width: isMobile?width:tabWidth,
                          child: SingleChildScrollView(
                            physics: ScrollPhysics(),scrollDirection: Axis.horizontal,
                               child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: [
                                InkWell(
                                  onTap:(){
                                    setState(() {
                                      selectedTap = "Deliver";
                                    });
                                  },
                                  child: Container(
                                    height: 30,
                                    padding: const EdgeInsets.symmetric(horizontal: 5.0),
                                    decoration:  BoxDecoration(
                                      color:  selectedTap == "Deliver"? Constants.primaryColor1:Colors.transparent,
                                      borderRadius: const BorderRadius.only(topRight: Radius.circular(10),topLeft:Radius.circular(10) ),
                                    ),
                                    child:  Center(child: Text('Deliver',style:  selectedTap == "Deliver"?WhiteSubTitleStyle:BlackSubTitleStyle,)),),
                                ),
                                InkWell(
                                  onTap:(){
                                    setState(() {
                                      selectedTap = "Cancel";
                                    });
                                  },
                                  child: Container(
                                    height: 30,
                                    padding: const EdgeInsets.symmetric(horizontal: 5.0),
                                    decoration: BoxDecoration(
                                      color:  selectedTap == "Cancel"? Constants.primaryColor1:Colors.transparent,
                                      borderRadius: const BorderRadius.only(topRight: Radius.circular(10),topLeft:Radius.circular(10) ),
                                    ),
                                    child:  Center(child: Text('Cancel',style:  selectedTap == "Cancel"?WhiteSubTitleStyle:BlackSubTitleStyle,)),),
                                ),
                                InkWell(
                                  onTap:(){
                                    // setState(() {
                                    //   selectedTap = "Confirm";
                                    // });
                                  },
                                  child: Container(
                                    height: 30,
                                    padding: const EdgeInsets.symmetric(horizontal: 5.0),
                                    decoration: BoxDecoration(
                                      color:  selectedTap == "Confirm"? Constants.primaryColor1:Constants.unActiveTabBg,
                                      borderRadius: const BorderRadius.only(topRight: Radius.circular(10),topLeft:Radius.circular(10) ),
                                    ),
                                    child:  Center(child: Text('Confirm',style:  selectedTap == "Confirm"?WhiteSubTitleStyle:unActiveTabStyle,)),),
                                ),
                                InkWell(
                                  onTap:(){
                                    setState(() {
                                      selectedTap = "Duplicate";
                                    });
                                  },
                                  child: Container(
                                      height: 30,
                                      padding: const EdgeInsets.symmetric(horizontal: 5.0),
                                      decoration: BoxDecoration(
                                        color:  selectedTap == "Duplicate"? Constants.primaryColor1:Colors.transparent,
                                        borderRadius: const BorderRadius.only(topRight: Radius.circular(10),topLeft:Radius.circular(10) ),
                                      ),
                                      child:  Center(child: Text('Duplicate',style:  selectedTap == "Duplicate"?WhiteSubTitleStyle:BlackSubTitleStyle,))
                                  ),
                                ),
                                InkWell(
                                  onTap:(){
                                    setState(() {
                                      selectedTap = "Modify";
                                    });
                                  },
                                  child: Container(
                                      height: 30,
                                      padding: const EdgeInsets.symmetric(horizontal: 5.0),
                                      decoration: BoxDecoration(
                                        color:  selectedTap == "Modify"? Constants.primaryColor1:Colors.transparent,
                                        borderRadius: const BorderRadius.only(topRight: Radius.circular(10),topLeft:Radius.circular(10) ),
                                      ),
                                      child:  Center(child: Text('Modify',style:  selectedTap == "Modify"?WhiteSubTitleStyle:BlackSubTitleStyle,))
                                  ),
                                ),
                                InkWell(
                                  onTap:(){
                                    // setState(() {
                                    //   selectedTap = "New";
                                    // });
                                  },
                                  child: Container(
                                      height: 30,
                                      padding: const EdgeInsets.symmetric(horizontal: 5.0),
                                      decoration: BoxDecoration(
                                        color:  selectedTap == "New"? Constants.primaryColor1:Constants.unActiveTabBg,
                                        borderRadius: const BorderRadius.only(topRight: Radius.circular(8),topLeft:Radius.circular(8) ),
                                      ),
                                      child:  Center(child: Text('New',style:  selectedTap == "New"?WhiteSubTitleStyle:unActiveTabStyle,))
                                  ),
                                ),
                              ],
                            ),
                          )
                      ),
                      //TODO Buy Sell
                      Container(
                          height: 80,
                          width: MediaQuery.sizeOf(context).width,
                          decoration:  const BoxDecoration(color: Color(0xFFE7E6E6),
                          ),
                          child: Center(
                            child: ListView.builder(
                              itemCount: 2,
                              shrinkWrap: true,
                              scrollDirection: Axis.horizontal,
                              physics: const ScrollPhysics(),
                              padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 15),
                              itemBuilder: (context, index) {
                                return InkWell(
                                  onTap: () {
                                    setState(() {
                                      _currentTapindex = index;
                                      OfferFromLocationController.clear();
                                      OfferToLocationController.clear();
                                      _currentTapindex == 1 ?  OfferFromLocationController.text = adressLocationController.text :OfferToLocationController.text =  adressLocationController.text;
                                    });
                                  },
                                  child: Container(
                                    height: 60,
                                    margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 0),
                                    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 5),
                                    decoration: BoxDecoration(
                                        color: _currentTapindex == index
                                            ? Constants.primaryColor1
                                            : Constants.white,
                                        boxShadow: [
                                          BoxShadow(
                                              color: Colors.grey.withOpacity(0.3),
                                              blurRadius: 1.5,
                                              spreadRadius: 1.5,
                                              offset: const Offset(1, 4))
                                        ],
                                        borderRadius: BorderRadius.circular(8),
                                        border: Border.all(color: Constants.lightGreen,width: 1)
                                    ),
                                    child: Center(
                                      child: Text(index == 0 ? selectedTap == "Deliver"?"Deliver Buy": "Buy" :selectedTap == "Deliver"?"Deliver Sell": "Sell", style:_currentTapindex == index?WhiteTitleStyle:BlackFieldStyleBold,
                                      ),
                                    ),
                                  ),
                                );
                              },
                            ),
                          )
                      ),
                      // Container(
                      //     height: 80,
                      //     decoration:  const BoxDecoration(color: Color(0xFFE7E6E6),
                      //     ),
                      //     child: ListView.builder(
                      //       itemCount: 2,
                      //       shrinkWrap: false,
                      //       scrollDirection: Axis.horizontal,
                      //       physics: const NeverScrollableScrollPhysics(),
                      //       padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 15),
                      //       itemBuilder: (context, index) {
                      //         return InkWell(
                      //           onTap: () {
                      //             setState(() {
                      //               _currentTapindex = index;
                      //               OfferFromLocationController.clear();
                      //               OfferToLocationController.clear();
                      //               _currentTapindex == 1 ?  OfferFromLocationController.text = adressLocationController.text :OfferToLocationController.text =  adressLocationController.text;
                      //             });
                      //           },
                      //           child: Padding(
                      //             padding: EdgeInsets.only(
                      //                 left: index == 0
                      //                     ? MediaQuery.of(context).size.width * 0.25
                      //                     : 0),
                      //             child: Container(
                      //               height: 60,
                      //               margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 0),
                      //               padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 5),
                      //               decoration: BoxDecoration(
                      //                   color: _currentTapindex == index
                      //                       ? Constants.primaryColor
                      //                       : Constants.white,
                      //                   boxShadow: [
                      //                     BoxShadow(
                      //                         color: Colors.grey.withOpacity(0.3),
                      //                         blurRadius: 0.5,
                      //                         spreadRadius: 0.5,
                      //                         offset: const Offset(1, 4))
                      //                   ],
                      //                   borderRadius: BorderRadius.circular(8),
                      //                   border: Border.all(color: Constants.lightGreen,width: 1)
                      //               ),
                      //               child: Center(
                      //                 child: Text(index == 0 ? "Buy" : "Sell", style:_currentTapindex == index?WhiteTitleStyle:BlackFieldStyleBold,
                      //                 ),
                      //               ),
                      //             ),
                      //           ),
                      //         );
                      //       },
                      //     )),
                      Expanded(
                          child: ListView(
                            shrinkWrap: false,
                            children: [
                              //TODO Offer CAT - SEG - SUB SEG
                              Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 15),
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: [
                                    searchCategoryController.text == "" || searchSegmentController.text == "" || searchSubSegmentController.text ==""?
                                    Flexible(
                                        child: Padding(
                                          padding:  EdgeInsets.symmetric(vertical: 8.0),
                                          child: Text("Tap Edit To Enter CATEGORY/SEGMENT/SUBSEGMENT",style:BlackSubCardTitle),
                                        ))
                                        :
                                    Container(

                                      height: 30,
                                      width:isMobile?width*0.75:tabWidth*0.75,
                                      child: SingleChildScrollView(
                                        physics: ScrollPhysics(),
                                        scrollDirection: Axis.horizontal ,
                                        child: Row (
                                          mainAxisAlignment: MainAxisAlignment.start,
                                          crossAxisAlignment: CrossAxisAlignment.center,
                                          children: [
                                            Text("${searchCategoryController.text}"+" | ",style: BlackSubTitleStyle,),
                                            Text("${searchSegmentController.text}" +" | ",style: BlackSubTitleStyle,),
                                            Text("${searchSubSegmentController.text}",style: BlackSubTitleStyle,),
                                          ],
                                        ),
                                      ),
                                    ),
                                    EditBtn((){
                                      Get.bottomSheet(
                                          elevation: 0,  shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.only(topRight: Radius.circular(20),topLeft: Radius.circular(20))
                                      ),
                                          isDismissible: true,isScrollControlled: true,
                                          StatefulBuilder(builder: (context, setModalState) {
                                            return  Container(
                                              decoration: BoxDecoration(
                                                  color:Colors.white,
                                                  borderRadius: BorderRadius.only(topRight: Radius.circular(20),topLeft: Radius.circular(20))
                                              ),
                                              child: Stack(
                                                children: [
                                                  ListView(
                                                    shrinkWrap: true,
                                                    physics: NeverScrollableScrollPhysics(),
                                                    padding: EdgeInsets.only(top:30),
                                                    children: [
                                                      InkWell(
                                                        onTap:(){
                                                          setState(() {
                                                            filterGetCategoryList.clear();
                                                          });
                                                          setModalState((){});
                                                        },
                                                        child: Container(
                                                          width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                          decoration: BoxDecoration(
                                                              color: Colors.white,
                                                              // borderRadius: BorderRadius.circular(5),
                                                              border: Border.all(color: Colors.white),
                                                              boxShadow: const [
                                                                BoxShadow(
                                                                    color: Color(0xfffD2D0D0),
                                                                    blurRadius: 2,
                                                                    spreadRadius: 2,
                                                                    offset: Offset(0,4)
                                                                )
                                                              ]),
                                                          child: Column(
                                                            children: [
                                                              const Padding(
                                                                padding: EdgeInsets.symmetric(horizontal: 15.0,vertical: 8),
                                                                child: Align(
                                                                    alignment: Alignment.topLeft,
                                                                    child: Text("Category", style: BlackTitleBoldStyle,)),
                                                              ),
                                                              Center(
                                                                child: Container(
                                                                  height: 40,
                                                                  color: Color(0x3389F6B9),
                                                                  width: ResponsiveHelper.isMobile(context)? width*0.7:tabWidth*0.7,
                                                                  margin: EdgeInsets.only(left: 15,right:15,top: 0),
                                                                  child: TextFormField(
                                                                    controller: searchCategoryController,
                                                                    decoration: InputDecoration(
                                                                      hintText: "Enter Category",
                                                                      hintStyle: greyHintStyle,
                                                                      focusedBorder: OutlineInputBorder(
                                                                          borderSide: BorderSide(
                                                                            width: 1, color: Colors.grey,
                                                                          ),
                                                                          borderRadius: BorderRadius.circular(5)
                                                                      ),
                                                                      enabledBorder: OutlineInputBorder(
                                                                          borderSide: BorderSide(
                                                                            width: 1,
                                                                            color:  Colors.grey,
                                                                          ),
                                                                          borderRadius: BorderRadius.circular(5)
                                                                      ),
                                                                      floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                      suffixIcon: filterGetCategoryList.isEmpty && showOther==true?
                                                                      InkWell(
                                                                          onTap:(){
                                                                            setState((){
                                                                              isloadNewCategory= true;
                                                                            });setModalState((){});
                                                                            var data ={"name":searchCategoryController.text.toString()};
                                                                            DrawAuraAPi().createCategoryApi(
                                                                                data: data).then((value) {
                                                                              if (value["status"] == 200) {
                                                                                setState((){
                                                                                  searchCategoryId = value["result"]["id"].toString();
                                                                                });setModalState((){});
                                                                                Fluttertoast.showToast(
                                                                                    msg: value["message"],
                                                                                    toastLength: Toast.LENGTH_SHORT,
                                                                                    gravity: ToastGravity.BOTTOM,
                                                                                    timeInSecForIosWeb: 2,
                                                                                    backgroundColor: Constants.primaryColor1,
                                                                                    textColor: Colors.white,
                                                                                    fontSize: 18.0
                                                                                );
                                                                                setState(() {
                                                                                  isloadNewCategory = false;
                                                                                  showOther =false;
                                                                                });setModalState((){});
                                                                                DrawAuraAPi.getCategoryListApi().then((value) {
                                                                                  setState((){
                                                                                    GetCategoryList.clear();
                                                                                    GetCategoryList = value.result!;
                                                                                  });setModalState((){});
                                                                                });
                                                                              } else {
                                                                                Fluttertoast.showToast(
                                                                                    msg: value["message"],
                                                                                    toastLength: Toast.LENGTH_SHORT,
                                                                                    gravity: ToastGravity.BOTTOM,
                                                                                    timeInSecForIosWeb: 2,
                                                                                    backgroundColor: Constants.primaryColor1,
                                                                                    textColor: Colors.white,
                                                                                    fontSize: 18.0
                                                                                );
                                                                                setState(() {
                                                                                  isloadNewCategory = false;
                                                                                  showOther =false;
                                                                                });setModalState((){});
                                                                              }
                                                                            },);
                                                                          },
                                                                          child: Container(height: 30,width: 50,
                                                                              decoration: BoxDecoration(
                                                                                  borderRadius: BorderRadius.circular(5),
                                                                                  color:Constants.primaryColor1
                                                                              ),
                                                                              child:Center(child:isloadNewCategory==false?Text("Other",style: WhiteHeadingStyle,):SizedBox(height: 15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2,)))
                                                                          )):SizedBox(),
                                                                      contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                      border: const OutlineInputBorder(),
                                                                      // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                    ),
                                                                    onChanged: (String value) async {
                                                                      _searchFilter(value,setModalState);
                                                                    },
                                                                    style: Black87HintStyle,
                                                                  ),
                                                                ),
                                                              ),
                                                              (filterGetCategoryList.isEmpty) ? SizedBox()
                                                                  :Container(
                                                                width: ResponsiveHelper.isMobile(context)? width*0.7:tabWidth*0.7,
                                                                margin: EdgeInsets.only(left: 15,right:15,top: 0),
                                                                height:filterGetCategoryList.length > 4? ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3:null,
                                                                child: Card(
                                                                  elevation: 2,
                                                                  color: Colors.white,
                                                                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),
                                                                  child: CupertinoScrollbar(
                                                                    child: ListView.builder(
                                                                      itemCount:filterGetCategoryList.length,
                                                                      shrinkWrap: true,
                                                                      physics: ClampingScrollPhysics(),
                                                                      padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),
                                                                      itemBuilder: (context, index) {
                                                                        var data = filterGetCategoryList[index];
                                                                        return  Padding(
                                                                          padding: const EdgeInsets.symmetric(horizontal: 5.0,vertical: 5),
                                                                          child: InkWell(
                                                                              onTap: (){
                                                                                setState(() {
                                                                                  searchCategoryController.text = data.name.toString() ;
                                                                                  searchCategoryId = data.id.toString();
                                                                                  filterGetCategoryList.clear();
                                                                                  segmentLoader=true;
                                                                                  selectedCategoryIndex = index;
                                                                                });setModalState((){});
                                                                                DrawAuraAPi.getSegmentListApi(catId: data.id.toString()).then((value) {
                                                                                  setState(() {
                                                                                    getSegmentList=value.result!;
                                                                                    segmentLoader=false;
                                                                                  });setModalState((){});
                                                                                });

                                                                              },
                                                                              child: Text("${data.name.toString()}",style: Black87HintStyle,overflow: TextOverflow.ellipsis)),
                                                                        );
                                                                      },),
                                                                  ),
                                                                ),
                                                              ),
                                                              const SizedBox(
                                                                height: 5,
                                                              ),
                                                              const Padding(
                                                                padding: EdgeInsets.only(left: 15, bottom: 5),
                                                                child: Align(
                                                                    alignment: Alignment.bottomLeft,
                                                                    child: Text(
                                                                      "Products and Services (Specific category by name)",
                                                                      style: BlackSubCardTitle,
                                                                    )),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ),
                                                      InkWell(
                                                        onTap:(){
                                                          setState(() {
                                                            filterGetSegmentList.clear();
                                                          });setModalState((){});
                                                        },
                                                        child: Container(
                                                          width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                          margin: const EdgeInsets.only(bottom: 5),
                                                          decoration: const BoxDecoration(
                                                            color: Color(0xFFE7E6E6),
                                                          ),
                                                          child: Column(
                                                            children: [
                                                              const Padding(
                                                                padding: EdgeInsets.symmetric(horizontal: 15.0,vertical: 8),
                                                                child: Align(
                                                                    alignment: Alignment.topLeft,
                                                                    child: Text(
                                                                      "Segment",
                                                                      style: BlackTitleBoldStyle,
                                                                    )),
                                                              ),
                                                              Center(
                                                                child: Container(
                                                                  height: 40,
                                                                  color: Color(0x3389F6B9),
                                                                  width: ResponsiveHelper.isMobile(context)? width*0.7:tabWidth*0.7,
                                                                  margin: EdgeInsets.only(left: 15,right:15,top: 0),
                                                                  child: TextFormField(
                                                                    readOnly: searchCategoryController.text.isEmpty?true:false,
                                                                    controller: searchSegmentController,
                                                                    decoration: InputDecoration(
                                                                      hintText: "Enter Segment",
                                                                      hintStyle: greyHintStyle,
                                                                      focusedBorder: OutlineInputBorder(
                                                                          borderSide: BorderSide(
                                                                            width: 1, color: Colors.grey,
                                                                          ),
                                                                          borderRadius: BorderRadius.circular(5)
                                                                      ),
                                                                      enabledBorder: OutlineInputBorder(
                                                                          borderSide: BorderSide(
                                                                            width: 1,
                                                                            color:  Colors.grey,
                                                                          ),
                                                                          borderRadius: BorderRadius.circular(5)
                                                                      ),
                                                                      floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                      suffixIcon: filterGetSegmentList.isEmpty && showOtherSegment==true?
                                                                      InkWell(
                                                                          onTap:(){
                                                                            setState((){
                                                                              isloadNewSegment= true;
                                                                            });setModalState((){});
                                                                            var data = {
                                                                              "name": searchSegmentController.text,
                                                                              "category": searchCategoryId.toString(),
                                                                            };
                                                                            print(data);
                                                                            DrawAuraAPi().createSegmentApi(data: data).then((value) {
                                                                              if (value["status"] == 200) {
                                                                                setState((){
                                                                                  searchSegmentId = value["result"]["id"].toString();
                                                                                });setModalState((){});
                                                                                Fluttertoast.showToast(
                                                                                    msg: value["message"],
                                                                                    toastLength: Toast.LENGTH_SHORT,
                                                                                    gravity: ToastGravity.BOTTOM,
                                                                                    timeInSecForIosWeb: 2,
                                                                                    backgroundColor: Constants.primaryColor1,
                                                                                    textColor: Colors.white,
                                                                                    fontSize: 18.0
                                                                                );
                                                                                setState(() {
                                                                                  selectedSegmentIndex = -2;
                                                                                  isloadNewSegment = false;
                                                                                  showOtherSegment = false;
                                                                                });setModalState((){});
                                                                                DrawAuraAPi.getSegmentListApi(catId: selectedCategoryIndex == -2?GetCategoryList.last.id.toString():GetCategoryList[selectedCategoryIndex].id.toString()).then((value) {
                                                                                  setState(() {
                                                                                    getSegmentList.clear();
                                                                                    getSegmentList=value.result!;
                                                                                  });setModalState((){});
                                                                                });

                                                                              } else {
                                                                                Fluttertoast.showToast(
                                                                                    msg: value["message"],
                                                                                    toastLength: Toast.LENGTH_SHORT,
                                                                                    gravity: ToastGravity.BOTTOM,
                                                                                    timeInSecForIosWeb: 2,
                                                                                    backgroundColor: Constants.primaryColor1,
                                                                                    textColor: Colors.white,
                                                                                    fontSize: 18.0
                                                                                );
                                                                                setState(() {
                                                                                  isloadNewSegment = false;
                                                                                  showOtherSegment =false;
                                                                                });setModalState((){});
                                                                              }
                                                                            },);
                                                                          },
                                                                          child: Container(height: 30,width: 50,
                                                                              decoration: BoxDecoration(
                                                                                  borderRadius: BorderRadius.circular(5),
                                                                                  color:Constants.primaryColor1
                                                                              ),
                                                                              child:Center(child:isloadNewSegment==false?Text("Other",style: WhiteHeadingStyle,):SizedBox(height: 15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2,)))
                                                                          )):SizedBox(),
                                                                      contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                      border: const OutlineInputBorder(),
                                                                      // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                    ),
                                                                    onChanged: (String value) async {
                                                                      _searchFilterSegment(value,setModalState);
                                                                    },
                                                                    style: Black87HintStyle,
                                                                  ),
                                                                ),
                                                              ),
                                                              (filterGetSegmentList.isEmpty) ? SizedBox()
                                                                  :Container(
                                                                width: ResponsiveHelper.isMobile(context)? width*0.7:tabWidth*0.7,
                                                                margin: EdgeInsets.only(left: 15,right:15,top: 0),
                                                                height:filterGetSegmentList.length > 4? ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3:null,
                                                                child: Card(
                                                                  elevation: 2,
                                                                  color: Colors.white,
                                                                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),
                                                                  child: CupertinoScrollbar(
                                                                    child: ListView.builder(
                                                                      itemCount:filterGetSegmentList.length,
                                                                      shrinkWrap: true,
                                                                      physics: ClampingScrollPhysics(),
                                                                      padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),
                                                                      itemBuilder: (context, index) {
                                                                        var data = filterGetSegmentList[index];
                                                                        return  Padding(
                                                                          padding: const EdgeInsets.symmetric(horizontal: 5.0,vertical: 5),
                                                                          child: InkWell(
                                                                              onTap: (){
                                                                                setState(() {
                                                                                  searchSegmentId = data.id.toString();
                                                                                  searchSegmentController.text = data.name.toString() ;
                                                                                  filterGetSegmentList.clear();
                                                                                  segmentLoader=true;
                                                                                  selectedSegmentIndex = index;
                                                                                });setModalState((){});
                                                                                DrawAuraAPi().getSubSegmentListApi(segId: data.id.toString()).then((value) {
                                                                                  setState(() {
                                                                                    getSubSegmentList=value.result!;
                                                                                    segmentLoader=false;
                                                                                  });setModalState((){});
                                                                                });

                                                                              },
                                                                              child: Text("${data.name.toString()}",style: Black87HintStyle,overflow: TextOverflow.ellipsis)),
                                                                        );
                                                                      },),
                                                                  ),
                                                                ),
                                                              ),
                                                              const SizedBox(height: 5,),
                                                              const Padding(
                                                                padding: EdgeInsets.only(left: 15, bottom: 5),
                                                                child: Align(
                                                                    alignment: Alignment.bottomLeft,
                                                                    child: Text(
                                                                      "Segments under the category chosen",
                                                                      style: BlackSubCardTitle,
                                                                    )),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ),
                                                      InkWell(
                                                        onTap:(){
                                                          setState(() {
                                                            filterGetSubSegmentList.clear();
                                                          });setModalState((){});
                                                        },
                                                        child: Container(
                                                          width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                          decoration: BoxDecoration(
                                                            color: Colors.white,
                                                            border: Border.all(color: Colors.white),
                                                          ),
                                                          child: Column(
                                                            children: [
                                                              const Padding(
                                                                padding: EdgeInsets.symmetric(horizontal: 15.0,vertical: 8),
                                                                child: Align(
                                                                    alignment: Alignment.topLeft,
                                                                    child: Text(
                                                                      "Sub-Segment",
                                                                      style: BlackTitleBoldStyle,
                                                                    )),
                                                              ),
                                                              Center(
                                                                child: Container(
                                                                  height: 40,
                                                                  color: Color(0x3389F6B9),
                                                                  width: ResponsiveHelper.isMobile(context)? width*0.7:tabWidth*0.7,
                                                                  margin: EdgeInsets.only(left: 15,right:15,top: 0),
                                                                  child: TextFormField(
                                                                    readOnly: searchSegmentController.text.isEmpty?true:false,
                                                                    controller: searchSubSegmentController,
                                                                    decoration: InputDecoration(
                                                                      hintText: "Enter Sub Segment",
                                                                      hintStyle: greyHintStyle,
                                                                      focusedBorder: OutlineInputBorder(
                                                                          borderSide: BorderSide(
                                                                            width: 1, color: Colors.grey,
                                                                          ),
                                                                          borderRadius: BorderRadius.circular(5)
                                                                      ),
                                                                      enabledBorder: OutlineInputBorder(
                                                                          borderSide: BorderSide(
                                                                            width: 1,
                                                                            color:  Colors.grey,
                                                                          ),
                                                                          borderRadius: BorderRadius.circular(5)
                                                                      ),
                                                                      floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                      suffixIcon: filterGetSubSegmentList.isEmpty && showOtherSubSegment==true?
                                                                      InkWell(
                                                                          onTap:(){
                                                                            print("OtherSubSegment");
                                                                            setState((){
                                                                              isloadNewSubSegment= true;
                                                                            });setModalState((){});
                                                                            var data = {
                                                                              "segment": searchSegmentId.toString(),
                                                                              "name": searchSubSegmentController.text,
                                                                            };

                                                                            DrawAuraAPi().createSubSegmentApi(data: data).then((value) {

                                                                              if (value["status"] == 200) {
                                                                                setState((){
                                                                                  searchSubSegmentId = value["result"]["id"].toString();
                                                                                });setModalState((){});
                                                                                Fluttertoast.showToast(
                                                                                    msg: value["message"],
                                                                                    toastLength: Toast.LENGTH_SHORT,
                                                                                    gravity: ToastGravity.BOTTOM,
                                                                                    timeInSecForIosWeb: 2,
                                                                                    backgroundColor: Constants.primaryColor1,
                                                                                    textColor: Colors.white,
                                                                                    fontSize: 18.0
                                                                                );
                                                                                setState(() {
                                                                                  isloadNewSubSegment = false;
                                                                                  showOtherSubSegment = false;
                                                                                });setModalState((){});
                                                                                // drawauraApi().getCategoryListApi().then((value) {
                                                                                //   setState((){
                                                                                //     GetCategoryList.clear();
                                                                                //     GetCategoryList = value.result!;
                                                                                //   });
                                                                                // });
                                                                              } else {
                                                                                Fluttertoast.showToast(
                                                                                    msg: value["message"],
                                                                                    toastLength: Toast.LENGTH_SHORT,
                                                                                    gravity: ToastGravity.BOTTOM,
                                                                                    timeInSecForIosWeb: 2,
                                                                                    backgroundColor: Constants.primaryColor1,
                                                                                    textColor: Colors.white,
                                                                                    fontSize: 18.0
                                                                                );
                                                                                setState(() {
                                                                                  isloadNewSubSegment = false;
                                                                                  showOtherSubSegment =false;
                                                                                });setModalState((){});
                                                                              }
                                                                            },);
                                                                          },
                                                                          child: Container(height: 30,width: 50,
                                                                              decoration: BoxDecoration(
                                                                                  borderRadius: BorderRadius.circular(5),
                                                                                  color:Constants.primaryColor1
                                                                              ),
                                                                              child:Center(child:isloadNewSubSegment==false?Text("Other",style: WhiteHeadingStyle,):SizedBox(height: 15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2,)))
                                                                          )):SizedBox(),
                                                                      contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                      border: const OutlineInputBorder(),
                                                                      // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                    ),
                                                                    onChanged: (String value) async {
                                                                      _searchFilterSubSegment(value,setModalState);
                                                                    },
                                                                    style: Black87HintStyle,
                                                                  ),
                                                                ),
                                                              ),
                                                              (filterGetSubSegmentList.isEmpty) ? SizedBox()
                                                                  :Container(
                                                                width: ResponsiveHelper.isMobile(context)? width*0.7:tabWidth*0.7,
                                                                margin: EdgeInsets.only(left: 15,right:15,top: 0),
                                                                height:filterGetCategoryList.length > 4? ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3:null,
                                                                child: Card(
                                                                  elevation: 2,
                                                                  color: Colors.white,
                                                                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),
                                                                  child: CupertinoScrollbar(
                                                                    child: ListView.builder(
                                                                      itemCount:filterGetSubSegmentList.length,
                                                                      shrinkWrap: true,
                                                                      physics: ClampingScrollPhysics(),
                                                                      padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),
                                                                      itemBuilder: (context, index) {
                                                                        var data = filterGetSubSegmentList[index];
                                                                        return  Padding(
                                                                          padding: const EdgeInsets.symmetric(horizontal: 5.0,vertical: 5),
                                                                          child: InkWell(
                                                                              onTap: (){
                                                                                setState(() {
                                                                                  searchSubSegmentId = data.id.toString();
                                                                                  searchSubSegmentController.text = data.name.toString() ;
                                                                                  filterGetSubSegmentList.clear();
                                                                                });setModalState((){});
                                                                              },
                                                                              child: Text("${data.name.toString()}",style: Black87HintStyle,overflow: TextOverflow.ellipsis)),
                                                                        );
                                                                      },),
                                                                  ),
                                                                ),
                                                              ),
                                                              const SizedBox(
                                                                height: 5,
                                                              ),
                                                              const Padding(
                                                                padding: EdgeInsets.only(left: 15, bottom: 5),
                                                                child: Align(
                                                                    alignment: Alignment.bottomLeft,
                                                                    child: Text(
                                                                      "Sub-Segments under the Segments chosen",
                                                                      style: BlackSubCardTitle,
                                                                    )),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  Positioned(
                                                      top:10,left:0,right:0,
                                                      child:BottomSheetDivider()),
                                                  Positioned.fill(
                                                      bottom: 0,left: 0,right: 0,top: 0,
                                                      child:   segmentLoader==true ?
                                                      Container(
                                                        color: Colors.black12,

                                                        width: isMobile ?width:tabWidth,
                                                        child: const Center(
                                                            child:   SearchLoading()
                                                        ),
                                                      ) : const SizedBox())
                                                ],
                                              ),
                                            );
                                          },)
                                      );
                                    })                                    ],
                                ),
                              ),

                              //TODO Offer Condition
                                  Container(
                                color: Color(0xFFE7E6E6),
                                child: Padding(
                                  padding: const EdgeInsets.symmetric(horizontal: 15,vertical: 7),
                                  child: Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                    crossAxisAlignment: CrossAxisAlignment.center,
                                    children: [
                                      selectedPeriodicityValue == "" && selectedValuePriority == "" && OfferPeriodController.text.isEmpty &&
                                          OfferDurationController.text.isEmpty &&
                                          OfferFromLocationController.text.isEmpty &&
                                          OfferToLocationController.text.isEmpty &&
                                          OfferAtLocationController.text.isEmpty
                                          ?
                                      Flexible(
                                          child: Padding(
                                            padding:  EdgeInsets.symmetric(vertical: 8.0),
                                            child: Text("Tap Edit To Enter Offer Conditions",style:BlackSubCardTitle),
                                          ))
                                          :
                                      Container(
                                        width:isMobile?width*0.8:tabWidth*0.8,
                                        child: Row (
                                          mainAxisAlignment: MainAxisAlignment.start,
                                          crossAxisAlignment: CrossAxisAlignment.center,
                                          children: [
                                            Flexible(
                                              child: RichText(
                                                  textAlign: TextAlign.left,
                                                  text: TextSpan(style: TextStyle(height: 1.5, color: Colors.black), children: [
                                                    TextSpan(text:selectedPeriodicityValue.toString() == ""||selectedPeriodicityValue.toString() == "null"?"":  "${selectedPeriodicityValue}", style: Black45DescStyle),
                                                    // TextSpan(text: " ${selectedValuePriority}", style:Black45DescStyle),
                                                    OfferPeriodController.text.isEmpty || OfferPeriodController.text.toString() == "" || selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow" ?
                                                    TextSpan(text: "", style:Black45DescStyle): TextSpan(text: " From ", style:BlackSubTitleItalicStyle),
                                                    OfferPeriodController.text.isEmpty || OfferPeriodController.text.toString() == "" || selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow"?
                                                    TextSpan(text: "", style:Black45DescStyle):
                                                    TextSpan(text: "${OfferPeriodController.text}", style: Black45DescStyle),
                                                    OfferPeriodTimeController.text.isEmpty || OfferPeriodTimeController.text.toString() == ""  ?
                                                    TextSpan(text: "", style:Black45DescStyle): TextSpan(text: " From ", style:BlackSubTitleItalicStyle),
                                                    OfferPeriodTimeController.text.isEmpty || OfferPeriodTimeController.text.toString() == "" ?
                                                    TextSpan(text: "", style:Black45DescStyle):
                                                    TextSpan(text: "${OfferPeriodTimeController.text}", style: Black45DescStyle),

                                                    OfferDurationController.text.isEmpty || OfferDurationController.text.toString() == ""  ?
                                                    TextSpan(text: "", style:Black45DescStyle): TextSpan(text: " For ", style:BlackSubTitleItalicStyle),
                                                    OfferDurationController.text.isEmpty || OfferDurationController.text.toString() == "" ?
                                                    TextSpan(text: "", style:Black45DescStyle):
                                                    TextSpan(text: "${OfferDurationController.text}", style: Black45DescStyle),

                                                    selectedItems.isEmpty || selectedItems.contains("-1") || selectedItems.contains("0") == ""  ?
                                                    TextSpan(text: "", style:Black45DescStyle): TextSpan(text: " By ", style:BlackSubTitleItalicStyle),
                                                    selectedItems.isEmpty || selectedItems.contains("-1") || selectedItems.contains("0") == ""  ?
                                                    TextSpan(text: "", style:Black45DescStyle):
                                                    TextSpan(text: ServicePersonList.where((e) => e.id.toString() == selectedItems.first.toString()).first.displayname.toString(), style: Black45DescStyle),

                                                    selectedValuePriority.toString() == "null" || selectedValuePriority.toString() == "" ?
                                                    TextSpan(text: "", style:Black45DescStyle):
                                                    TextSpan(text: " ${selectedValuePriority}", style: Black45DescStyle),

                                                    OfferFromLocationController.text.isEmpty || OfferFromLocationController.text.toString() == "" || OfferFromLocationController.text.toString().trim() == "null" ?
                                                    TextSpan(text: "", style:Black45DescStyle): TextSpan(text: " From ", style:BlackSubTitleItalicStyle),
                                                    OfferFromLocationController.text.isEmpty || OfferFromLocationController.text.toString() == "" || OfferFromLocationController.text.toString().trim() == "null"?
                                                    TextSpan(text: "", style:Black45DescStyle):
                                                    TextSpan(text: "${OfferFromLocationController.text}", style: Black45DescStyle),


                                                    OfferToLocationController.text.isEmpty || OfferToLocationController.text.toString() == "" || OfferToLocationController.text.toString().trim() == "null" ?
                                                    TextSpan(text: "", style:Black45DescStyle): TextSpan(text: " To ", style:BlackSubTitleItalicStyle),
                                                    OfferToLocationController.text.isEmpty || OfferToLocationController.text.toString() == ""|| OfferToLocationController.text.toString().trim() == "null" ?
                                                    TextSpan(text: "", style:Black45DescStyle):
                                                    TextSpan(text: "${OfferToLocationController.text}", style: Black45DescStyle),

                                                    OfferAtLocationController.text.isEmpty || OfferAtLocationController.text.toString() == ""  || OfferAtLocationController.text.toString().trim() == "null" ?
                                                    TextSpan(text: "", style:Black45DescStyle): TextSpan(text: " At ", style:BlackSubTitleItalicStyle),
                                                    OfferAtLocationController.text.isEmpty || OfferAtLocationController.text.toString() == "" || OfferAtLocationController.text.toString().trim() == "null"?
                                                    TextSpan(text: "", style:Black45DescStyle):
                                                    TextSpan(text: "${OfferAtLocationController.text}", style: Black45DescStyle),

                                                    OfferExpiryController.text.isEmpty || OfferExpiryController.text.toString() == ""  || OfferExpiryController.text.toString().trim() == "null" ?
                                                    TextSpan(text: "", style:Black45DescStyle): TextSpan(text: " Expiry ", style:BlackSubTitleItalicStyle),
                                                    OfferExpiryController.text.isEmpty || OfferExpiryController.text.toString() == "" || OfferExpiryController.text.toString().trim() == "null"?
                                                    TextSpan(text: "", style:Black45DescStyle):
                                                    TextSpan(text: "${OfferExpiryController.text}", style: Black45DescStyle),


                                                  ])),
                                            ),

                                          ],
                                        ),
                                      ),
                                      EditBtn((){
                                        Get.bottomSheet(
                                            elevation: 0,  shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.only(topRight: Radius.circular(20),topLeft: Radius.circular(20))
                                        ),
                                            isDismissible: true,isScrollControlled: true,
                                            StatefulBuilder(builder: (context, setModalState) {
                                              return  Container(
                                                decoration: BoxDecoration(
                                                    color:Colors.white,
                                                    borderRadius: BorderRadius.only(topRight: Radius.circular(20),topLeft: Radius.circular(20))
                                                ),
                                                child: Stack(
                                                  children: [
                                                    ListView(
                                                      shrinkWrap: true,
                                                      physics: ScrollPhysics(),
                                                      padding: EdgeInsets.only(top:30),
                                                      children: [
                                                        Container(
                                                          padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 10),
                                                          decoration: BoxDecoration(
                                                            color: const Color(0xFFE7E6E6),
                                                            // borderRadius: BorderRadius.circular(5),
                                                            border: Border.all(color: Colors.white),
                                                          ),
                                                          child: Column(
                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                            children: [
                                                              const Align(
                                                                  alignment: Alignment.topLeft,
                                                                  child: Text("Offer’s Conditions",style: BlackTitleBoldStyle,)),
                                                              const SizedBox(height: 10,),
                                                              isPeriodicityVisible==true?  Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  const Padding(
                                                                    padding: EdgeInsets.only(left:0.0,bottom: 5),
                                                                    child: Text("Periodicity", style: BlackDescStyle500,),
                                                                  ),
                                                                  Stack(
                                                                    children: [
                                                                      DropdownButtonHideUnderline(
                                                                        child: DropdownButton2(
                                                                          isExpanded: true,
                                                                          items:periodicityList.map((item) => DropdownMenuItem (
                                                                            value: item,
                                                                            child: Text(item, style:  Black87HintStyle, overflow: TextOverflow.ellipsis,),
                                                                          )).toList(),
                                                                          value:selectedPeriodicityValue==""?null:selectedPeriodicityValue,
                                                                          onChanged: (newValue) {
                                                                            setState(() {
                                                                              selectedPeriodicityValue = newValue!;
                                                                              OfferPeriodController.clear();
                                                                              OfferFromDate  = DateTime.now().add(Duration(days: 60));
                                                                              OfferFromTime = DateTime.now().add(Duration(days: 1));
                                                                              OfferToDate = DateTime.now().add(Duration(days: 60));
                                                                              OfferToTime = DateTime.now().add(Duration(days: 1));
                                                                              for(var i = 0 ;i< ItemsList.length ; i++){
                                                                                ItemsList[i]["item_condition"]["periodicity"] =newValue;
                                                                              }
                                                                            });
                                                                            setModalState((){});
                                                                          },
                                                                          hint: const Text(
                                                                              "Periodicity",
                                                                              style:greyHintStyle
                                                                          ),
                                                                          iconStyleData: const IconStyleData(
                                                                            icon: Icon(Icons.keyboard_arrow_down_sharp,),
                                                                            iconSize: 10,
                                                                            iconEnabledColor: Colors.white,
                                                                            iconDisabledColor:Colors.white,
                                                                          ),
                                                                          buttonStyleData: ButtonStyleData(
                                                                              height:  35,
                                                                              width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                                              padding: const EdgeInsets.only(left: 22, right: 3),
                                                                              decoration: BoxDecoration(borderRadius: BorderRadius.circular(5),color: Colors.white),
                                                                              elevation:  0,
                                                                              overlayColor: MaterialStateProperty.all(Colors.white)
                                                                          ),
                                                                          menuItemStyleData: MenuItemStyleData(
                                                                            height: 33,
                                                                            selectedMenuItemBuilder: (context, child) {
                                                                              return     Container(
                                                                                padding: const EdgeInsets.only(left: 0, right: 0),
                                                                                width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                                                height: 30,color:Constants.primaryColor1,
                                                                                child: Row(
                                                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                                  children: [
                                                                                    child,
                                                                                    const Padding(
                                                                                      padding: EdgeInsets.only(right: 5.0),
                                                                                      child: Icon(Icons.done,color: Colors.white,size: 20,),
                                                                                    )
                                                                                  ],
                                                                                ),
                                                                              );
                                                                            },
                                                                            padding: const EdgeInsets.only(left: 8, right: 3),
                                                                          ),
                                                                          dropdownStyleData: DropdownStyleData(
                                                                            maxHeight: 200,
                                                                            padding: const EdgeInsets.only(left: 0, right: 0),
                                                                            width: ResponsiveHelper.isMobile(context)? width*0.9:tabWidth*0.9,
                                                                            decoration: BoxDecoration(
                                                                                borderRadius: BorderRadius.circular(5),
                                                                                color: Colors.white,
                                                                                border: Border.all(color:  Constants.primaryColor1,width: 1)
                                                                            ),
                                                                            elevation: 1,
                                                                            scrollbarTheme: ScrollbarThemeData(
                                                                                radius:  const Radius.circular(20),
                                                                                thickness: MaterialStateProperty.all(5.0),
                                                                                minThumbLength: 20
                                                                            ),
                                                                            offset: const Offset(0, -5),
                                                                          ),

                                                                          style: BlackFieldStyle,

                                                                        ),
                                                                      ),
                                                                      Positioned(
                                                                          bottom:1,left:2,
                                                                          child: InkWell(
                                                                            onTap:(){
                                                                              setState((){
                                                                                selectedPeriodicityValue = "";
                                                                                isPeriodicityVisible = false;
                                                                              });
                                                                              setModalState((){});
                                                                            },
                                                                            child: CircleAvatar(
                                                                              radius:8,
                                                                              backgroundColor: Color(
                                                                                  0x3389F6B9) ,
                                                                              child: Center(
                                                                                  child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                              ),
                                                                            ),
                                                                          ))
                                                                    ],
                                                                  ),

                                                                ],
                                                              ):SizedBox(),

                                                              selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow"?SizedBox():
                                                              isPeriodVisible?
                                                              Padding(
                                                                padding: EdgeInsets.only(right:0,top:2),
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [

                                                                    const Padding(
                                                                      padding: EdgeInsets.only(left:0.0,bottom: 5,top:5),
                                                                      child: Text("Period Date", style: BlackDescStyle500,),
                                                                    ),
                                                                    Stack(
                                                                      children: [
                                                                        Container(
                                                                          height: 35,
                                                                          padding:EdgeInsets.only(left:12),
                                                                          decoration: BoxDecoration(color: Colors.white,
                                                                              borderRadius: BorderRadius.circular(5)),
                                                                          width: isMobile?width:tabWidth,
                                                                          child: TextFormField(
                                                                            controller: OfferPeriodController,
                                                                            readOnly: true,
                                                                            onTap:(){
                                                                              print("Call");
                                                                              DatePickerFromTo(
                                                                                  startText: "From",
                                                                                  endText: "To",
                                                                                  doneText: "Done",
                                                                                  cancelText: "Cancel",
                                                                                  interval: 1,
                                                                                  mode: FromToDateRangePickerMode.date,
                                                                                  minimumTime: DateTime.now(),
                                                                                  maximumTime: DateTime.now().add(Duration(days: 25)),
                                                                                  initialStartTime: OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(hours: 1)):OfferFromDate,
                                                                                  initialEndTime:OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(hours: 1)):OfferToDate ,
                                                                                  use24hFormat: false,
                                                                                  onConfirm:  (start, end) {
                                                                                    if(end == "NotPick"){
                                                                                      isSinglePeriodSelect =true;


                                                                                      setState((){
                                                                                        OfferPeriodTimeController.clear();
                                                                                        OfferDurationController.clear();

                                                                                        final  STime = DateFormat('dd-MMM-yyyy').format(start);
                                                                                        OfferPeriodController.text = "From ${STime}";
                                                                                        final  SDate = DateFormat('dd-MM-yyyy').format(start);
                                                                                        offerPeriodFromTime="";
                                                                                        offerPeriodFromDate="";
                                                                                        offerPeriodToDate="";
                                                                                        offerPeriodToTime="";
                                                                                        offerPeriodFromDate = SDate.toString();
                                                                                        OfferFromDate  = start;
                                                                                        for(var i = 0 ;i< ItemsList.length ; i++){
                                                                                          ItemsList[i]["item_condition"]["period"].text = "From ${STime}";
                                                                                          ItemsList[i]["item_condition"]["fromperiod"]= SDate.toString();
                                                                                          ItemsList[i]["item_condition"]["FromPeriodDateFill"]= start;
                                                                                        }
                                                                                      });
                                                                                      setModalState((){});
                                                                                    }else{
                                                                                      setState((){
                                                                                        isSinglePeriodSelect = false;

                                                                                        int totalDays = DateTime.parse(end).difference(start).inDays;
                                                                                        int years = totalDays ~/ 365;
                                                                                        int months = (totalDays-years*365) ~/ 30;
                                                                                        int days = totalDays-years*365-months*30;
                                                                                        int doneHours = years*365*24;
                                                                                        int hours = DateTime.parse(end).difference(start).inHours  -(doneHours) -(months*30*24) - (days*24);
                                                                                        int min = (((DateTime.parse(end).difference(start).inMinutes - (years*365*24*60)) -(months*30*24*60)) - (days*24*60) )-hours*60;
                                                                                        String empty = "";

                                                                                        TempDurationDate = "${years != 0 ? '${years} Year(s)': empty} ${ months != 0 ? '${months} Month(s)': empty } ${days != 0 ?'${days} Day(s)': empty } ${ hours != 0 ?'${hours} Hour(s)': empty } ${ min != 0 ?'${min} Minute(s)': empty}";
                                                                                        OfferDurationController.text = "${years != 0 ? '${years} Year(s)': empty} ${ months != 0 ? '${months} Month(s)': empty } ${days != 0 ?'${days} Day(s)': empty } ${ hours != 0 ?'${hours} Hour(s)': empty } ${ min != 0 ?'${min} Minute(s)': empty}";
                                                                                        final  FTime = DateFormat('dd-MMM-yyyy').format(start);
                                                                                        final  ToTime = DateFormat('dd-MMM-yyyy').format(DateTime.parse(end));
                                                                                        OfferPeriodController.text = "${FTime}-${ToTime}";
                                                                                        final  SDate = DateFormat('dd-MM-yyyy').format(start);

                                                                                        offerPeriodFromDate = SDate.toString();
                                                                                        final  EDate = DateFormat('dd-MM-yyyy').format(DateTime.parse(end));
                                                                                        offerPeriodToDate = EDate.toString();
                                                                                        OfferFromDate  = start;
                                                                                        OfferToDate = DateTime.parse(end.toString());
                                                                                        for(var i = 0 ;i< ItemsList.length ; i++){
                                                                                          ItemsList[i]["item_condition"]["period"].text = "${FTime}-${ToTime}";
                                                                                          ItemsList[i]["item_condition"]["fromperiod"]= SDate.toString();
                                                                                          ItemsList[i]["item_condition"]["toperiod"] = SDate.toString();
                                                                                          ItemsList[i]["item_condition"]["FromPeriodDateFill"]= start;
                                                                                          ItemsList[i]["item_condition"]["ToPeriodDateFill"]= DateTime.parse(end);
                                                                                        }
                                                                                      });
                                                                                      setModalState((){});
                                                                                    }
                                                                                  }).showPicker(context);

                                                                              // FromToDatePicker(context,FirstDate: DateTime.now(),LastDate: DateTime.now().add(Duration(days: 365)));
                                                                            },
                                                                            keyboardType: TextInputType.text,
                                                                            decoration: InputDecoration(hintText: "Period Date", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                              focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                              enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                              floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                              contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                              border: const OutlineInputBorder(),
                                                                            ),
                                                                            style: Black87HintStyle,
                                                                          ),
                                                                        ),
                                                                        Positioned(
                                                                            bottom:1,left:2,
                                                                            child: InkWell(
                                                                              onTap:(){
                                                                                setState((){
                                                                                  OfferPeriodController.clear();
                                                                                  offerPeriodFromDate="";
                                                                                  offerPeriodToDate="";
                                                                                  isPeriodVisible = false;
                                                                                  offerDisableFields.add("DatePeriod");
                                                                                });
                                                                                setModalState((){});
                                                                              },
                                                                              child: CircleAvatar(
                                                                                radius:8,
                                                                                backgroundColor: Color(0x3389F6B9) ,
                                                                                child: Center(
                                                                                    child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                ),
                                                                              ),
                                                                            ))
                                                                      ],
                                                                    ),

                                                                  ],
                                                                ),
                                                              ):
                                                              TextForNewAdd(context,text: "Period Date",onTap: (){
                                                                setState(() {
                                                                  isPeriodVisible = true;
                                                                  offerDisableFields.remove("DatePeriod");
                                                                });
                                                                setModalState((){});
                                                              }),

                                                              isPeriodTimeVisible?    Padding(
                                                                padding: EdgeInsets.only(top:2),
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [

                                                                    const Padding(
                                                                      padding: EdgeInsets.only(left:0.0,bottom: 5,top:5),
                                                                      child: Text("Period Time", style: BlackDescStyle500,),
                                                                    ),
                                                                    Stack(
                                                                      children: [
                                                                        Container(
                                                                          height: 35,
                                                                          padding:EdgeInsets.only(left:12),
                                                                          decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(5)),
                                                                          width: isMobile?width:tabWidth,
                                                                          child: TextFormField(
                                                                            controller: OfferPeriodTimeController,
                                                                            readOnly: true,

                                                                            onTap:(){
                                                                              print("Call");
                                                                              FromToTimePicker(
                                                                                  startText: "From",
                                                                                  endText: "To",
                                                                                  doneText: "Done",
                                                                                  cancelText: "Cancel",
                                                                                  interval: 1,

                                                                                  mode: FromToTimePickerMode.time,
                                                                                  type:selectedPeriodicityValue == "Today" ?"Today":"Else",
                                                                                  initialStartTime: OfferPeriodTimeController.text.isEmpty?
                                                                                  selectedPeriodicityValue.toString().trim() == "Today" ?
                                                                                  DateTime.now().add(Duration(hours: 1)):
                                                                                  DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().toString())} 00:01:00"):
                                                                                  OfferFromTime,
                                                                                  initialEndTime: OfferPeriodTimeController.text.isEmpty?
                                                                                  selectedPeriodicityValue.toString().trim() == "Today" ?
                                                                                  DateTime.now().add(Duration(hours: 1)):
                                                                                  DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().toString())} 00:01:00"):OfferToTime,

                                                                                  use24hFormat: false,
                                                                                  onConfirm: (start, end) {
                                                                                    print(start);
                                                                                    print(end);
                                                                                    if(end == "NotPick"){

                                                                                      setState((){
                                                                                        selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow"?
                                                                                        isSinglePeriodSelect =true :null;
                                                                                        final  STime = DateFormat('hh:mm a').format(start);
                                                                                        OfferPeriodTimeController.text = "From ${STime}";
                                                                                        offerPeriodFromTime="";
                                                                                        offerPeriodToTime="";
                                                                                        final  STime24 = DateFormat('HH:mm').format(start);
                                                                                        offerPeriodFromTime = STime24.toString();
                                                                                        OfferFromTime = start;

                                                                                        for(var i = 0 ;i< ItemsList.length ; i++){
                                                                                          ItemsList[i]["item_condition"]["periodTime"].text = "From ${STime}";
                                                                                          ItemsList[i]["item_condition"]["fromperiodtime"]= STime24.toString();
                                                                                          ItemsList[i]["item_condition"]["FromPeriodTimeFill"]= start;
                                                                                        }
                                                                                      });
                                                                                      setModalState((){});
                                                                                    }else{
                                                                                      setState((){
                                                                                        selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow"?
                                                                                        isSinglePeriodSelect =false :null;
                                                                                        Duration diff = DateTime.parse(end).difference(start);
                                                                                        diff.inHours !=0?  TempDurationTime = "${diff.inHours.toString()} Hours": diff.inSeconds !=00?TempDurationTime = "${diff.inMinutes.toString()} Minutes" :TempDurationTime = "${diff.inSeconds.toString()} Seconds";
                                                                                        OfferDurationController.text.isEmpty ? OfferDurationController.text = TempDurationTime : OfferDurationController.text = "${OfferDurationController.text}${TempDurationTime}";
                                                                                        final  FTime = DateFormat('hh:mm a').format(start);
                                                                                        final  ToTime = DateFormat('hh:mm a').format(DateTime.parse(end));
                                                                                        OfferPeriodTimeController.text = "${FTime} - ${ToTime}";
                                                                                        offerPeriodFromTime="";
                                                                                        offerPeriodToTime="";
                                                                                        final  FTime24 = DateFormat('HH:mm').format(start);
                                                                                        final  ToTime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                                                                                        offerPeriodFromTime = FTime24.toString();
                                                                                        offerPeriodToTime = ToTime24.toString();
                                                                                        OfferFromTime = start;
                                                                                        OfferToTime = DateTime.parse(end);
                                                                                        for(var i = 0 ;i< ItemsList.length ; i++){
                                                                                          ItemsList[i]["item_condition"]["periodTime"].text = "${FTime} - ${ToTime}";
                                                                                          ItemsList[i]["item_condition"]["fromperiodtime"]= FTime24.toString();
                                                                                          ItemsList[i]["item_condition"]["toperiodtime"]= ToTime24.toString();
                                                                                          ItemsList[i]["item_condition"]["FromPeriodTimeFill"]= start;
                                                                                          ItemsList[i]["item_condition"]["ToPeriodTimeFIll"]= DateTime.parse(end);
                                                                                        }
                                                                                      });
                                                                                      setModalState((){});
                                                                                    }
                                                                                  }).showPicker(context);

                                                                              // FromToDatePicker(context,FirstDate: DateTime.now(),LastDate: DateTime.now().add(Duration(days: 365)));
                                                                            },
                                                                            keyboardType: TextInputType.text,
                                                                            decoration: InputDecoration(hintText: "Period Time", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                              focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                              enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                              floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                              contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                              border: const OutlineInputBorder(),
                                                                            ),
                                                                            style: Black87HintStyle,
                                                                          ),
                                                                        ),
                                                                        Positioned(
                                                                            bottom:1,left:2,
                                                                            child: InkWell(
                                                                              onTap:(){
                                                                                setState((){
                                                                                  OfferPeriodTimeController.clear();
                                                                                  offerPeriodFromTime="";
                                                                                  offerPeriodToTime="";
                                                                                  isPeriodTimeVisible = false;
                                                                                  offerDisableFields.add("DatePeriod");
                                                                                });
                                                                                setModalState((){});
                                                                              },
                                                                              child: CircleAvatar(
                                                                                radius:8,
                                                                                backgroundColor: Color(0x3389F6B9) ,
                                                                                child: Center(
                                                                                    child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                ),
                                                                              ),
                                                                            ))
                                                                      ],
                                                                    ),

                                                                  ],
                                                                ),
                                                              ): TextForNewAdd(context,text: "Period Time",onTap: (){
                                                                setState(() {
                                                                  isPeriodTimeVisible = true;
                                                                  offerDisableFields.remove("TimePeriod");
                                                                });
                                                                setModalState((){});
                                                              }),
                                                              // isPeriodVisible == true? Padding(
                                                              //   padding: EdgeInsets.only(right:10,top:2),
                                                              //   child: Column(
                                                              //     crossAxisAlignment: CrossAxisAlignment.start,
                                                              //     children: [
                                                              //       Stack(
                                                              //         children: [
                                                              //           Container(
                                                              //             height: 35,
                                                              //             padding:EdgeInsets.only(left:12),
                                                              //             decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                              //               BoxShadow(
                                                              //                   blurRadius: 2.0,
                                                              //                   color: Colors.black54,
                                                              //                   offset: Offset(0.0, 0.5) ),
                                                              //             ], borderRadius: BorderRadius.circular(5)),
                                                              //             width: ResponsiveHelper.isMobile(context)? width*0.55:tabWidth*0.55,
                                                              //             child: TextFormField(
                                                              //               controller: OfferPeriodController,
                                                              //               readOnly: true,
                                                              //               onTap:(){
                                                              //                 if(selectedPeriodicityValue == null){
                                                              //                   Constants.showToast("Please select periodicity first");
                                                              //                 }else{
                                                              //                   if(selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow"){
                                                              //                     UpdateOfferConditionTimePicker(
                                                              //                         startText: "From",
                                                              //                         endText: "To",
                                                              //                         doneText: "Done",
                                                              //                         cancelText: "Cancel",
                                                              //                         interval: 1,
                                                              //                         mode: UpdateOfferConditionTimePickerMode.time,
                                                              //                         minimumTime: DateTime.now(),
                                                              //                         type: selectedPeriodicityValue.toString(),
                                                              //                         maximumTime: DateTime.now().add(Duration(days: 25)),
                                                              //                         initialStartTime: OfferPeriodController.text.isEmpty?
                                                              //                         selectedPeriodicityValue.toString().trim() == "Tomorrow" ?
                                                              //                         DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().add(Duration(days: 1)).toString())} 00:01:00"):
                                                              //                         DateTime.now().add(Duration(hours: 1)):OfferFromTime,
                                                              //                         initialEndTime: OfferPeriodController.text.isEmpty?
                                                              //                         selectedPeriodicityValue.toString().trim() == "Tomorrow" ?
                                                              //                         DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().add(Duration(days: 1)).toString())} 00:01:00"):
                                                              //                         DateTime.now().add(Duration(hours: 1)):OfferToTime,
                                                              //                         use24hFormat: false,
                                                              //                         onConfirm: (start, end) {
                                                              //
                                                              //                           if(end == "NotPick"){
                                                              //                             setState((){
                                                              //                               OfferDurationController.clear();
                                                              //                               isSinglePeriodSelect =true;
                                                              //                               final  STime = DateFormat('hh:mm a').format(start);
                                                              //                               OfferPeriodController.text = "From ${STime}";
                                                              //                               offerPeriodFromTime="";
                                                              //                               offerPeriodFromDate="";
                                                              //                               offerPeriodToDate="";
                                                              //                               offerPeriodToTime="";
                                                              //                               final  STime24 = DateFormat('HH:mm').format(start);
                                                              //                               offerPeriodFromTime = STime24.toString();
                                                              //                               for(var i = 0 ;i< ItemsList.length ; i++){
                                                              //                                 ItemsList[i]["item_condition"]["period"].text = "From ${STime}";
                                                              //                                 ItemsList[i]["item_condition"]["fromperiodtime"]= STime24.toString();
                                                              //                                 OfferFromTime = start;
                                                              //                                 ItemsList[i]["item_condition"]["FromPeriodTimeFill"]= start;
                                                              //                               }
                                                              //                             });
                                                              //
                                                              //                           }else{
                                                              //                             setState((){
                                                              //                               isSinglePeriodSelect =false;
                                                              //                               Duration diff = DateTime.parse(end).difference(start);
                                                              //                               diff.inHours !=0?  OfferDurationController.text = "${diff.inHours.toString()} Hours": diff.inSeconds !=00?OfferDurationController.text = "${diff.inMinutes.toString()} Minutes" :OfferDurationController.text = "${diff.inSeconds.toString()} Seconds";
                                                              //                               final  FTime = DateFormat('hh:mm a').format(start);
                                                              //                               final  ToTime = DateFormat('hh:mm a').format(DateTime.parse(end));
                                                              //                               OfferPeriodController.text = "${FTime} - ${ToTime}";
                                                              //                               offerPeriodFromTime="";
                                                              //                               offerPeriodFromDate="";
                                                              //                               offerPeriodToDate="";
                                                              //                               offerPeriodToTime="";
                                                              //                               final  FTime24 = DateFormat('HH:mm').format(start);
                                                              //                               final  ToTime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                                                              //                               offerPeriodFromTime = FTime24.toString();
                                                              //                               offerPeriodToTime = ToTime24.toString();
                                                              //                               for(var i = 0 ;i< ItemsList.length ; i++){
                                                              //                                 ItemsList[i]["item_condition"]["period"].text = "${FTime} - ${ToTime}";
                                                              //                                 ItemsList[i]["item_condition"]["fromperiodtime"]= FTime24.toString();
                                                              //                                 ItemsList[i]["item_condition"]["toperiodtime"]= ToTime24.toString();
                                                              //
                                                              //                                 ItemsList[i]["item_condition"]["FromPeriodTimeFill"]= start;
                                                              //                                 ItemsList[i]["item_condition"]["ToPeriodTimeFIll"]= DateTime.parse(end);
                                                              //                                 OfferFromTime = start;
                                                              //                                 OfferToTime = DateTime.parse(end);
                                                              //
                                                              //                               }
                                                              //                             });
                                                              //                           }
                                                              //                         }).showPicker(context);
                                                              //                   }
                                                              //                   else{
                                                              //                     DateTimeRangePickerUpdateOffer(
                                                              //                         startText: "From",
                                                              //                         endText: "To",
                                                              //                         doneText: "Done",
                                                              //                         cancelText: "Cancel",
                                                              //                         interval: 1,
                                                              //                         mode: DateTimeRangePickerModeUpdateOffer.dateAndTime,
                                                              //                         minimumTime:OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(minutes: 30)):OfferFromDate.subtract(Duration(hours: 1)),
                                                              //                         maximumTime: DateTime.now().add(Duration(days: 25)),
                                                              //                         initialStartTime: OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(hours: 1)):OfferFromDate,
                                                              //                         initialEndTime:OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(hours: 1)):OfferToDate ,
                                                              //                         use24hFormat: false,
                                                              //                         onConfirm: (start, end) {
                                                              //                           if(end == "NotPick"){
                                                              //                             setState((){
                                                              //                               OfferDurationController.clear();
                                                              //                               isSinglePeriodSelect =true;
                                                              //                               final  STime = DateFormat('dd-MMM-yyyy hh:mm a').format(start);
                                                              //                               OfferPeriodController.text = "From ${STime}";
                                                              //                               final  SDate = DateFormat('dd-MM-yyyy').format(start);
                                                              //                               final  STime24 = DateFormat('HH:mm').format(start);
                                                              //                               offerPeriodFromTime="";
                                                              //                               offerPeriodFromDate="";
                                                              //                               offerPeriodToDate="";
                                                              //                               offerPeriodToTime="";
                                                              //                               offerPeriodFromTime = STime24.toString();
                                                              //                               offerPeriodFromDate = SDate.toString();
                                                              //                               for(var i = 0 ;i< ItemsList.length ; i++){
                                                              //                                 ItemsList[i]["item_condition"]["period"].text = "From ${STime}";
                                                              //                                 ItemsList[i]["item_condition"]["fromperiod"]=SDate.toString();
                                                              //                                 ItemsList[i]["item_condition"]["fromperiodtime"]= STime24.toString();
                                                              //                                 OfferFromDate = start;
                                                              //
                                                              //                                 ItemsList[i]["item_condition"]["FromPeriodDateFill"]= start;
                                                              //                               }
                                                              //                             });
                                                              //                           }else{
                                                              //                             setState((){
                                                              //                               isSinglePeriodSelect = false;
                                                              //                               print(end);
                                                              //                               print(start);
                                                              //                               int totalDays = DateTime.parse(end).difference(start).inDays;
                                                              //                               int years = totalDays ~/ 365;
                                                              //                               int months = (totalDays-years*365) ~/ 30;
                                                              //                               int days = totalDays-years*365-months*30;
                                                              //                               int doneHours = years*365*24;
                                                              //                               int hours = DateTime.parse(end).difference(start).inHours  -(doneHours) -(months*30*24) - (days*24);
                                                              //                               int min = (((DateTime.parse(end).difference(start).inMinutes - (years*365*24*60)) -(months*30*24*60)) - (days*24*60) )-hours*60;
                                                              //                               String empty = "";
                                                              //                               print("${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minibus': empty}");
                                                              //                               OfferDurationController.text ="${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                                                              //                               final  FTime = DateFormat('dd-MMM-yyyy').format(start);
                                                              //                               final  ToTime = DateFormat('dd-MMM-yyyy').format(DateTime.parse(end));
                                                              //                               OfferPeriodController.text = "${FTime}-${ToTime}";
                                                              //                               final  SDate = DateFormat('dd-MM-yyyy').format(start);
                                                              //                               final  STime24 = DateFormat('HH:mm').format(start);
                                                              //                               offerPeriodFromTime = STime24.toString();
                                                              //                               offerPeriodFromDate = SDate.toString();
                                                              //                               final  EDate = DateFormat('dd-MM-yyyy').format(DateTime.parse(end));
                                                              //                               final  ETime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                                                              //                               offerPeriodToTime = ETime24.toString();
                                                              //                               offerPeriodToDate = EDate.toString();
                                                              //                               for(var i = 0 ;i< ItemsList.length ; i++){
                                                              //                                 ItemsList[i]["item_condition"]["period"].text = "${FTime}-${ToTime}";
                                                              //                                 ItemsList[i]["item_condition"]["fromperiod"]= SDate.toString();
                                                              //                                 ItemsList[i]["item_condition"]["fromperiodtime"]= STime24.toString();
                                                              //                                 ItemsList[i]["item_condition"]["toperiodtime"] = ETime24.toString();
                                                              //                                 ItemsList[i]["item_condition"]["toperiod"] = SDate.toString();
                                                              //
                                                              //                                 ItemsList[i]["item_condition"]["FromPeriodDateFill"]= start;
                                                              //                                 ItemsList[i]["item_condition"]["ToPeriodDateFill"]= DateTime.parse(end);
                                                              //                                 OfferFromDate = start;
                                                              //                                 OfferToDate = DateTime.parse(end);
                                                              //                               }
                                                              //                             });
                                                              //                           }
                                                              //                         }).showPicker(context);
                                                              //                   }
                                                              //                 }
                                                              //               },
                                                              //               keyboardType: TextInputType.text,
                                                              //               decoration: InputDecoration(hintText: "Period", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                              //                 focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                              //                 enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                              //                 floatingLabelBehavior: FloatingLabelBehavior.never,
                                                              //                 contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                              //                 border: const OutlineInputBorder(),
                                                              //               ),
                                                              //               style: Black87HintStyle,
                                                              //             ),
                                                              //           ),
                                                              //           Positioned(
                                                              //               bottom:1,left:2,
                                                              //               child: InkWell(
                                                              //                 onTap:(){
                                                              //                   setState((){
                                                              //                     OfferPeriodController.clear();
                                                              //                     offerPeriodFromTime="";
                                                              //                     offerPeriodFromDate="";
                                                              //                     offerPeriodToDate="";
                                                              //                     offerPeriodToTime="";
                                                              //                     OfferFromDate  = DateTime.now().add(Duration(days: 60));
                                                              //                     OfferFromTime = DateTime.now().add(Duration(days: 1));
                                                              //                     OfferToDate = DateTime.now().add(Duration(days: 60));
                                                              //                     OfferToTime = DateTime.now().add(Duration(days: 1));
                                                              //                     isPeriodVisible = false;
                                                              //                   });
                                                              //                 },
                                                              //                 child: CircleAvatar(
                                                              //                   radius:8,
                                                              //                   backgroundColor: Color(
                                                              //                       0x3389F6B9) ,
                                                              //                   child: Center(
                                                              //                       child:Icon(Icons.close,color: Colors.black,size:14,)
                                                              //                   ),
                                                              //                 ),
                                                              //               ))
                                                              //         ],
                                                              //       ),
                                                              //       const SizedBox(height:5),
                                                              //       const Padding(
                                                              //         padding: EdgeInsets.only(left:8.0),
                                                              //         child: Text("Period", style: BlackDescStyle,),
                                                              //       ),
                                                              //     ],
                                                              //   ),
                                                              // ):SizedBox(),

                                                              isDurationVisible==true?   Padding(
                                                                padding: EdgeInsets.only(top:2),
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [

                                                                    const Padding(
                                                                      padding: EdgeInsets.only(left:0.0,bottom: 5,top:5),
                                                                      child: Text("Duration(YY:MM:DD:HH:MI)", style: BlackDescStyle500,),
                                                                    ),
                                                                    Stack(
                                                                      children: [
                                                                        Container(
                                                                          height: 35,
                                                                          padding:EdgeInsets.only(left:12),
                                                                          decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(5)),
                                                                          width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                                          child: TextFormField(
                                                                            inputFormatters: [maskFormatter],
                                                                            controller: OfferDurationController,
                                                                            keyboardType: TextInputType.number,
                                                                            onTap:(){
                                                                              if(isSinglePeriodSelect==true){
                                                                                showDurationPickerNew(context,setState,
                                                                                    setModalState,OfferDurationController);
                                                                              }else{

                                                                              }
                                                                            },
                                                                            readOnly: true,
                                                                            // onFieldSubmitted: (value){
                                                                            //   print(value);
                                                                            //   String empty = "";
                                                                            //   int years =  value!.length < 2 ?int.parse(value) :int.parse(value.split(":").first);
                                                                            //   int months =  value.length > 3 ?int.parse(value.split(":")[1]):0;
                                                                            //   int days =  value.length > 5 ?int.parse(value.split(":")[2]):0;
                                                                            //   int hours =  value.length > 7 ?int.parse(value.split(":")[3]):0;
                                                                            //   int min =  value.length > 9 ?int.parse(value.split(":")[4]):0;
                                                                            //   setState(() {
                                                                            //     OfferDurationController.text ="${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                                                                            //   });
                                                                            //   print(OfferDurationController.text);
                                                                            // },
                                                                            // readOnly: isSinglePeriodSelect==true?false:true,
                                                                            decoration: InputDecoration(hintText: "YY : MM : DD : HH : MI", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                              focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                              enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                              floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                              contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                              border: const OutlineInputBorder(),
                                                                              // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                            ),

                                                                            style: Black87HintStyle,
                                                                          ),
                                                                        ),
                                                                        Positioned(
                                                                            bottom:1,left:2,
                                                                            child: InkWell(
                                                                              onTap:(){
                                                                                setState((){
                                                                                  OfferDurationController.clear();
                                                                                  isDurationVisible = false;
                                                                                });
                                                                                setModalState((){});
                                                                              },
                                                                              child: CircleAvatar(
                                                                                radius:8,
                                                                                backgroundColor: Color(
                                                                                    0x3389F6B9) ,
                                                                                child: Center(
                                                                                    child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                ),
                                                                              ),
                                                                            ))
                                                                      ],
                                                                    ),

                                                                  ],
                                                                ),
                                                              ):SizedBox(),

                                                              Column(
                                                                mainAxisAlignment: MainAxisAlignment.start,
                                                                crossAxisAlignment:CrossAxisAlignment.start,
                                                                children: [

                                                                  const Padding(
                                                                    padding: EdgeInsets.only(left:0.0,bottom: 5,top:5),
                                                                    child: Text("Service/Delivery person", style: BlackDescStyle500,),
                                                                  ),
                                                                  Container(
                                                                    height:38,
                                                                    decoration:BoxDecoration(
                                                                      color:Colors.transparent,

                                                                    ),

                                                                    width: MediaQuery.sizeOf(context).width,
                                                                    child: Padding(
                                                                      padding: const EdgeInsets.all(0.0),
                                                                      child: CustomSearchableDropDownForUs(
                                                                        initialValue:  selectedItems ,
                                                                        items: ServicePersonList,
                                                                        menuHeight: 30.0,
                                                                        label: 'Select Service/Delivery person',
                                                                        multiSelectTag: 'Names',
                                                                        multiSelectValuesAsWidget: true,
                                                                        decoration: BoxDecoration(
                                                                          color: Colors.white,
                                                                          borderRadius: BorderRadius.circular(5),
                                                                        ),
                                                                        multiSelect: true,
                                                                        dropDownMenuItems: ServicePersonList.map((item) {
                                                                          return item.displayname;
                                                                        }).toList() ?? [],
                                                                        onChanged: (value){
                                                                          print(value);
                                                                          if(value!=null)
                                                                          {
                                                                            setState(() {
                                                                              selectedItems =   jsonDecode(value).map((e) =>e["id"] ).toList();
                                                                            });
                                                                            setModalState((){});
                                                                          }
                                                                          else{
                                                                            //selectedItems!.clear();
                                                                          }
                                                                        },
                                                                      ),
                                                                    ),
                                                                  ),

                                                                ],
                                                              ),
                                                              isPriorityVisible==true?    Padding(
                                                                padding: EdgeInsets.only(top:2),
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [

                                                                    const Padding(
                                                                      padding: EdgeInsets.only(left:0.0,bottom: 5,top:5),
                                                                      child: Text("Priority", style: BlackDescStyle500,),
                                                                    ),
                                                                    Stack(
                                                                      children: [
                                                                        DropdownButtonHideUnderline(
                                                                          child: DropdownButton2(
                                                                              isExpanded: true,
                                                                              items:priority.map((item) => DropdownMenuItem (
                                                                                value: item,
                                                                                child: Text(item, style: BlackSubHeadingStyle,overflow: TextOverflow.ellipsis,),
                                                                              )).toList(),
                                                                              value: selectedValuePriority==""?null:selectedValuePriority,
                                                                              onChanged: (newValue) {
                                                                                setState(() {
                                                                                  selectedValuePriority = newValue!;
                                                                                });
                                                                                setModalState((){});
                                                                              },
                                                                              hint: const Text(
                                                                                  "Priority",
                                                                                  style:greyHintStyle
                                                                              ),
                                                                              iconStyleData: const IconStyleData(
                                                                                icon: Icon(Icons.keyboard_arrow_down_sharp,),
                                                                                iconSize: 10,
                                                                                iconEnabledColor: Colors.white,
                                                                                iconDisabledColor:Colors.white,
                                                                              ),
                                                                              buttonStyleData: ButtonStyleData(
                                                                                  height:  35,
                                                                                  width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                                                  padding: const EdgeInsets.only(left: 20, right: 3),
                                                                                  decoration: BoxDecoration(borderRadius: BorderRadius.circular(5),color: Colors.white),
                                                                                  elevation:  0,
                                                                                  overlayColor: MaterialStateProperty.all(Colors.white)
                                                                              ),
                                                                              menuItemStyleData: MenuItemStyleData(
                                                                                height: 33,
                                                                                selectedMenuItemBuilder: (context, child) {
                                                                                  return     Container(
                                                                                    padding: const EdgeInsets.only(left: 0, right: 0),
                                                                                    width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                                                    height: 30,color:Constants.primaryColor1,
                                                                                    child: Row(
                                                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                                      children: [
                                                                                        child,
                                                                                        const Padding(
                                                                                          padding: EdgeInsets.only(right: 5.0),
                                                                                          child: Icon(Icons.done,color: Colors.white,size: 20,),
                                                                                        )
                                                                                      ],
                                                                                    ),
                                                                                  );
                                                                                },
                                                                                padding: const EdgeInsets.only(left: 8, right: 3),
                                                                              ),
                                                                              dropdownStyleData: DropdownStyleData(
                                                                                maxHeight: 200,
                                                                                padding: const EdgeInsets.only(left: 0, right: 0),
                                                                                width: ResponsiveHelper.isMobile(context)? width*0.9:tabWidth*0.9,
                                                                                decoration: BoxDecoration(
                                                                                    borderRadius: BorderRadius.circular(5),
                                                                                    color: Colors.white,
                                                                                    border: Border.all(color:  Constants.primaryColor1,width: 1)
                                                                                ),
                                                                                elevation: 0,
                                                                                scrollbarTheme: ScrollbarThemeData(
                                                                                    radius:  const Radius.circular(20),
                                                                                    thickness: MaterialStateProperty.all(5.0),
                                                                                    minThumbLength: 20
                                                                                ),
                                                                                offset: const Offset(0, -5),
                                                                              ),

                                                                              style: BlackFieldStyle

                                                                          ),
                                                                        ),
                                                                        Positioned(
                                                                            bottom:1,left:2,
                                                                            child: InkWell(
                                                                              onTap:(){
                                                                                setState((){
                                                                                  selectedValuePriority = "";
                                                                                  isPriorityVisible = false;
                                                                                });
                                                                                setModalState((){});
                                                                              },
                                                                              child: CircleAvatar(
                                                                                radius:8,
                                                                                backgroundColor: Color(0x3389F6B9) ,
                                                                                child: Center(
                                                                                    child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                ),
                                                                              ),
                                                                            )),
                                                                      ],
                                                                    ),

                                                                  ],
                                                                ),
                                                              ):SizedBox(),
                                                              isExpiryVisible == true? Padding(
                                                                padding: EdgeInsets.only(top:2),
                                                                child: Column(
                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                  children: [

                                                                    const Padding(
                                                                      padding: EdgeInsets.only(left:0.0,bottom: 5,top:5),
                                                                      child: Text("Expiry", style: BlackDescStyle500,),
                                                                    ),
                                                                    Stack(
                                                                      children: [
                                                                        Container(
                                                                          height: 35,
                                                                          padding: EdgeInsets.only(left:12),
                                                                          decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(5)),
                                                                          width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                                          child: TextFormField(
                                                                            onTap:(){
                                                                              showGeneralDialog(

                                                                                  barrierColor: Colors.black.withOpacity(0.5),
                                                                                  transitionBuilder: (context, a1, a2, widget) {
                                                                                    return Transform.scale(
                                                                                      scale: a1.value,
                                                                                      child: Opacity(
                                                                                          opacity: a1.value,
                                                                                          child: Dialog(
                                                                                              clipBehavior: Clip.hardEdge,
                                                                                              shape: RoundedRectangleBorder(
                                                                                                borderRadius: BorderRadius.circular(15),
                                                                                              ),
                                                                                              insetPadding: const EdgeInsets.symmetric(horizontal: 25),
                                                                                              backgroundColor: Colors.white,
                                                                                              child:SizedBox(
                                                                                                height: ResponsiveHelper.isMobile(context)?height*0.3:tabWidth*0.45,
                                                                                                width: ResponsiveHelper.isMobile(context)?null:tabWidth*0.9,
                                                                                                child:  Column(
                                                                                                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                  children: [
                                                                                                    Flexible(
                                                                                                      child: Padding(
                                                                                                          padding: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 10.0),
                                                                                                          child: CupertinoTheme(
                                                                                                            data: CupertinoThemeData(
                                                                                                              textTheme: CupertinoTextThemeData(
                                                                                                                  dateTimePickerTextStyle: BlackBottomHeadStyle18500
                                                                                                              ),
                                                                                                            ),
                                                                                                            child: CupertinoDatePicker(
                                                                                                              mode: CupertinoDatePickerMode.dateAndTime,
                                                                                                              dateOrder: DatePickerDateOrder.dmy,
                                                                                                              use24hFormat: false,
                                                                                                              minuteInterval: 1,
                                                                                                              minimumDate:DateTime.now(),
                                                                                                              initialDateTime: OfferExpiryController.text.isEmpty ?DateTime.now():ExDTime,
                                                                                                              onDateTimeChanged: (DateTime newDateTime) {
                                                                                                                setState((){
                                                                                                                  ExDTime = newDateTime;
                                                                                                                  print(ExDTime);
                                                                                                                });
                                                                                                                setModalState((){});
                                                                                                              },
                                                                                                              maximumDate: DateTime.now().add(const Duration(days: 720)),
                                                                                                            ),
                                                                                                          )
                                                                                                      ),
                                                                                                    ),
                                                                                                    Padding(
                                                                                                      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10),
                                                                                                      child: ElevatedButton(
                                                                                                        style: ButtonStyle(
                                                                                                            backgroundColor: MaterialStateProperty.all(Constants.primaryColor1 ),
                                                                                                            elevation: MaterialStateProperty.all(0),
                                                                                                            foregroundColor: MaterialStateProperty.all(Colors.transparent),
                                                                                                            overlayColor: MaterialStateProperty.all(Colors.transparent),
                                                                                                            shadowColor: MaterialStateProperty.all(Colors.transparent),
                                                                                                            shape: MaterialStateProperty.all(RoundedRectangleBorder(
                                                                                                              borderRadius: BorderRadius.circular(8),
                                                                                                            ),)
                                                                                                        ),
                                                                                                        onPressed: () {
                                                                                                          setState((){
                                                                                                            OfferExpiryDateTime = ExDTime;

                                                                                                            final  STime = DateFormat('dd-MMM-yyyy hh:mm a').format(ExDTime!);
                                                                                                            OfferExpiryController.text = STime ;
                                                                                                            final  SDateTime = DateFormat('dd-MM-yyyy HH:mm').format(ExDTime!);
                                                                                                            offerExpiryDateTime = SDateTime;
                                                                                                            for(var i = 0 ;i< ItemsList.length ; i++){
                                                                                                              ItemsList[i]["item_condition"]["expiry"].text  = SDateTime;
                                                                                                              ItemsList[i]["item_condition"]["ExpiryDateTime"]  = ExDTime;
                                                                                                            }
                                                                                                          });
                                                                                                          setModalState((){});
                                                                                                          Navigator.pop(context);
                                                                                                        },
                                                                                                        child: const Padding(
                                                                                                          padding: EdgeInsets.all(12.0),
                                                                                                          child: Center(
                                                                                                            child: Text(
                                                                                                              'Save',
                                                                                                              style: WhiteSubTitleStyle,
                                                                                                              textAlign: TextAlign.center,
                                                                                                            ),
                                                                                                          ),
                                                                                                        ),
                                                                                                      ),
                                                                                                    ),
                                                                                                  ],
                                                                                                ),
                                                                                              )
                                                                                          )),
                                                                                    );
                                                                                  },
                                                                                  transitionDuration: const Duration(milliseconds: 300),
                                                                                  barrierDismissible: true,
                                                                                  barrierLabel: '',
                                                                                  context: context,
                                                                                  pageBuilder: (BuildContext context, Animation<double> animation,
                                                                                      Animation<double> secondaryAnimation) {
                                                                                    return const Text('');
                                                                                  }
                                                                              );
                                                                            },
                                                                            readOnly: true,
                                                                            controller: OfferExpiryController,
                                                                            keyboardType: TextInputType.text,
                                                                            decoration: InputDecoration(hintText: "Expiry", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                              focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                              enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                              floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                              contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                              constraints: BoxConstraints(maxWidth: ResponsiveHelper.isMobile(context)?width:tabWidth),
                                                                              border: const OutlineInputBorder(),
                                                                              // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                            ),
                                                                            style: Black87HintStyle,
                                                                          ),
                                                                        ),
                                                                        Positioned(
                                                                            bottom:1,left:2,
                                                                            child: InkWell(
                                                                              onTap:(){
                                                                                setState((){
                                                                                  ExDTime=null;
                                                                                  offerExpiryDateTime = "";
                                                                                  OfferExpiryController.clear();
                                                                                  isExpiryVisible = false;
                                                                                });
                                                                                setModalState((){});
                                                                              },
                                                                              child: CircleAvatar(
                                                                                radius:8,
                                                                                backgroundColor: Color(0x3389F6B9) ,
                                                                                child: Center(
                                                                                    child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                ),
                                                                              ),
                                                                            )),
                                                                      ],
                                                                    ),

                                                                  ],
                                                                ),
                                                              ):SizedBox(),
                                                              isOfferFromLocationVisible == false ? SizedBox():    Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [

                                                                  const Padding(
                                                                    padding: EdgeInsets.only(left:0.0,bottom: 5,top:5),
                                                                    child: Text("From location", style: BlackDescStyle500,),
                                                                  ),
                                                                  Stack(
                                                                    children: [
                                                                      Container(
                                                                        height: 35,margin: EdgeInsets.only(top:2) ,
                                                                        padding: EdgeInsets.only(left:12),
                                                                        decoration: BoxDecoration(color: Colors.white,borderRadius: BorderRadius.circular(5)),
                                                                        width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                                        child: TextFormField(
                                                                          controller: OfferFromLocationController,
                                                                          onTap:() async {

                                                                            Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true,isTitleSelectAsAddress: true))).then((value) {
                                                                              setState(() {
                                                                                OfferFromLocationController.text=value.toString();
                                                                              });
                                                                              setModalState((){});
                                                                            });

                                                                            //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                                                                          },
                                                                          readOnly: true,
                                                                          keyboardType: TextInputType.text,
                                                                          decoration: InputDecoration(hintText:"From location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                            focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                            enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                            floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                            contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                            border: const OutlineInputBorder(),
                                                                            // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                          ),
                                                                          style: Black87HintStyle,
                                                                        ),
                                                                      ),
                                                                      Positioned(
                                                                          bottom:1,left:2,
                                                                          child: InkWell(
                                                                            onTap:(){
                                                                              setState((){
                                                                                OfferFromLocationController.clear();
                                                                                isOfferFromLocationVisible = false;
                                                                              });
                                                                              setModalState((){});
                                                                            },
                                                                            child: CircleAvatar(
                                                                              radius:8,
                                                                              backgroundColor: Color(
                                                                                  0x3389F6B9) ,
                                                                              child: Center(
                                                                                  child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                              ),
                                                                            ),
                                                                          )),
                                                                      isOfferToLocationVisible==true?SizedBox(): Positioned(
                                                                          top:0,right:5,
                                                                          child: InkWell(
                                                                            onTap:(){
                                                                              setState((){
                                                                                isOfferToLocationVisible=true ;
                                                                              });
                                                                              setModalState((){});
                                                                            },
                                                                            child: CircleAvatar(
                                                                              radius:8,
                                                                              backgroundColor: Constants.primaryColor1 ,
                                                                              child: Center(
                                                                                  child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                              ),
                                                                            ),
                                                                          ))
                                                                    ],
                                                                  ),

                                                                ],
                                                              ),
                                                              isOfferToLocationVisible == false ? SizedBox():   Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [

                                                                  const Padding(
                                                                    padding: EdgeInsets.only(left:0.0,bottom: 5,top:5),
                                                                    child: Text("To location", style: BlackDescStyle500,),
                                                                  ),
                                                                  Stack(
                                                                    children: [
                                                                      Container(
                                                                        height: 35,
                                                                        margin: EdgeInsets.only(top:2) ,
                                                                        padding: EdgeInsets.only(left:12),
                                                                        decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(5)),
                                                                        width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                                        child: TextFormField(
                                                                          controller: OfferToLocationController,
                                                                          keyboardType: TextInputType.text,
                                                                          onTap:() async {

                                                                            Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201),isAppPlaceView: true ,isTitleSelectAsAddress: true))).then((value) {
                                                                              setState(() {
                                                                                OfferToLocationController.text=value.toString();
                                                                              });
                                                                              setModalState((){});
                                                                            });

                                                                            //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                                                                          },
                                                                          readOnly: true,
                                                                          decoration: InputDecoration(hintText:"To location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                            focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                            enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                            floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                            contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                            border: const OutlineInputBorder(),
                                                                            // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                          ),
                                                                          style: Black87HintStyle,
                                                                        ),
                                                                      ),
                                                                      Positioned(
                                                                          bottom:1,left:2,
                                                                          child: InkWell(
                                                                            onTap:(){
                                                                              setState((){
                                                                                OfferToLocationController.clear();
                                                                                isOfferToLocationVisible = false;
                                                                              });
                                                                              setModalState((){});
                                                                            },
                                                                            child: CircleAvatar(
                                                                              radius:8,
                                                                              backgroundColor: Color(
                                                                                  0x3389F6B9) ,
                                                                              child: Center(
                                                                                  child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                              ),
                                                                            ),
                                                                          )),
                                                                      isOfferAtLocationVisible==true?SizedBox():    Positioned(
                                                                          top:1,right:2,
                                                                          child: InkWell(
                                                                            onTap:(){
                                                                              setState((){
                                                                                isOfferAtLocationVisible=true ;
                                                                              });
                                                                              setModalState((){});
                                                                            },
                                                                            child: CircleAvatar(
                                                                              radius:8,
                                                                              backgroundColor: Constants.primaryColor1 ,
                                                                              child: Center(
                                                                                  child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                              ),
                                                                            ),
                                                                          ))
                                                                    ],
                                                                  ),

                                                                ],
                                                              ),
                                                              isOfferAtLocationVisible  == false ? SizedBox():     Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                children: [
                                                                  const Padding(
                                                                    padding: EdgeInsets.only(left:0.0,bottom: 5,top:5),
                                                                    child: Text("At location", style: BlackDescStyle500,),
                                                                  ),
                                                                  Stack(
                                                                    children: [

                                                                      Container(
                                                                        height: 35,margin: EdgeInsets.only(top:2) ,
                                                                        padding: EdgeInsets.only(left:12),
                                                                        decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(5)),
                                                                        width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                                                                        child: TextFormField(
                                                                          controller:OfferAtLocationController,
                                                                          onTap:() async {

                                                                            Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true,isTitleSelectAsAddress: true))).then((value) {
                                                                              setState(() {
                                                                                OfferAtLocationController.text=value.toString();
                                                                              });
                                                                              setModalState((){});
                                                                            });

                                                                            //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                                                                          },
                                                                          readOnly: true,
                                                                          keyboardType: TextInputType.text,
                                                                          decoration: InputDecoration(hintText:"At location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                            focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                            enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                            floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                            contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                            border: const OutlineInputBorder(),
                                                                            // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                          ),
                                                                          style: Black87HintStyle,
                                                                        ),
                                                                      ),
                                                                      Positioned(
                                                                          bottom:1,left:2,
                                                                          child: InkWell(
                                                                            onTap:(){
                                                                              setState((){
                                                                                OfferAtLocationController.clear();
                                                                                isOfferAtLocationVisible = false;
                                                                              });
                                                                              setModalState((){});
                                                                            },
                                                                            child: CircleAvatar(
                                                                              radius:8,
                                                                              backgroundColor: Color(
                                                                                  0x3389F6B9) ,
                                                                              child: Center(
                                                                                  child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                              ),
                                                                            ),
                                                                          )),

                                                                    ],
                                                                  ),

                                                                ],
                                                              ),
                                                              const SizedBox(height: 10,),


                                                            ],
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                    Positioned(
                                                        top:10,left:0,right:0,
                                                        child:BottomSheetDivider())
                                                  ],
                                                ),
                                              );
                                            },)
                                        );
                                      })                                    ],
                                  ),
                                ),
                              ),


                              // Container(
                              //   padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 10),
                              //   decoration: BoxDecoration(
                              //     color: const Color(0xFFE7E6E6),
                              //     // borderRadius: BorderRadius.circular(5),
                              //     border: Border.all(color: Colors.white),
                              //   ),
                              //   child: Column(
                              //     crossAxisAlignment: CrossAxisAlignment.start,
                              //     children: [
                              //       const Align(
                              //           alignment: Alignment.topLeft,
                              //           child: Text(
                              //             "Offer’s Conditions",
                              //             style: BlackTitleBoldStyle,
                              //           )),
                              //       const SizedBox(height: 10,),
                              //       SizedBox(
                              //           height: 60,
                              //           width: double.infinity,
                              //           child: ListView(
                              //             scrollDirection: Axis.horizontal,
                              //             physics: const ClampingScrollPhysics(),
                              //             shrinkWrap: false,
                              //             children: [
                              //               isPeriodicityVisible==true?  Padding(
                              //                 padding: EdgeInsets.only(right:10),
                              //                 child: Column(
                              //                   crossAxisAlignment: CrossAxisAlignment.start,
                              //                   children: [
                              //                     Stack(
                              //                       children: [
                              //                         DropdownButtonHideUnderline(
                              //                           child: DropdownButton2(
                              //                             isExpanded: true,
                              //                             items:periodicityList.map((item) => DropdownMenuItem (
                              //                               value: item,
                              //                               child: Text(item, style:  Black87HintStyle, overflow: TextOverflow.ellipsis,),
                              //                             )).toList(),
                              //                             value:selectedPeriodicityValue==""?null:selectedPeriodicityValue,
                              //                             onChanged: (newValue) {
                              //                               setState(() {
                              //                                 selectedPeriodicityValue = newValue!;
                              //                                 OfferPeriodController.clear();
                              //                                 OfferFromDate  = DateTime.now().add(Duration(days: 60));
                              //                                 OfferFromTime = DateTime.now().add(Duration(days: 1));
                              //                                 OfferToDate = DateTime.now().add(Duration(days: 60));
                              //                                 OfferToTime = DateTime.now().add(Duration(days: 1));
                              //                                 for(var i = 0 ;i< ItemsList.length ; i++){
                              //                                   ItemsList[i]["item_condition"]["periodicity"] =newValue;
                              //                                 }
                              //                               });
                              //                             },
                              //                             hint: const Text(
                              //                                 "Periodicity",
                              //                                 style:greyHintStyle
                              //                             ),
                              //                             iconStyleData: const IconStyleData(
                              //                               icon: Icon(Icons.keyboard_arrow_down_sharp,),
                              //                               iconSize: 10,
                              //                               iconEnabledColor: Colors.white,
                              //                               iconDisabledColor:Colors.white,
                              //                             ),
                              //                             buttonStyleData: ButtonStyleData(
                              //                                 height:  35,
                              //                                 width: ResponsiveHelper.isMobile(context)? width*0.38:tabWidth*0.38,
                              //                                 padding: const EdgeInsets.only(left: 22, right: 3),
                              //                                 decoration: BoxDecoration(borderRadius: BorderRadius.circular(5),color: Colors.white),
                              //                                 elevation:  1,
                              //                                 overlayColor: MaterialStateProperty.all(Colors.white)
                              //                             ),
                              //                             menuItemStyleData: MenuItemStyleData(
                              //                               height: 33,
                              //                               selectedMenuItemBuilder: (context, child) {
                              //                                 return     Container(
                              //                                   padding: const EdgeInsets.only(left: 0, right: 0),
                              //                                   width: ResponsiveHelper.isMobile(context)? width*0.38:tabWidth*0.38,
                              //                                   height: 30,color:Constants.primaryColor1,
                              //                                   child: Row(
                              //                                     mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              //                                     children: [
                              //                                       child,
                              //                                       const Padding(
                              //                                         padding: EdgeInsets.only(right: 5.0),
                              //                                         child: Icon(Icons.done,color: Colors.white,size: 20,),
                              //                                       )
                              //                                     ],
                              //                                   ),
                              //                                 );
                              //                               },
                              //                               padding: const EdgeInsets.only(left: 8, right: 3),
                              //                             ),
                              //                             dropdownStyleData: DropdownStyleData(
                              //                               maxHeight: 200,
                              //                               padding: const EdgeInsets.only(left: 0, right: 0),
                              //                               width: ResponsiveHelper.isMobile(context)? width*0.38:tabWidth*0.38,
                              //                               decoration: BoxDecoration(
                              //                                   borderRadius: BorderRadius.circular(5),
                              //                                   color: Colors.white,
                              //                                   border: Border.all(color:  Constants.primaryColor1,width: 1)
                              //                               ),
                              //                               elevation: 1,
                              //                               scrollbarTheme: ScrollbarThemeData(
                              //                                   radius:  const Radius.circular(20),
                              //                                   thickness: MaterialStateProperty.all(5.0),
                              //                                   minThumbLength: 20
                              //                               ),
                              //                               offset: const Offset(0, -5),
                              //                             ),
                              //
                              //                             style: BlackFieldStyle,
                              //
                              //                           ),
                              //                         ),
                              //                         Positioned(
                              //                             bottom:1,left:2,
                              //                             child: InkWell(
                              //                               onTap:(){
                              //                                 setState((){
                              //                                   selectedPeriodicityValue = "";
                              //                                   isPeriodicityVisible = false;
                              //                                 });
                              //                               },
                              //                               child: CircleAvatar(
                              //                                 radius:8,
                              //                                 backgroundColor: Color(
                              //                                     0x3389F6B9) ,
                              //                                 child: Center(
                              //                                     child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                 ),
                              //                               ),
                              //                             ))
                              //                       ],
                              //                     ),
                              //                     const SizedBox(height:5,),
                              //                     const Padding(
                              //                       padding: EdgeInsets.only(left:8.0),
                              //                       child: Text("Periodicity", style: BlackDescStyle,),
                              //                     ),
                              //                   ],
                              //                 ),
                              //               ):SizedBox(),
                              //
                              //               selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow"?SizedBox():
                              //               isPeriodVisible?
                              //               Padding(
                              //                 padding: EdgeInsets.only(right:10,top:2),
                              //                 child: Column(
                              //                   crossAxisAlignment: CrossAxisAlignment.start,
                              //                   children: [
                              //                     Stack(
                              //                       children: [
                              //                         Container(
                              //                           height: 35,
                              //                           padding:EdgeInsets.only(left:12),
                              //                           decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                             BoxShadow(
                              //                                 blurRadius: 2.0,
                              //                                 color: Colors.black54,
                              //                                 offset: Offset(0.0, 0.5) ),
                              //                           ], borderRadius: BorderRadius.circular(5)),
                              //                           width: isMobile?width*0.55:tabWidth*0.55,
                              //                           child: TextFormField(
                              //                             controller: OfferPeriodController,
                              //                             readOnly: true,
                              //                             onTap:(){
                              //                               print("Call");
                              //                               DatePickerFromTo(
                              //                                   startText: "From",
                              //                                   endText: "To",
                              //                                   doneText: "Done",
                              //                                   cancelText: "Cancel",
                              //                                   interval: 1,
                              //                                   mode: FromToDateRangePickerMode.date,
                              //                                   minimumTime: DateTime.now(),
                              //                                   maximumTime: DateTime.now().add(Duration(days: 25)),
                              //                                   initialStartTime: OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(hours: 1)):OfferFromDate,
                              //                                   initialEndTime:OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(hours: 1)):OfferToDate ,
                              //                                   use24hFormat: false,
                              //                                   onConfirm:  (start, end) {
                              //                                     if(end == "NotPick"){
                              //                                       isSinglePeriodSelect =true;
                              //
                              //
                              //                                       setState((){
                              //                                         OfferPeriodTimeController.clear();
                              //                                         OfferDurationController.clear();
                              //
                              //                                         final  STime = DateFormat('dd-MMM-yyyy').format(start);
                              //                                         OfferPeriodController.text = "From ${STime}";
                              //                                         final  SDate = DateFormat('dd-MM-yyyy').format(start);
                              //                                         offerPeriodFromTime="";
                              //                                         offerPeriodFromDate="";
                              //                                         offerPeriodToDate="";
                              //                                         offerPeriodToTime="";
                              //                                         offerPeriodFromDate = SDate.toString();
                              //                                         OfferFromDate  = start;
                              //                                         for(var i = 0 ;i< ItemsList.length ; i++){
                              //                                           ItemsList[i]["item_condition"]["period"].text = "From ${STime}";
                              //                                           ItemsList[i]["item_condition"]["fromperiod"]= SDate.toString();
                              //                                           ItemsList[i]["item_condition"]["FromPeriodDateFill"]= start;
                              //                                         }
                              //                                       });
                              //                                     }else{
                              //                                       setState((){
                              //                                         isSinglePeriodSelect = false;
                              //
                              //                                         int totalDays = DateTime.parse(end).difference(start).inDays;
                              //                                         int years = totalDays ~/ 365;
                              //                                         int months = (totalDays-years*365) ~/ 30;
                              //                                         int days = totalDays-years*365-months*30;
                              //                                         int doneHours = years*365*24;
                              //                                         int hours = DateTime.parse(end).difference(start).inHours  -(doneHours) -(months*30*24) - (days*24);
                              //                                         int min = (((DateTime.parse(end).difference(start).inMinutes - (years*365*24*60)) -(months*30*24*60)) - (days*24*60) )-hours*60;
                              //                                         String empty = "";
                              //
                              //                                         TempDurationDate = "${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                              //                                         OfferDurationController.text = "${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                              //                                         final  FTime = DateFormat('dd-MMM-yyyy').format(start);
                              //                                         final  ToTime = DateFormat('dd-MMM-yyyy').format(DateTime.parse(end));
                              //                                         OfferPeriodController.text = "${FTime}-${ToTime}";
                              //                                         final  SDate = DateFormat('dd-MM-yyyy').format(start);
                              //
                              //                                         offerPeriodFromDate = SDate.toString();
                              //                                         final  EDate = DateFormat('dd-MM-yyyy').format(DateTime.parse(end));
                              //                                         offerPeriodToDate = EDate.toString();
                              //                                         OfferFromDate  = start;
                              //                                         OfferToDate = DateTime.parse(end.toString());
                              //                                         for(var i = 0 ;i< ItemsList.length ; i++){
                              //                                           ItemsList[i]["item_condition"]["period"].text = "${FTime}-${ToTime}";
                              //                                           ItemsList[i]["item_condition"]["fromperiod"]= SDate.toString();
                              //                                           ItemsList[i]["item_condition"]["toperiod"] = SDate.toString();
                              //                                           ItemsList[i]["item_condition"]["FromPeriodDateFill"]= start;
                              //                                           ItemsList[i]["item_condition"]["ToPeriodDateFill"]= DateTime.parse(end);
                              //                                         }
                              //                                       });
                              //                                     }
                              //                                   }).showPicker(context);
                              //
                              //                               // FromToDatePicker(context,FirstDate: DateTime.now(),LastDate: DateTime.now().add(Duration(days: 365)));
                              //                             },
                              //                             keyboardType: TextInputType.text,
                              //                             decoration: InputDecoration(hintText: "Period Date", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                               focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                               enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                               floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                               contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                               border: const OutlineInputBorder(),
                              //                             ),
                              //                             style: Black87HintStyle,
                              //                           ),
                              //                         ),
                              //                         Positioned(
                              //                             bottom:1,left:2,
                              //                             child: InkWell(
                              //                               onTap:(){
                              //                                 setState((){
                              //                                   OfferPeriodController.clear();
                              //                                   offerPeriodFromDate="";
                              //                                   offerPeriodToDate="";
                              //                                   isPeriodVisible = false;
                              //                                   offerDisableFields.add("DatePeriod");
                              //                                 });
                              //                               },
                              //                               child: CircleAvatar(
                              //                                 radius:8,
                              //                                 backgroundColor: Color(0x3389F6B9) ,
                              //                                 child: Center(
                              //                                     child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                 ),
                              //                               ),
                              //                             ))
                              //                       ],
                              //                     ),
                              //                     const SizedBox(height:5),
                              //                     const Padding(
                              //                       padding: EdgeInsets.only(left:8.0),
                              //                       child: Text("Period Date", style: BlackDescStyle,),
                              //                     ),
                              //                   ],
                              //                 ),
                              //               ):
                              //               TextForNewAdd(context,text: "Period Date",onTap: (){
                              //                 setState(() {
                              //                   isPeriodVisible = true;
                              //                   offerDisableFields.remove("DatePeriod");
                              //                 });
                              //               }),
                              //
                              //               isPeriodTimeVisible?    Padding(
                              //                 padding: EdgeInsets.only(right:10,top:2),
                              //                 child: Column(
                              //                   crossAxisAlignment: CrossAxisAlignment.start,
                              //                   children: [
                              //                     Stack(
                              //                       children: [
                              //                         Container(
                              //                           height: 35,
                              //                           padding:EdgeInsets.only(left:12),
                              //                           decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                             BoxShadow(
                              //                                 blurRadius: 2.0,
                              //                                 color: Colors.black54,
                              //                                 offset: Offset(0.0, 0.5) ),
                              //                           ], borderRadius: BorderRadius.circular(5)),
                              //                           width: isMobile?width*0.55:tabWidth*0.55,
                              //                           child: TextFormField(
                              //                             controller: OfferPeriodTimeController,
                              //                             readOnly: true,
                              //
                              //                             onTap:(){
                              //                               print("Call");
                              //                               FromToTimePicker(
                              //                                   startText: "From",
                              //                                   endText: "To",
                              //                                   doneText: "Done",
                              //                                   cancelText: "Cancel",
                              //                                   interval: 1,
                              //
                              //                                   mode: FromToTimePickerMode.time,
                              //                                   type:selectedPeriodicityValue == "Today" ?"Today":"Else",
                              //                                   initialStartTime: OfferPeriodTimeController.text.isEmpty?
                              //                                   selectedPeriodicityValue.toString().trim() == "Today" ?
                              //                                   DateTime.now().add(Duration(hours: 1)):
                              //                                   DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().toString())} 00:01:00"):
                              //                                   OfferFromTime,
                              //                                   initialEndTime: OfferPeriodTimeController.text.isEmpty?
                              //                                   selectedPeriodicityValue.toString().trim() == "Today" ?
                              //                                   DateTime.now().add(Duration(hours: 1)):
                              //                                   DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().toString())} 00:01:00"):OfferToTime,
                              //
                              //                                   use24hFormat: false,
                              //                                   onConfirm: (start, end) {
                              //                                     print(start);
                              //                                     print(end);
                              //                                     if(end == "NotPick"){
                              //
                              //                                       setState((){
                              //                                         selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow"?
                              //                                         isSinglePeriodSelect =true :null;
                              //                                         final  STime = DateFormat('hh:mm a').format(start);
                              //                                         OfferPeriodTimeController.text = "From ${STime}";
                              //                                         offerPeriodFromTime="";
                              //                                         offerPeriodToTime="";
                              //                                         final  STime24 = DateFormat('HH:mm').format(start);
                              //                                         offerPeriodFromTime = STime24.toString();
                              //                                         OfferFromTime = start;
                              //
                              //                                         for(var i = 0 ;i< ItemsList.length ; i++){
                              //                                           ItemsList[i]["item_condition"]["periodTime"].text = "From ${STime}";
                              //                                           ItemsList[i]["item_condition"]["fromperiodtime"]= STime24.toString();
                              //                                           ItemsList[i]["item_condition"]["FromPeriodTimeFill"]= start;
                              //                                         }
                              //                                       });
                              //                                     }else{
                              //                                       setState((){
                              //                                         selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow"?
                              //                                         isSinglePeriodSelect =false :null;
                              //                                         Duration diff = DateTime.parse(end).difference(start);
                              //                                         diff.inHours !=0?  TempDurationTime = "${diff.inHours.toString()} Hours": diff.inSeconds !=00?TempDurationTime = "${diff.inMinutes.toString()} Minutes" :TempDurationTime = "${diff.inSeconds.toString()} Seconds";
                              //                                         OfferDurationController.text.isEmpty ? OfferDurationController.text = TempDurationTime : OfferDurationController.text = "${OfferDurationController.text}${TempDurationTime}";
                              //                                         final  FTime = DateFormat('hh:mm a').format(start);
                              //                                         final  ToTime = DateFormat('hh:mm a').format(DateTime.parse(end));
                              //                                         OfferPeriodTimeController.text = "${FTime} - ${ToTime}";
                              //                                         offerPeriodFromTime="";
                              //                                         offerPeriodToTime="";
                              //                                         final  FTime24 = DateFormat('HH:mm').format(start);
                              //                                         final  ToTime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                              //                                         offerPeriodFromTime = FTime24.toString();
                              //                                         offerPeriodToTime = ToTime24.toString();
                              //                                         OfferFromTime = start;
                              //                                         OfferToTime = DateTime.parse(end);
                              //                                         for(var i = 0 ;i< ItemsList.length ; i++){
                              //                                           ItemsList[i]["item_condition"]["periodTime"].text = "${FTime} - ${ToTime}";
                              //                                           ItemsList[i]["item_condition"]["fromperiodtime"]= FTime24.toString();
                              //                                           ItemsList[i]["item_condition"]["toperiodtime"]= ToTime24.toString();
                              //                                           ItemsList[i]["item_condition"]["FromPeriodTimeFill"]= start;
                              //                                           ItemsList[i]["item_condition"]["ToPeriodTimeFIll"]= DateTime.parse(end);
                              //                                         }
                              //                                       });
                              //                                     }
                              //                                   }).showPicker(context);
                              //
                              //                               // FromToDatePicker(context,FirstDate: DateTime.now(),LastDate: DateTime.now().add(Duration(days: 365)));
                              //                             },
                              //                             keyboardType: TextInputType.text,
                              //                             decoration: InputDecoration(hintText: "Period Time", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                               focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                               enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                               floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                               contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                               border: const OutlineInputBorder(),
                              //                             ),
                              //                             style: Black87HintStyle,
                              //                           ),
                              //                         ),
                              //                         Positioned(
                              //                             bottom:1,left:2,
                              //                             child: InkWell(
                              //                               onTap:(){
                              //                                 setState((){
                              //                                   OfferPeriodTimeController.clear();
                              //                                   offerPeriodFromTime="";
                              //                                   offerPeriodToTime="";
                              //                                   isPeriodTimeVisible = false;
                              //                                   offerDisableFields.add("DatePeriod");
                              //                                 });
                              //                               },
                              //                               child: CircleAvatar(
                              //                                 radius:8,
                              //                                 backgroundColor: Color(0x3389F6B9) ,
                              //                                 child: Center(
                              //                                     child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                 ),
                              //                               ),
                              //                             ))
                              //                       ],
                              //                     ),
                              //                     const SizedBox(height:5),
                              //                     const Padding(
                              //                       padding: EdgeInsets.only(left:8.0),
                              //                       child: Text("Period Time", style: BlackDescStyle,),
                              //                     ),
                              //                   ],
                              //                 ),
                              //               ): TextForNewAdd(context,text: "Period Time",onTap: (){
                              //                 setState(() {
                              //                   isPeriodTimeVisible = true;
                              //                   offerDisableFields.remove("TimePeriod");
                              //                 });
                              //               }),
                              //               // isPeriodVisible == true? Padding(
                              //               //   padding: EdgeInsets.only(right:10,top:2),
                              //               //   child: Column(
                              //               //     crossAxisAlignment: CrossAxisAlignment.start,
                              //               //     children: [
                              //               //       Stack(
                              //               //         children: [
                              //               //           Container(
                              //               //             height: 35,
                              //               //             padding:EdgeInsets.only(left:12),
                              //               //             decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //               //               BoxShadow(
                              //               //                   blurRadius: 2.0,
                              //               //                   color: Colors.black54,
                              //               //                   offset: Offset(0.0, 0.5) ),
                              //               //             ], borderRadius: BorderRadius.circular(5)),
                              //               //             width: ResponsiveHelper.isMobile(context)? width*0.55:tabWidth*0.55,
                              //               //             child: TextFormField(
                              //               //               controller: OfferPeriodController,
                              //               //               readOnly: true,
                              //               //               onTap:(){
                              //               //                 if(selectedPeriodicityValue == null){
                              //               //                   Constants.showToast("Please select periodicity first");
                              //               //                 }else{
                              //               //                   if(selectedPeriodicityValue == "Today" || selectedPeriodicityValue == "Tomorrow"){
                              //               //                     UpdateOfferConditionTimePicker(
                              //               //                         startText: "From",
                              //               //                         endText: "To",
                              //               //                         doneText: "Done",
                              //               //                         cancelText: "Cancel",
                              //               //                         interval: 1,
                              //               //                         mode: UpdateOfferConditionTimePickerMode.time,
                              //               //                         minimumTime: DateTime.now(),
                              //               //                         type: selectedPeriodicityValue.toString(),
                              //               //                         maximumTime: DateTime.now().add(Duration(days: 25)),
                              //               //                         initialStartTime: OfferPeriodController.text.isEmpty?
                              //               //                         selectedPeriodicityValue.toString().trim() == "Tomorrow" ?
                              //               //                         DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().add(Duration(days: 1)).toString())} 00:01:00"):
                              //               //                         DateTime.now().add(Duration(hours: 1)):OfferFromTime,
                              //               //                         initialEndTime: OfferPeriodController.text.isEmpty?
                              //               //                         selectedPeriodicityValue.toString().trim() == "Tomorrow" ?
                              //               //                         DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().add(Duration(days: 1)).toString())} 00:01:00"):
                              //               //                         DateTime.now().add(Duration(hours: 1)):OfferToTime,
                              //               //                         use24hFormat: false,
                              //               //                         onConfirm: (start, end) {
                              //               //
                              //               //                           if(end == "NotPick"){
                              //               //                             setState((){
                              //               //                               OfferDurationController.clear();
                              //               //                               isSinglePeriodSelect =true;
                              //               //                               final  STime = DateFormat('hh:mm a').format(start);
                              //               //                               OfferPeriodController.text = "From ${STime}";
                              //               //                               offerPeriodFromTime="";
                              //               //                               offerPeriodFromDate="";
                              //               //                               offerPeriodToDate="";
                              //               //                               offerPeriodToTime="";
                              //               //                               final  STime24 = DateFormat('HH:mm').format(start);
                              //               //                               offerPeriodFromTime = STime24.toString();
                              //               //                               for(var i = 0 ;i< ItemsList.length ; i++){
                              //               //                                 ItemsList[i]["item_condition"]["period"].text = "From ${STime}";
                              //               //                                 ItemsList[i]["item_condition"]["fromperiodtime"]= STime24.toString();
                              //               //                                 OfferFromTime = start;
                              //               //                                 ItemsList[i]["item_condition"]["FromPeriodTimeFill"]= start;
                              //               //                               }
                              //               //                             });
                              //               //
                              //               //                           }else{
                              //               //                             setState((){
                              //               //                               isSinglePeriodSelect =false;
                              //               //                               Duration diff = DateTime.parse(end).difference(start);
                              //               //                               diff.inHours !=0?  OfferDurationController.text = "${diff.inHours.toString()} Hours": diff.inSeconds !=00?OfferDurationController.text = "${diff.inMinutes.toString()} Minutes" :OfferDurationController.text = "${diff.inSeconds.toString()} Seconds";
                              //               //                               final  FTime = DateFormat('hh:mm a').format(start);
                              //               //                               final  ToTime = DateFormat('hh:mm a').format(DateTime.parse(end));
                              //               //                               OfferPeriodController.text = "${FTime} - ${ToTime}";
                              //               //                               offerPeriodFromTime="";
                              //               //                               offerPeriodFromDate="";
                              //               //                               offerPeriodToDate="";
                              //               //                               offerPeriodToTime="";
                              //               //                               final  FTime24 = DateFormat('HH:mm').format(start);
                              //               //                               final  ToTime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                              //               //                               offerPeriodFromTime = FTime24.toString();
                              //               //                               offerPeriodToTime = ToTime24.toString();
                              //               //                               for(var i = 0 ;i< ItemsList.length ; i++){
                              //               //                                 ItemsList[i]["item_condition"]["period"].text = "${FTime} - ${ToTime}";
                              //               //                                 ItemsList[i]["item_condition"]["fromperiodtime"]= FTime24.toString();
                              //               //                                 ItemsList[i]["item_condition"]["toperiodtime"]= ToTime24.toString();
                              //               //
                              //               //                                 ItemsList[i]["item_condition"]["FromPeriodTimeFill"]= start;
                              //               //                                 ItemsList[i]["item_condition"]["ToPeriodTimeFIll"]= DateTime.parse(end);
                              //               //                                 OfferFromTime = start;
                              //               //                                 OfferToTime = DateTime.parse(end);
                              //               //
                              //               //                               }
                              //               //                             });
                              //               //                           }
                              //               //                         }).showPicker(context);
                              //               //                   }
                              //               //                   else{
                              //               //                     DateTimeRangePickerUpdateOffer(
                              //               //                         startText: "From",
                              //               //                         endText: "To",
                              //               //                         doneText: "Done",
                              //               //                         cancelText: "Cancel",
                              //               //                         interval: 1,
                              //               //                         mode: DateTimeRangePickerModeUpdateOffer.dateAndTime,
                              //               //                         minimumTime:OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(minutes: 30)):OfferFromDate.subtract(Duration(hours: 1)),
                              //               //                         maximumTime: DateTime.now().add(Duration(days: 25)),
                              //               //                         initialStartTime: OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(hours: 1)):OfferFromDate,
                              //               //                         initialEndTime:OfferPeriodController.text.isEmpty? DateTime.now().add(Duration(hours: 1)):OfferToDate ,
                              //               //                         use24hFormat: false,
                              //               //                         onConfirm: (start, end) {
                              //               //                           if(end == "NotPick"){
                              //               //                             setState((){
                              //               //                               OfferDurationController.clear();
                              //               //                               isSinglePeriodSelect =true;
                              //               //                               final  STime = DateFormat('dd-MMM-yyyy hh:mm a').format(start);
                              //               //                               OfferPeriodController.text = "From ${STime}";
                              //               //                               final  SDate = DateFormat('dd-MM-yyyy').format(start);
                              //               //                               final  STime24 = DateFormat('HH:mm').format(start);
                              //               //                               offerPeriodFromTime="";
                              //               //                               offerPeriodFromDate="";
                              //               //                               offerPeriodToDate="";
                              //               //                               offerPeriodToTime="";
                              //               //                               offerPeriodFromTime = STime24.toString();
                              //               //                               offerPeriodFromDate = SDate.toString();
                              //               //                               for(var i = 0 ;i< ItemsList.length ; i++){
                              //               //                                 ItemsList[i]["item_condition"]["period"].text = "From ${STime}";
                              //               //                                 ItemsList[i]["item_condition"]["fromperiod"]=SDate.toString();
                              //               //                                 ItemsList[i]["item_condition"]["fromperiodtime"]= STime24.toString();
                              //               //                                 OfferFromDate = start;
                              //               //
                              //               //                                 ItemsList[i]["item_condition"]["FromPeriodDateFill"]= start;
                              //               //                               }
                              //               //                             });
                              //               //                           }else{
                              //               //                             setState((){
                              //               //                               isSinglePeriodSelect = false;
                              //               //                               print(end);
                              //               //                               print(start);
                              //               //                               int totalDays = DateTime.parse(end).difference(start).inDays;
                              //               //                               int years = totalDays ~/ 365;
                              //               //                               int months = (totalDays-years*365) ~/ 30;
                              //               //                               int days = totalDays-years*365-months*30;
                              //               //                               int doneHours = years*365*24;
                              //               //                               int hours = DateTime.parse(end).difference(start).inHours  -(doneHours) -(months*30*24) - (days*24);
                              //               //                               int min = (((DateTime.parse(end).difference(start).inMinutes - (years*365*24*60)) -(months*30*24*60)) - (days*24*60) )-hours*60;
                              //               //                               String empty = "";
                              //               //                               print("${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minibus': empty}");
                              //               //                               OfferDurationController.text ="${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                              //               //                               final  FTime = DateFormat('dd-MMM-yyyy').format(start);
                              //               //                               final  ToTime = DateFormat('dd-MMM-yyyy').format(DateTime.parse(end));
                              //               //                               OfferPeriodController.text = "${FTime}-${ToTime}";
                              //               //                               final  SDate = DateFormat('dd-MM-yyyy').format(start);
                              //               //                               final  STime24 = DateFormat('HH:mm').format(start);
                              //               //                               offerPeriodFromTime = STime24.toString();
                              //               //                               offerPeriodFromDate = SDate.toString();
                              //               //                               final  EDate = DateFormat('dd-MM-yyyy').format(DateTime.parse(end));
                              //               //                               final  ETime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                              //               //                               offerPeriodToTime = ETime24.toString();
                              //               //                               offerPeriodToDate = EDate.toString();
                              //               //                               for(var i = 0 ;i< ItemsList.length ; i++){
                              //               //                                 ItemsList[i]["item_condition"]["period"].text = "${FTime}-${ToTime}";
                              //               //                                 ItemsList[i]["item_condition"]["fromperiod"]= SDate.toString();
                              //               //                                 ItemsList[i]["item_condition"]["fromperiodtime"]= STime24.toString();
                              //               //                                 ItemsList[i]["item_condition"]["toperiodtime"] = ETime24.toString();
                              //               //                                 ItemsList[i]["item_condition"]["toperiod"] = SDate.toString();
                              //               //
                              //               //                                 ItemsList[i]["item_condition"]["FromPeriodDateFill"]= start;
                              //               //                                 ItemsList[i]["item_condition"]["ToPeriodDateFill"]= DateTime.parse(end);
                              //               //                                 OfferFromDate = start;
                              //               //                                 OfferToDate = DateTime.parse(end);
                              //               //                               }
                              //               //                             });
                              //               //                           }
                              //               //                         }).showPicker(context);
                              //               //                   }
                              //               //                 }
                              //               //               },
                              //               //               keyboardType: TextInputType.text,
                              //               //               decoration: InputDecoration(hintText: "Period", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //               //                 focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //               //                 enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //               //                 floatingLabelBehavior: FloatingLabelBehavior.never,
                              //               //                 contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //               //                 border: const OutlineInputBorder(),
                              //               //               ),
                              //               //               style: Black87HintStyle,
                              //               //             ),
                              //               //           ),
                              //               //           Positioned(
                              //               //               bottom:1,left:2,
                              //               //               child: InkWell(
                              //               //                 onTap:(){
                              //               //                   setState((){
                              //               //                     OfferPeriodController.clear();
                              //               //                     offerPeriodFromTime="";
                              //               //                     offerPeriodFromDate="";
                              //               //                     offerPeriodToDate="";
                              //               //                     offerPeriodToTime="";
                              //               //                     OfferFromDate  = DateTime.now().add(Duration(days: 60));
                              //               //                     OfferFromTime = DateTime.now().add(Duration(days: 1));
                              //               //                     OfferToDate = DateTime.now().add(Duration(days: 60));
                              //               //                     OfferToTime = DateTime.now().add(Duration(days: 1));
                              //               //                     isPeriodVisible = false;
                              //               //                   });
                              //               //                 },
                              //               //                 child: CircleAvatar(
                              //               //                   radius:8,
                              //               //                   backgroundColor: Color(
                              //               //                       0x3389F6B9) ,
                              //               //                   child: Center(
                              //               //                       child:Icon(Icons.close,color: Colors.black,size:14,)
                              //               //                   ),
                              //               //                 ),
                              //               //               ))
                              //               //         ],
                              //               //       ),
                              //               //       const SizedBox(height:5),
                              //               //       const Padding(
                              //               //         padding: EdgeInsets.only(left:8.0),
                              //               //         child: Text("Period", style: BlackDescStyle,),
                              //               //       ),
                              //               //     ],
                              //               //   ),
                              //               // ):SizedBox(),
                              //
                              //               isDurationVisible==true?   Padding(
                              //                 padding: EdgeInsets.only(right:10,top:2),
                              //                 child: Column(
                              //                   crossAxisAlignment: CrossAxisAlignment.start,
                              //                   children: [
                              //                     Stack(
                              //                       children: [
                              //                         Container(
                              //                           height: 35,
                              //                           padding:EdgeInsets.only(left:12),
                              //                           decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                             BoxShadow(
                              //                                 blurRadius: 2.0,
                              //                                 color: Colors.black54,
                              //                                 offset: Offset(0.0, 0.5) ),
                              //                           ], borderRadius: BorderRadius.circular(5)),
                              //                           width: ResponsiveHelper.isMobile(context)? width*0.5:tabWidth*0.5,
                              //                           child: TextFormField(
                              //                             inputFormatters: [maskFormatter],
                              //                             controller: OfferDurationController,
                              //                             keyboardType: TextInputType.number,
                              //                             onTap:(){
                              //                               if(isSinglePeriodSelect==true){
                              //                                 showDurationPicker(context,setState,OfferDurationController);
                              //                               }else{
                              //
                              //                               }
                              //                             },
                              //                             readOnly: true,
                              //                             // onFieldSubmitted: (value){
                              //                             //   print(value);
                              //                             //   String empty = "";
                              //                             //   int years =  value!.length < 2 ?int.parse(value) :int.parse(value.split(":").first);
                              //                             //   int months =  value.length > 3 ?int.parse(value.split(":")[1]):0;
                              //                             //   int days =  value.length > 5 ?int.parse(value.split(":")[2]):0;
                              //                             //   int hours =  value.length > 7 ?int.parse(value.split(":")[3]):0;
                              //                             //   int min =  value.length > 9 ?int.parse(value.split(":")[4]):0;
                              //                             //   setState(() {
                              //                             //     OfferDurationController.text ="${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                              //                             //   });
                              //                             //   print(OfferDurationController.text);
                              //                             // },
                              //                             // readOnly: isSinglePeriodSelect==true?false:true,
                              //                             decoration: InputDecoration(hintText: "YY : MM : DD : HH : MI", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                               focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                               enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                               floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                               contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                               border: const OutlineInputBorder(),
                              //                               // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                             ),
                              //
                              //                             style: Black87HintStyle,
                              //                           ),
                              //                         ),
                              //                         Positioned(
                              //                             bottom:1,left:2,
                              //                             child: InkWell(
                              //                               onTap:(){
                              //                                 setState((){
                              //                                   OfferDurationController.clear();
                              //                                   isDurationVisible = false;
                              //                                 });
                              //                               },
                              //                               child: CircleAvatar(
                              //                                 radius:8,
                              //                                 backgroundColor: Color(
                              //                                     0x3389F6B9) ,
                              //                                 child: Center(
                              //                                     child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                 ),
                              //                               ),
                              //                             ))
                              //                       ],
                              //                     ),
                              //                     const SizedBox(height:5,),
                              //                     const Padding(
                              //                       padding: EdgeInsets.only(left:8.0),
                              //                       child: Text("Duration(YY:MM:DD:HH:MI)", style: BlackDescStyle,),
                              //                     ),
                              //                   ],
                              //                 ),
                              //               ):SizedBox(),
                              //
                              //               Column(
                              //                 mainAxisAlignment: MainAxisAlignment.start,
                              //                 crossAxisAlignment:CrossAxisAlignment.start,
                              //                 children: [
                              //                   Container(
                              //                     height:40,
                              //                     decoration:BoxDecoration(
                              //                       color:Colors.transparent,
                              //                       boxShadow: [
                              //                         BoxShadow(
                              //                             blurRadius: 1.0,
                              //                             color: Colors.black26,
                              //                             offset: Offset(0.0, 0.5) ),
                              //                       ],
                              //                     ),
                              //
                              //                     width: MediaQuery.sizeOf(context).width*1.0,
                              //                     child: Padding(
                              //                       padding: const EdgeInsets.all(0.0),
                              //                       child: CustomSearchableDropDownForUs(
                              //                         initialValue:  selectedItems ,
                              //                         items: ServicePersonList,
                              //                         menuHeight: 30.0,
                              //                         label: 'Select Service/Delivery person',
                              //                         multiSelectTag: 'Names',
                              //                         multiSelectValuesAsWidget: true,
                              //                         decoration: BoxDecoration(
                              //                           color: Colors.white,
                              //                           borderRadius: BorderRadius.circular(5),
                              //                         ),
                              //                         multiSelect: true,
                              //                         dropDownMenuItems: ServicePersonList.map((item) {
                              //                           return item.displayname;
                              //                         }).toList() ?? [],
                              //                         onChanged: (value){
                              //                           print(value);
                              //                           if(value!=null)
                              //                           {
                              //                             setState(() {
                              //                               selectedItems =   jsonDecode(value).map((e) =>e["id"] ).toList();
                              //                             });
                              //                           }
                              //                           else{
                              //                             //selectedItems!.clear();
                              //                           }
                              //                         },
                              //                       ),
                              //                     ),
                              //                   ),
                              //                   const SizedBox(height:3,),
                              //                   const Padding(
                              //                     padding: EdgeInsets.only(left:4.0),
                              //                     child: Text("Service/Delivery person", style: BlackDescStyle,),
                              //                   ),
                              //                 ],
                              //               ),
                              //
                              //             ],
                              //           )),
                              //       const SizedBox(height: 10,),
                              //       SizedBox(
                              //           height: 60,
                              //           width: double.infinity,
                              //           child: ListView(
                              //             scrollDirection: Axis.horizontal,
                              //             physics: const ClampingScrollPhysics(),
                              //             shrinkWrap: false,
                              //             children: [
                              //               isPriorityVisible==true?    Padding(
                              //                 padding: EdgeInsets.only(right:10),
                              //                 child: Column(
                              //                   crossAxisAlignment: CrossAxisAlignment.start,
                              //                   children: [
                              //                     Stack(
                              //                       children: [
                              //                         DropdownButtonHideUnderline(
                              //                           child: DropdownButton2(
                              //                               isExpanded: true,
                              //                               items:priority.map((item) => DropdownMenuItem (
                              //                                 value: item,
                              //                                 child: Text(item, style: BlackSubHeadingStyle,overflow: TextOverflow.ellipsis,),
                              //                               )).toList(),
                              //                               value: selectedValuePriority==""?null:selectedValuePriority,
                              //                               onChanged: (newValue) {
                              //                                 setState(() {
                              //                                   selectedValuePriority = newValue!;
                              //                                 });
                              //                               },
                              //                               hint: const Text(
                              //                                   "Priority",
                              //                                   style:greyHintStyle
                              //                               ),
                              //                               iconStyleData: const IconStyleData(
                              //                                 icon: Icon(Icons.keyboard_arrow_down_sharp,),
                              //                                 iconSize: 10,
                              //                                 iconEnabledColor: Colors.white,
                              //                                 iconDisabledColor:Colors.white,
                              //                               ),
                              //                               buttonStyleData: ButtonStyleData(
                              //                                   height:  35,
                              //                                   width: ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3,
                              //                                   padding: const EdgeInsets.only(left: 20, right: 3),
                              //                                   decoration: BoxDecoration(borderRadius: BorderRadius.circular(5),color: Colors.white),
                              //                                   elevation:  1,
                              //                                   overlayColor: MaterialStateProperty.all(Colors.white)
                              //                               ),
                              //                               menuItemStyleData: MenuItemStyleData(
                              //                                 height: 33,
                              //                                 selectedMenuItemBuilder: (context, child) {
                              //                                   return     Container(
                              //                                     padding: const EdgeInsets.only(left: 0, right: 0),
                              //                                     width: ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3,
                              //                                     height: 30,color:Constants.primaryColor1,
                              //                                     child: Row(
                              //                                       mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              //                                       children: [
                              //                                         child,
                              //                                         const Padding(
                              //                                           padding: EdgeInsets.only(right: 5.0),
                              //                                           child: Icon(Icons.done,color: Colors.white,size: 20,),
                              //                                         )
                              //                                       ],
                              //                                     ),
                              //                                   );
                              //                                 },
                              //                                 padding: const EdgeInsets.only(left: 8, right: 3),
                              //                               ),
                              //                               dropdownStyleData: DropdownStyleData(
                              //                                 maxHeight: 200,
                              //                                 padding: const EdgeInsets.only(left: 0, right: 0),
                              //                                 width: ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3,
                              //                                 decoration: BoxDecoration(
                              //                                     borderRadius: BorderRadius.circular(5),
                              //                                     color: Colors.white,
                              //                                     border: Border.all(color:  Constants.primaryColor1,width: 1)
                              //                                 ),
                              //                                 elevation: 1,
                              //                                 scrollbarTheme: ScrollbarThemeData(
                              //                                     radius:  const Radius.circular(20),
                              //                                     thickness: MaterialStateProperty.all(5.0),
                              //                                     minThumbLength: 20
                              //                                 ),
                              //                                 offset: const Offset(0, -5),
                              //                               ),
                              //
                              //                               style: BlackFieldStyle
                              //
                              //                           ),
                              //                         ),
                              //                         Positioned(
                              //                             bottom:1,left:2,
                              //                             child: InkWell(
                              //                               onTap:(){
                              //                                 setState((){
                              //                                   selectedValuePriority = "";
                              //                                   isPriorityVisible = false;
                              //                                 });
                              //                               },
                              //                               child: CircleAvatar(
                              //                                 radius:8,
                              //                                 backgroundColor: Color(0x3389F6B9) ,
                              //                                 child: Center(
                              //                                     child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                 ),
                              //                               ),
                              //                             )),
                              //                       ],
                              //                     ),
                              //                     const SizedBox(height:5,),
                              //                     const Padding(
                              //                       padding: EdgeInsets.only(left:8.0),
                              //                       child: Text("Priority", style: BlackDescStyle,),
                              //                     ),
                              //                   ],
                              //                 ),
                              //               ):SizedBox(),
                              //               isExpiryVisible == true? Padding(
                              //                 padding: EdgeInsets.only(right:10),
                              //                 child: Column(
                              //                   crossAxisAlignment: CrossAxisAlignment.start,
                              //                   children: [
                              //                     Stack(
                              //                       children: [
                              //                         Container(
                              //                           height: 35,
                              //                           padding: EdgeInsets.only(left:12),
                              //                           decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                             BoxShadow(
                              //                                 blurRadius: 2.0,
                              //                                 color: Colors.black54,
                              //                                 offset: Offset(0.0, 0.5) ),
                              //                           ], borderRadius: BorderRadius.circular(5)),
                              //                           width: ResponsiveHelper.isMobile(context)? width*0.35:tabWidth*0.35,
                              //                           child: TextFormField(
                              //                             onTap:(){
                              //                               showGeneralDialog(
                              //
                              //                                   barrierColor: Colors.black.withOpacity(0.5),
                              //                                   transitionBuilder: (context, a1, a2, widget) {
                              //                                     return Transform.scale(
                              //                                       scale: a1.value,
                              //                                       child: Opacity(
                              //                                           opacity: a1.value,
                              //                                           child: Dialog(
                              //                                               clipBehavior: Clip.hardEdge,
                              //                                               shape: RoundedRectangleBorder(
                              //                                                 borderRadius: BorderRadius.circular(15),
                              //                                               ),
                              //                                               insetPadding: const EdgeInsets.symmetric(horizontal: 25),
                              //                                               backgroundColor: Colors.white,
                              //                                               child:SizedBox(
                              //                                                 height: ResponsiveHelper.isMobile(context)?height*0.3:tabWidth*0.45,
                              //                                                 width: ResponsiveHelper.isMobile(context)?null:tabWidth*0.9,
                              //                                                 child:  Column(
                              //                                                   mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                              //                                                   children: [
                              //                                                     Flexible(
                              //                                                       child: Padding(
                              //                                                           padding: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 10.0),
                              //                                                           child: CupertinoTheme(
                              //                                                             data: CupertinoThemeData(
                              //                                                               textTheme: CupertinoTextThemeData(
                              //                                                                   dateTimePickerTextStyle: BlackBottomHeadStyle18500
                              //                                                               ),
                              //                                                             ),
                              //                                                             child: CupertinoDatePicker(
                              //                                                               mode: CupertinoDatePickerMode.dateAndTime,
                              //                                                               dateOrder: DatePickerDateOrder.dmy,
                              //                                                               use24hFormat: false,
                              //                                                               minuteInterval: 1,
                              //                                                               minimumDate:DateTime.now(),
                              //                                                               initialDateTime: OfferExpiryController.text.isEmpty ?DateTime.now():ExDTime,
                              //                                                               onDateTimeChanged: (DateTime newDateTime) {
                              //                                                                 setState((){
                              //                                                                   ExDTime = newDateTime;
                              //                                                                   print(ExDTime);
                              //                                                                 });
                              //                                                               },
                              //                                                               maximumDate: DateTime.now().add(const Duration(days: 720)),
                              //                                                             ),
                              //                                                           )
                              //                                                       ),
                              //                                                     ),
                              //                                                     Padding(
                              //                                                       padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10),
                              //                                                       child: ElevatedButton(
                              //                                                         style: ButtonStyle(
                              //                                                             backgroundColor: MaterialStateProperty.all(Constants.primaryColor1 ),
                              //                                                             elevation: MaterialStateProperty.all(0),
                              //                                                             foregroundColor: MaterialStateProperty.all(Colors.transparent),
                              //                                                             overlayColor: MaterialStateProperty.all(Colors.transparent),
                              //                                                             shadowColor: MaterialStateProperty.all(Colors.transparent),
                              //                                                             shape: MaterialStateProperty.all(RoundedRectangleBorder(
                              //                                                               borderRadius: BorderRadius.circular(8),
                              //                                                             ),)
                              //                                                         ),
                              //                                                         onPressed: () {
                              //                                                           setState((){
                              //                                                             OfferExpiryDateTime = ExDTime;
                              //
                              //                                                             final  STime = DateFormat('dd-MMM-yyyy hh:mm a').format(ExDTime!);
                              //                                                             OfferExpiryController.text = STime ;
                              //                                                             final  SDateTime = DateFormat('dd-MM-yyyy HH:mm').format(ExDTime!);
                              //                                                             offerExpiryDateTime = SDateTime;
                              //                                                             for(var i = 0 ;i< ItemsList.length ; i++){
                              //                                                               ItemsList[i]["item_condition"]["expiry"].text  = SDateTime;
                              //                                                               ItemsList[i]["item_condition"]["ExpiryDateTime"]  = ExDTime;
                              //                                                             }
                              //                                                           });
                              //                                                           Navigator.pop(context);
                              //                                                         },
                              //                                                         child: const Padding(
                              //                                                           padding: EdgeInsets.all(12.0),
                              //                                                           child: Center(
                              //                                                             child: Text(
                              //                                                               'Save',
                              //                                                               style: WhiteSubTitleStyle,
                              //                                                               textAlign: TextAlign.center,
                              //                                                             ),
                              //                                                           ),
                              //                                                         ),
                              //                                                       ),
                              //                                                     ),
                              //                                                   ],
                              //                                                 ),
                              //                                               )
                              //                                           )),
                              //                                     );
                              //                                   },
                              //                                   transitionDuration: const Duration(milliseconds: 300),
                              //                                   barrierDismissible: true,
                              //                                   barrierLabel: '',
                              //                                   context: context,
                              //                                   pageBuilder: (BuildContext context, Animation<double> animation,
                              //                                       Animation<double> secondaryAnimation) {
                              //                                     return const Text('');
                              //                                   }
                              //                               );
                              //                             },
                              //                             readOnly: true,
                              //                             controller: OfferExpiryController,
                              //                             keyboardType: TextInputType.text,
                              //                             decoration: InputDecoration(hintText: "Expiry", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                               focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                               enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                               floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                               contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                               constraints: BoxConstraints(maxWidth: ResponsiveHelper.isMobile(context)?width:tabWidth),
                              //                               border: const OutlineInputBorder(),
                              //                               // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                             ),
                              //                             style: Black87HintStyle,
                              //                           ),
                              //                         ),
                              //                         Positioned(
                              //                             bottom:1,left:2,
                              //                             child: InkWell(
                              //                               onTap:(){
                              //                                 setState((){
                              //                                   ExDTime=null;
                              //                                   offerExpiryDateTime = "";
                              //                                   OfferExpiryController.clear();
                              //                                   isExpiryVisible = false;
                              //                                 });
                              //                               },
                              //                               child: CircleAvatar(
                              //                                 radius:8,
                              //                                 backgroundColor: Color(0x3389F6B9) ,
                              //                                 child: Center(
                              //                                     child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                 ),
                              //                               ),
                              //                             )),
                              //                       ],
                              //                     ),
                              //                     const SizedBox(height:5,),
                              //                     const Padding(
                              //                       padding: EdgeInsets.only(left:8.0),
                              //                       child: Text("Expiry", style: BlackDescStyle,),
                              //                     ),
                              //                   ],
                              //                 ),
                              //               ):SizedBox(),
                              //               isOfferFromLocationVisible == false ? SizedBox():    Column(
                              //                 crossAxisAlignment: CrossAxisAlignment.start,
                              //                 children: [
                              //                   Stack(
                              //                     children: [
                              //                       Container(
                              //                         height: 35,margin: EdgeInsets.only(right:12) ,
                              //                         padding: EdgeInsets.only(left:12),
                              //                         decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                           BoxShadow(
                              //                               blurRadius: 2.0,
                              //                               color: Colors.black54,
                              //                               offset: Offset(0.0, 0.5) ),
                              //                         ], borderRadius: BorderRadius.circular(5)),
                              //                         width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                              //                         child: TextFormField(
                              //                           controller: OfferFromLocationController,
                              //                           onTap:() async {
                              //
                              //                             Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true))).then((value) {
                              //                               setState(() {
                              //                                 OfferFromLocationController.text=value.toString();
                              //                               });
                              //                             });
                              //
                              //                             //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                              //                           },
                              //                           readOnly: true,
                              //                           keyboardType: TextInputType.text,
                              //                           decoration: InputDecoration(hintText:"From location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                             focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                             contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                             border: const OutlineInputBorder(),
                              //                             // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                           ),
                              //                           style: Black87HintStyle,
                              //                         ),
                              //                       ),
                              //                       Positioned(
                              //                           bottom:1,left:2,
                              //                           child: InkWell(
                              //                             onTap:(){
                              //                               setState((){
                              //                                 OfferFromLocationController.clear();
                              //                                 isOfferFromLocationVisible = false;
                              //                               });
                              //                             },
                              //                             child: CircleAvatar(
                              //                               radius:8,
                              //                               backgroundColor: Color(
                              //                                   0x3389F6B9) ,
                              //                               child: Center(
                              //                                   child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                               ),
                              //                             ),
                              //                           )),
                              //                       isOfferToLocationVisible==true?SizedBox(): Positioned(
                              //                           top:0,right:5,
                              //                           child: InkWell(
                              //                             onTap:(){
                              //                               setState((){
                              //                                 isOfferToLocationVisible=true ;
                              //                               });
                              //                             },
                              //                             child: CircleAvatar(
                              //                               radius:8,
                              //                               backgroundColor: Constants.primaryColor1 ,
                              //                               child: Center(
                              //                                   child:Icon(Icons.add,color: Colors.white,size:14,)
                              //                               ),
                              //                             ),
                              //                           ))
                              //                     ],
                              //                   ),
                              //                   const SizedBox(height:5,),
                              //                   Padding(
                              //                     padding: EdgeInsets.only(left:4.0),
                              //                     child: Text("From location", style: BlackDescStyle,),
                              //                   ),
                              //                 ],
                              //               ),
                              //               isOfferToLocationVisible == false ? SizedBox():   Column(
                              //                 crossAxisAlignment: CrossAxisAlignment.start,
                              //                 children: [
                              //                   Stack(
                              //                     children: [
                              //                       Container(
                              //                         height: 35,
                              //                         margin: EdgeInsets.only(right:12) ,
                              //                         padding: EdgeInsets.only(left:12),
                              //                         decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                           BoxShadow(
                              //                               blurRadius: 2.0,
                              //                               color: Colors.black54,
                              //                               offset: Offset(0.0, 0.5) ),
                              //                         ], borderRadius: BorderRadius.circular(5)),
                              //                         width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                              //                         child: TextFormField(
                              //                           controller: OfferToLocationController,
                              //                           keyboardType: TextInputType.text,
                              //                           onTap:() async {
                              //
                              //                             Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201),isAppPlaceView: true ))).then((value) {
                              //                               setState(() {
                              //                                 OfferToLocationController.text=value.toString();
                              //                               });
                              //                             });
                              //
                              //                             //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                              //                           },
                              //                           readOnly: true,
                              //                           decoration: InputDecoration(hintText:"To location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                             focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                             contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                             border: const OutlineInputBorder(),
                              //                             // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                           ),
                              //                           style: Black87HintStyle,
                              //                         ),
                              //                       ),
                              //                       Positioned(
                              //                           bottom:1,left:2,
                              //                           child: InkWell(
                              //                             onTap:(){
                              //                               setState((){
                              //                                 OfferToLocationController.clear();
                              //                                 isOfferToLocationVisible = false;
                              //                               });
                              //                             },
                              //                             child: CircleAvatar(
                              //                               radius:8,
                              //                               backgroundColor: Color(
                              //                                   0x3389F6B9) ,
                              //                               child: Center(
                              //                                   child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                               ),
                              //                             ),
                              //                           )),
                              //                       isOfferAtLocationVisible==true?SizedBox():    Positioned(
                              //                           top:1,right:2,
                              //                           child: InkWell(
                              //                             onTap:(){
                              //                               setState((){
                              //                                 isOfferAtLocationVisible=true ;
                              //                               });
                              //                             },
                              //                             child: CircleAvatar(
                              //                               radius:8,
                              //                               backgroundColor: Constants.primaryColor1 ,
                              //                               child: Center(
                              //                                   child:Icon(Icons.add,color: Colors.white,size:14,)
                              //                               ),
                              //                             ),
                              //                           ))
                              //                     ],
                              //                   ),
                              //                   const SizedBox(height:5,),
                              //                   Padding(
                              //                     padding: EdgeInsets.only(left:4.0),
                              //                     child: Text("To location", style: BlackDescStyle,),
                              //                   ),
                              //                 ],
                              //               ),
                              //               isOfferAtLocationVisible  == false ? SizedBox():     Column(
                              //                 crossAxisAlignment: CrossAxisAlignment.start,
                              //                 children: [
                              //                   Stack(
                              //                     children: [
                              //                       Container(
                              //                         height: 35,margin: EdgeInsets.only(right:12) ,
                              //                         padding: EdgeInsets.only(left:12),
                              //                         decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                           BoxShadow(
                              //                               blurRadius: 2.0,
                              //                               color: Colors.black54,
                              //                               offset: Offset(0.0, 0.5) ),
                              //                         ], borderRadius: BorderRadius.circular(5)),
                              //                         width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                              //                         child: TextFormField(
                              //                           controller:OfferAtLocationController,
                              //                           onTap:() async {
                              //
                              //                             Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true))).then((value) {
                              //                               setState(() {
                              //                                 OfferAtLocationController.text=value.toString();
                              //                               });
                              //                             });
                              //
                              //                             //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                              //                           },
                              //                           readOnly: true,
                              //                           keyboardType: TextInputType.text,
                              //                           decoration: InputDecoration(hintText:"At location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                             focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                             contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                             border: const OutlineInputBorder(),
                              //                             // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                           ),
                              //                           style: Black87HintStyle,
                              //                         ),
                              //                       ),
                              //                       Positioned(
                              //                           bottom:1,left:2,
                              //                           child: InkWell(
                              //                             onTap:(){
                              //                               setState((){
                              //                                 OfferAtLocationController.clear();
                              //                                 isOfferAtLocationVisible = false;
                              //                               });
                              //                             },
                              //                             child: CircleAvatar(
                              //                               radius:8,
                              //                               backgroundColor: Color(
                              //                                   0x3389F6B9) ,
                              //                               child: Center(
                              //                                   child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                               ),
                              //                             ),
                              //                           )),
                              //
                              //                     ],
                              //                   ),
                              //                   const SizedBox(height:5,),
                              //                   Padding(
                              //                     padding: EdgeInsets.only(left:4.0),
                              //                     child: Text("At location", style: BlackDescStyle,),
                              //                   ),
                              //                 ],
                              //               ),
                              //               const SizedBox(width: 8,),
                              //             ],
                              //           )),
                              //     ],
                              //   ),
                              // ),

                              // TODO Item Details
                              ListView.builder(
                                shrinkWrap: true,
                                itemCount: ItemsList.isEmpty?1:ItemsList.length,
                                physics: NeverScrollableScrollPhysics(),
                                itemBuilder: (context, index) {
                                  var itemdata = ItemsList[index];
                                  return   Container(
                                    color:Colors.white,
                                    child: Padding(
                                      padding: const EdgeInsets.symmetric(horizontal: 15,vertical: 7),
                                      child: Column(
                                        mainAxisAlignment: MainAxisAlignment.start,
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          ItemsList.isEmpty || ItemsList[0]["name"].text.isEmpty || ItemsList[0]["name"].text == ""?
                                          Text("Tap Edit To Enter Item Details",style:BlackSubCardTitle)
                                              :
                                          Container(
                                              width:isMobile?width:tabWidth,
                                              margin:EdgeInsets.only(bottom:10),
                                              child: Row(
                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                  children:[
                                                    SizedBox(
                                                      width:isMobile?width*0.6:tabWidth*0.6,
                                                      child: Column(
                                                          mainAxisAlignment: MainAxisAlignment.start,
                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                          children:[
                                                            Row(
                                                              children: [
                                                                SizedBox(
                                                                    width:isMobile?width*0.52:tabWidth*0.52,
                                                                    child: Text("${itemdata["name"].text}",style:BlackSubTitleStyle,)),
                                                                4.width,
                                                                InkWell(
                                                                  onTap:(){
                                                                    setState((){
                                                                      List selectedItemsPersonList = [];
                                                                      List<UnitListData> TempUnitList = [];
                                                                      ItemsList.add({
                                                                        "ItemId": "",
                                                                        "name":TextEditingController(text: ""),
                                                                        "desc":TextEditingController(text: ""),
                                                                        "price":TextEditingController(text: ""),
                                                                        "unit":TextEditingController(text: ""),
                                                                        "AdvancePrice" : TextEditingController(text : ""),
                                                                        "AdvanceUnit" : TextEditingController(text : ""),
                                                                        "MaintenancePrice" : TextEditingController(text : ""),
                                                                        "MaintenanceUnit" : TextEditingController(text : ""),


                                                                        "filterGetUnitList" : TempUnitList,
                                                                        "showOtherUnit" : false,
                                                                        "isLoadNewUnit" : false,
                                                                        "selectedUnitIndex" : -1,
                                                                        "SelectedUnitId" : "",

                                                                        "filterGetUnitListMain" : TempUnitList,
                                                                        "showOtherUnitMain" : false,
                                                                        "isLoadNewUnitMain" : false,
                                                                        "selectedUnitIndexMain" : -1,
                                                                        "SelectedUnitIdMain" : "",

                                                                        "filterGetUnitListAdva" : TempUnitList,
                                                                        "showOtherUnitAdva" : false,
                                                                        "isLoadNewUnitAdva" : false,
                                                                        "selectedUnitIndexAdva" : -1,
                                                                        "SelectedUnitIdAdva" : "",
                                                                        "type" : "new",

                                                                        "quantity":1,
                                                                        "currency":"INR",
                                                                        "addon":false,
                                                                        "required":false,
                                                                        "toggle_state":false,

                                                                        "media":[],
                                                                        "isLoadingFile":false,
                                                                        "fileUrl":[],

                                                                        "item_condition":{
                                                                          "ItemConditionId": "",
                                                                          "period":TextEditingController(text: "${OfferPeriodController.text}"),
                                                                          "periodTime":TextEditingController(text: "${OfferPeriodTimeController.text}"),
                                                                          "periodicity":selectedPeriodicityValue,
                                                                          "fromperiod":offerPeriodFromDate.toString(),
                                                                          "toperiod":offerPeriodToDate.toString(),
                                                                          "duration":TextEditingController(text: OfferDurationController.text),
                                                                          "fromperiodtime":offerPeriodFromTime.toString(),
                                                                          "toperiodtime":offerPeriodToTime.toString(),
                                                                          "durationoftime":"",
                                                                          "fromlocation" : TextEditingController(text:OfferFromLocationController.text),
                                                                          "tolocation" :  TextEditingController(text :OfferToLocationController.text),
                                                                          "atlocation" : TextEditingController(text:OfferAtLocationController.text),
                                                                          "servicepersons": selectedItems,
                                                                          "priority":"",
                                                                          "expiry":TextEditingController(text: offerExpiryDateTime),
                                                                          "ExpiryDateTime" : ExDTime,
                                                                          "FromPeriodDateFill" : OfferFromDate,
                                                                          "ToPeriodDateFill" : OfferToDate,
                                                                          "FromPeriodTimeFill" : OfferFromTime,
                                                                          "ToPeriodTimeFIll" : OfferToTime,
                                                                        },

                                                                        "showItemPriceMain":true,
                                                                        "showMediaData":true,
                                                                        "showItemQty":true,
                                                                        "isShowItem": true,
                                                                        "showItemPrice2":false,
                                                                        "showItemPrice3":false,
                                                                        "showItemCondition": false,
                                                                        "showItemPeriodicity" :true,
                                                                        "showItemPeriod" :true,
                                                                        "showItemPeriodTime" :true,
                                                                        "isItemSinglePeriodSelect" :true,
                                                                        "showItemDuration" :true,
                                                                        "showItemPriority" :true,
                                                                        "showItemExpiry" :true,
                                                                        "showItemFromLocation" :true,
                                                                        "showItemTOLocation" :false,
                                                                        "showItemAtLocation" :false,

                                                                      });
                                                                    });
                                                                  },
                                                                  child: CircleAvatar(
                                                                    radius: 10,
                                                                    backgroundColor:primaryColor,
                                                                    child: Center(
                                                                      child: Icon(Icons.add, color: Colors.white, size: 20),
                                                                    ),
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                            5.height,
                                                            Text("${itemdata["desc"].text}",style: Black87DescStyle,textAlign: TextAlign.start,) ,

                                                            itemdata["price"].text.isEmpty || itemdata["price"].text == ""?SizedBox():
                                                            Padding(
                                                              padding: const EdgeInsets.symmetric(vertical: 5.0),
                                                              child: Text("Rs. ${itemdata["price"].text} ${itemdata["unit"].text}",style:BlackSubTitleStyle,),
                                                            ),

                                                          ]
                                                      ),
                                                    ),
                                                    Stack(

                                                      children: [
                                                        InkWell(
                                                          onTap: () async {
                                                            itemdata["media"].isEmpty?
                                                            null:
                                                            ImageGalleryView(context, itemdata["media"], itemdata["fileUrl"],setState);
                                                            //Navigator.push(context, MaterialPageRoute(builder: (context) => GalleryScreenNewOffer(MediaList: data["media"],UrlList: data["fileUrl"],)));
                                                          },
                                                          child: itemdata["media"].isEmpty
                                                              ? Container(
                                                              height: isMobile?width*0.3:tabWidth*0.3,
                                                              width:isMobile?width*0.3:tabWidth*0.3,
                                                              padding: const EdgeInsets.all(0),
                                                              margin: EdgeInsets.only(bottom:10),
                                                              alignment: Alignment.center,
                                                              decoration: BoxDecoration(
                                                                  color: Colors.white,
                                                                  borderRadius: BorderRadius.circular(5)),
                                                              child: Column(
                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                children:  [
                                                                  SizedBox(
                                                                    height: 5,
                                                                  ),
                                                                  Text(
                                                                    "UPLOAD MEDIA",
                                                                    style: uploadMetaStyle,
                                                                    textAlign: TextAlign.center,
                                                                  ),

                                                                ],
                                                              ))
                                                              : Container(      margin: EdgeInsets.only(bottom:10),
                                                            height: isMobile?width*0.3:tabWidth*0.3,
                                                            width: isMobile?width*0.3:tabWidth*0.3, child:
                                                            "${itemdata["media"][0]["name"].toString().substring( itemdata["media"][0]["name"].toString().lastIndexOf('.'))}" == ".mp4"?Image.asset("assets/mp4placeholder.png",fit: BoxFit.cover):
                                                            Image.network(itemdata["fileUrl"][0], fit: BoxFit.fill),
                                                          ),
                                                        ),
                                                        itemdata["media"].isEmpty ||  itemdata["media"].length == 1 ?SizedBox():
                                                        InkWell(
                                                          onTap:(){
                                                            ImageGalleryView(context, itemdata["media"], itemdata["fileUrl"],setState);
                                                            //  Navigator.push(context, MaterialPageRoute(builder: (context) => GalleryScreenNewOffer(MediaList: data["media"],UrlList: data["fileUrl"])));
                                                          },
                                                          child: Container(
                                                              margin: EdgeInsets.only(bottom:10),
                                                              height: isMobile?width*0.3:tabWidth*0.3,
                                                              width: isMobile?width*0.3:tabWidth*0.3,
                                                              padding: const EdgeInsets.all(0),
                                                              alignment: Alignment.center,
                                                              decoration: BoxDecoration(
                                                                  color: Colors.transparent,
                                                                  borderRadius: BorderRadius.circular(5)),
                                                              child:Center(
                                                                  child:Text("+${itemdata["media"].length -1}",style: BlackTitle500height,)
                                                              )
                                                          ),
                                                        ),
                                                        Positioned(
                                                            left:20,right:20,bottom:0,
                                                            child:
                                                            Container(
                                                              height:30,
                                                              decoration: BoxDecoration(
                                                                borderRadius: BorderRadius.circular(3),
                                                                color: primaryColor,
                                                              ),
                                                              child: Row(
                                                                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                children: [
                                                                  InkWell(
                                                                      onTap:(){
                                                                        setState((){
                                                                          itemdata["quantity"]==1? Constants.showToast("Minimum QTY is 1"):  itemdata["quantity"] --;
                                                                        });
                                                                      },
                                                                      child:Icon(Icons.remove,color:Colors.white,size:15)
                                                                  ),
                                                                  Text(itemdata["quantity"]==0?"Qty":"${itemdata["quantity"]}",style: White13400Style,),
                                                                  InkWell(
                                                                      onTap:(){
                                                                        setState((){
                                                                          itemdata["quantity"] ++;
                                                                        });
                                                                      },
                                                                      child:Icon(Icons.add,color:Colors.white,size:15)
                                                                  )
                                                                ],
                                                              ),
                                                            )
                                                        ),
                                                      ],
                                                    ),

                                                  ]
                                              )
                                          ),

                                          Row(
                                              mainAxisAlignment: MainAxisAlignment.end,
                                              children:[
                                                EditBtn((){
                                                  Get.bottomSheet(
                                                      elevation: 0,  shape: RoundedRectangleBorder(
                                                      borderRadius: BorderRadius.only(topRight: Radius.circular(20),topLeft: Radius.circular(20))
                                                  ),
                                                      isDismissible: true,isScrollControlled: true,
                                                      StatefulBuilder(builder: (context, setModalState) {
                                                        return  Container(
                                                          decoration: BoxDecoration(
                                                              color:Colors.white,
                                                              borderRadius: BorderRadius.only(topRight: Radius.circular(20),topLeft: Radius.circular(20))
                                                          ),
                                                          child: Stack(
                                                            children: [
                                                              ListView.builder(
                                                                itemCount:ItemsList.length,
                                                                shrinkWrap: true,     padding: EdgeInsets.only(top:30),
                                                                physics: ScrollPhysics(),
                                                                itemBuilder: (context, index) {
                                                                  var data = ItemsList[index];
                                                                  return Container(
                                                                    color:  Colors.white,

                                                                    child: Column(
                                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                                      children: [
                                                                        Row(
                                                                          mainAxisAlignment: MainAxisAlignment.start,
                                                                          crossAxisAlignment: CrossAxisAlignment.start,
                                                                          children: [
                                                                            const SizedBox(width: 10,),
                                                                            Column(
                                                                              children: [
                                                                                Stack(
                                                                                  children: [
                                                                                    Container(
                                                                                      height: data["name"].text.length < 15 ?35:null,
                                                                                      decoration: BoxDecoration(
                                                                                          color: Constants.white,
                                                                                          borderRadius: BorderRadius.circular(5)),
                                                                                      width: ResponsiveHelper.isMobile(context)? width*0.4:tabWidth*0.4,
                                                                                      margin: EdgeInsets.only(left: 5,right:5,top: 10),
                                                                                      child: ConstrainedBox(
                                                                                        constraints: BoxConstraints(
                                                                                            maxHeight: 150.0
                                                                                        ),
                                                                                        child: TextFormField(
                                                                                          controller: data["name"],
                                                                                          maxLines: null,
                                                                                          decoration: InputDecoration(
                                                                                            hintText: "Enter Item Name",
                                                                                            fillColor:  Colors.white,
                                                                                            hintStyle:  Constants.hintStyle,
                                                                                            focusedBorder: OutlineInputBorder(borderSide: BorderSide(width: 1.0, color: Constants.greyFieldColor), borderRadius: BorderRadius.circular(5)),
                                                                                            enabledBorder: OutlineInputBorder(borderSide:  BorderSide(width: 1.0, color: Constants.greyFieldColor), borderRadius: BorderRadius.circular(5)),

                                                                                            contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                            border: const OutlineInputBorder(),
                                                                                            // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                          ),
                                                                                          style: Black87HintStyle,),
                                                                                      ),
                                                                                    ),
                                                                                    index==0?Positioned(
                                                                                      top:10,right:0,
                                                                                      child: InkWell(
                                                                                        onTap:(){
                                                                                          setState((){
                                                                                            List selectedItemsPersonList = [];
                                                                                            List<UnitListData> TempUnitList = [];
                                                                                            ItemsList.add({
                                                                                              "ItemId": "",
                                                                                              "name":TextEditingController(text: ""),
                                                                                              "desc":TextEditingController(text: ""),
                                                                                              "price":TextEditingController(text: ""),
                                                                                              "unit":TextEditingController(text: ""),
                                                                                              "AdvancePrice" : TextEditingController(text : ""),
                                                                                              "AdvanceUnit" : TextEditingController(text : ""),
                                                                                              "MaintenancePrice" : TextEditingController(text : ""),
                                                                                              "MaintenanceUnit" : TextEditingController(text : ""),


                                                                                              "filterGetUnitList" : TempUnitList,
                                                                                              "showOtherUnit" : false,
                                                                                              "isLoadNewUnit" : false,
                                                                                              "selectedUnitIndex" : -1,
                                                                                              "SelectedUnitId" : "",

                                                                                              "filterGetUnitListMain" : TempUnitList,
                                                                                              "showOtherUnitMain" : false,
                                                                                              "isLoadNewUnitMain" : false,
                                                                                              "selectedUnitIndexMain" : -1,
                                                                                              "SelectedUnitIdMain" : "",

                                                                                              "filterGetUnitListAdva" : TempUnitList,
                                                                                              "showOtherUnitAdva" : false,
                                                                                              "isLoadNewUnitAdva" : false,
                                                                                              "selectedUnitIndexAdva" : -1,
                                                                                              "SelectedUnitIdAdva" : "",
                                                                                              "type" : "new",

                                                                                              "quantity":1,
                                                                                              "currency":"INR",
                                                                                              "addon":false,
                                                                                              "required":false,
                                                                                              "toggle_state":false,

                                                                                              "media":[],
                                                                                              "isLoadingFile":false,
                                                                                              "fileUrl":[],

                                                                                              "item_condition":{
                                                                                                "ItemConditionId": "",
                                                                                                "period":TextEditingController(text: "${OfferPeriodController.text}"),
                                                                                                "periodTime":TextEditingController(text: "${OfferPeriodTimeController.text}"),
                                                                                                "periodicity":selectedPeriodicityValue,
                                                                                                "fromperiod":offerPeriodFromDate.toString(),
                                                                                                "toperiod":offerPeriodToDate.toString(),
                                                                                                "duration":TextEditingController(text: OfferDurationController.text),
                                                                                                "fromperiodtime":offerPeriodFromTime.toString(),
                                                                                                "toperiodtime":offerPeriodToTime.toString(),
                                                                                                "durationoftime":"",
                                                                                                "fromlocation" : TextEditingController(text:OfferFromLocationController.text),
                                                                                                "tolocation" :  TextEditingController(text :OfferToLocationController.text),
                                                                                                "atlocation" : TextEditingController(text:OfferAtLocationController.text),
                                                                                                "servicepersons": selectedItems,
                                                                                                "priority":"",
                                                                                                "expiry":TextEditingController(text: offerExpiryDateTime),
                                                                                                "ExpiryDateTime" : ExDTime,
                                                                                                "FromPeriodDateFill" : OfferFromDate,
                                                                                                "ToPeriodDateFill" : OfferToDate,
                                                                                                "FromPeriodTimeFill" : OfferFromTime,
                                                                                                "ToPeriodTimeFIll" : OfferToTime,
                                                                                              },

                                                                                              "showItemPriceMain":true,
                                                                                              "showMediaData":true,
                                                                                              "showItemQty":true,
                                                                                              "isShowItem": true,
                                                                                              "showItemPrice2":false,
                                                                                              "showItemPrice3":false,
                                                                                              "showItemCondition": false,
                                                                                              "showItemPeriodicity" :true,
                                                                                              "showItemPeriod" :true,
                                                                                              "showItemPeriodTime" :true,
                                                                                              "isItemSinglePeriodSelect" :true,
                                                                                              "showItemDuration" :true,
                                                                                              "showItemPriority" :true,
                                                                                              "showItemExpiry" :true,
                                                                                              "showItemFromLocation" :true,
                                                                                              "showItemTOLocation" :false,
                                                                                              "showItemAtLocation" :false,

                                                                                            });
                                                                                          });setModalState((){});
                                                                                        },
                                                                                        child: CircleAvatar(
                                                                                          radius: 10,
                                                                                          backgroundColor: primaryColor,
                                                                                          child: Center(
                                                                                            child: Icon(Icons.add, color: Colors.white, size: 20),
                                                                                          ),
                                                                                        ),
                                                                                      ),
                                                                                    ): Positioned(
                                                                                      top:10,right:0,
                                                                                      child: InkWell(
                                                                                        onTap:(){
                                                                                          setState((){
                                                                                            ItemsList.removeAt(index);
                                                                                          });setModalState((){});
                                                                                        },
                                                                                        child: CircleAvatar(
                                                                                          radius: 10,
                                                                                          backgroundColor:primaryColor,
                                                                                          child: Center(
                                                                                            child:Icon(Icons.remove, color: Colors.white, size: 20),
                                                                                          ),
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                  ],
                                                                                ),
                                                                                Container(
                                                                                  height: data["desc"].text.length < 15 ?35:null,
                                                                                  decoration: BoxDecoration(
                                                                                      color: Constants.white,
                                                                                      borderRadius: BorderRadius.circular(5)),
                                                                                  width: ResponsiveHelper.isMobile(context)? width*0.4:tabWidth*0.4,
                                                                                  margin: EdgeInsets.only(left: 5,right:5,top: 10),
                                                                                  child: ConstrainedBox(
                                                                                    constraints: BoxConstraints(
                                                                                        maxHeight: 150.0
                                                                                    ),
                                                                                    child: TextFormField(
                                                                                      controller: data["desc"],
                                                                                      maxLines: null,
                                                                                      decoration: InputDecoration(
                                                                                        hintText: "Enter Description",
                                                                                        fillColor:  Colors.white,
                                                                                        hintStyle: Constants.hintStyle,
                                                                                        focusedBorder: OutlineInputBorder(borderSide: BorderSide(width: 1.0, color: Constants.greyFieldColor), borderRadius: BorderRadius.circular(5)),
                                                                                        enabledBorder: OutlineInputBorder(borderSide:  BorderSide(width: 1.0, color: Constants.greyFieldColor), borderRadius: BorderRadius.circular(5)),
                                                                                        floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                        contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                        border: const OutlineInputBorder(),
                                                                                        // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                      ),
                                                                                      style: Black87HintStyle,
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                              ],
                                                                            ),

                                                                            const Spacer(),
                                                                            Column(
                                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                                              mainAxisAlignment: MainAxisAlignment.start,
                                                                              children:[
                                                                                SizedBox(height: 10,),
                                                                                InkWell(
                                                                                    onTap:(){
                                                                                      setState(() {
                                                                                        data["required"] = !data["required"];
                                                                                        Constants.showToast( data["required"]  == true ?"REQUIRED Enabled":"REQUIRED Disabled");
                                                                                      });setModalState((){});
                                                                                    },
                                                                                    child: Text("REQUIRED", style: TextStyle(color:data["required"] ==true?primaryColor: Colors.black38, fontWeight:data["required"] ==true ?FontWeight.w700:FontWeight.w500, fontSize: 14),)),

                                                                                SizedBox(height: 20,),
                                                                                InkWell(
                                                                                    onTap:(){
                                                                                      setState(() {
                                                                                        data["addon"] = !data["addon"];
                                                                                        Constants.showToast( data["addon"]  == true ?"ADDON Enabled":"ADDON Disabled");
                                                                                      });setModalState((){});
                                                                                    },
                                                                                    child: Text("ADD ON", style: TextStyle(color: data["addon"] == true?primaryColor: Colors.black38, fontWeight:data["addon"] ==true ?FontWeight.w700: FontWeight.w500, fontSize: 14), )),

                                                                              ],
                                                                            ),
                                                                            const SizedBox(width: 10,),
                                                                            data["showMediaData"] == false ?   DottedBorder(
                                                                              dashPattern: const [6, 2],
                                                                              strokeWidth: 1.5,
                                                                              color: Constants.primaryColor1,
                                                                              borderType: BorderType.RRect,
                                                                              radius: const Radius.circular(2),
                                                                              padding: EdgeInsets.symmetric(horizontal: 7),
                                                                              child: Column(
                                                                                children: [
                                                                                  10.height,
                                                                                  Text("Add back \nImage",style: BlackDescStyle,textAlign: TextAlign.center,),
                                                                                  5.height,
                                                                                  InkWell(
                                                                                    onTap:(){
                                                                                      setState(() {
                                                                                        data["showMediaData"] = true;
                                                                                        data["media"] = [];
                                                                                        data["fileUrl"] = [];
                                                                                      });setModalState((){});
                                                                                    },
                                                                                    child: CircleAvatar(
                                                                                      radius:8,
                                                                                      backgroundColor: primaryColor ,
                                                                                      child: Center(
                                                                                          child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                                      ),
                                                                                    ),
                                                                                  ),
                                                                                  10.height,
                                                                                ],
                                                                              ),
                                                                            ):  Column(

                                                                              children: [
                                                                                Row(
                                                                                  children: [
                                                                                    DottedBorder(
                                                                                      dashPattern: const [6, 2],
                                                                                      strokeWidth: 1.5,
                                                                                      color: Constants.primaryColor1,
                                                                                      borderType: BorderType.RRect,
                                                                                      radius: const Radius.circular(2),
                                                                                      child: Stack(

                                                                                        children: [
                                                                                          InkWell(
                                                                                            onTap: () async {
                                                                                              data["media"].isEmpty?
                                                                                              ShowPickerBottomSheet(context,
                                                                                                  GalleryOnTap: () async{
                                                                                                    FilePickerResult? result = await FilePicker.platform.pickFiles(
                                                                                                      type: FileType.custom,
                                                                                                      allowMultiple: false,
                                                                                                      allowedExtensions: ['jpg', 'png', 'mp4',"jpeg"],
                                                                                                    );
                                                                                                    if (result != null) {
                                                                                                      PlatformFile file = result.files.first;
                                                                                                      setState(() {
                                                                                                        data["isLoadingFile"] = true;
                                                                                                      },);setModalState((){});
                                                                                                      ThatZalApis.UploadFile(file: file.path).then((value)  {
                                                                                                        if(value != null){
                                                                                                          if(value["status"] == true){
                                                                                                            setState(() {
                                                                                                              data["isLoadingFile"] = false;
                                                                                                              data["media"] = [{
                                                                                                                "file":"${value["result"]["id"]}",
                                                                                                                "name" : "${value["result"]["name"]}"
                                                                                                              }];
                                                                                                              data["fileUrl"] = ["${value["result"]["file"]}"];
                                                                                                            });setModalState((){});
                                                                                                          }
                                                                                                        }
                                                                                                      });
                                                                                                    } else {
                                                                                                      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Nothing is selected')));
                                                                                                    }

                                                                                                    Navigator.of(context).pop();
                                                                                                  },
                                                                                                  CameraOnTap: ()async{
                                                                                                    Navigator.push(context, MaterialPageRoute(builder: (context) => UploadImageCameraScreen())).then((value) {
                                                                                                      Navigator.of(context).pop();
                                                                                                      if (value != null) {
                                                                                                        ConstantFun.imageProfileCropper(path: value).then((file) async {
                                                                                                          setState(() {
                                                                                                            data["isLoadingFile"] = true;
                                                                                                          },);setModalState((){});
                                                                                                          ThatZalApis.UploadFile(file: file.path).then((UploadImage)  {
                                                                                                            if(UploadImage != null){
                                                                                                              if(UploadImage["status"] == true){
                                                                                                                setState(() {
                                                                                                                  data["isLoadingFile"] = false;
                                                                                                                  data["media"] = [{
                                                                                                                    "file":"${UploadImage["result"]["id"]}",
                                                                                                                    "name" : "${UploadImage["result"]["name"]}"
                                                                                                                  }];
                                                                                                                  data["fileUrl"] = ["${UploadImage["result"]["file"]}"];
                                                                                                                });setModalState((){});
                                                                                                              }
                                                                                                            }
                                                                                                          });
                                                                                                        });
                                                                                                      }else{
                                                                                                        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Nothing is selected')));
                                                                                                      }
                                                                                                    });
                                                                                                  }
                                                                                              ):      ImageGalleryViewWithModal(context,setModalState, data["media"], data["fileUrl"],setState);
                                                                                            },
                                                                                            child: data["media"].isEmpty
                                                                                                ? Container(
                                                                                                height: 84,
                                                                                                width:  data["media"].isEmpty?84: 45,
                                                                                                padding: const EdgeInsets.all(0),
                                                                                                alignment: Alignment.center,
                                                                                                decoration: BoxDecoration(
                                                                                                    color: Colors.white,
                                                                                                    borderRadius: BorderRadius.circular(5)),
                                                                                                child: Column(
                                                                                                  mainAxisAlignment: MainAxisAlignment.center,
                                                                                                  children:  [
                                                                                                    SizedBox(
                                                                                                      height: 5,
                                                                                                    ),
                                                                                                    Text(
                                                                                                      "UPLOAD MEDIA",
                                                                                                      style: uploadMetaStyle,
                                                                                                      textAlign: TextAlign.center,
                                                                                                    ),
                                                                                                    data["isLoadingFile"] == true ?
                                                                                                    LoadingWidgetWithoutBox()
                                                                                                        :SizedBox()
                                                                                                  ],
                                                                                                ))
                                                                                                : SizedBox(
                                                                                              height: 84,
                                                                                              width: 45, child:
                                                                                            "${data["media"][0]["name"].toString().substring( data["media"][0]["name"].toString().lastIndexOf('.'))}" == ".mp4"?Image.asset("assets/mp4placeholder.png",fit: BoxFit.cover):
                                                                                            Image.network(data["fileUrl"][0].toString(), fit: BoxFit.fill),
                                                                                            ),
                                                                                          ),
                                                                                          data["media"].isEmpty ||  data["media"].length == 1 ?SizedBox():
                                                                                          InkWell(
                                                                                            onTap:(){
                                                                                              ImageGalleryView(context, data["media"], data["fileUrl"],setState);
                                                                                            },
                                                                                            child: Container(
                                                                                                height: 84,
                                                                                                width:  data["media"].isEmpty?84: 45,
                                                                                                padding: const EdgeInsets.all(0),
                                                                                                alignment: Alignment.center,
                                                                                                decoration: BoxDecoration(
                                                                                                    color: Constants.closeOfferCard,
                                                                                                    borderRadius: BorderRadius.circular(5)),
                                                                                                child:Center(
                                                                                                    child:Text("+${data["media"].length -1}",style: BlackTitles400height,)
                                                                                                )
                                                                                            ),
                                                                                          )
                                                                                        ],
                                                                                      ),
                                                                                    ),
                                                                                    data["media"].isEmpty?SizedBox():  DottedBorder(
                                                                                      dashPattern: const [6, 2],
                                                                                      strokeWidth: 1.5,
                                                                                      color: Constants.primaryColor1,
                                                                                      borderType: BorderType.Rect,
                                                                                      radius: const Radius.circular(2),
                                                                                      child: InkWell(
                                                                                          onTap: () async {
                                                                                            if(data["media"].length == 4){
                                                                                              Constants.showToast("Max 4 files are allowed for select");
                                                                                            }else{
                                                                                              ShowPickerBottomSheet(
                                                                                                  context,
                                                                                                  GalleryOnTap: () async{
                                                                                                    FilePickerResult? result = await FilePicker.platform.pickFiles(
                                                                                                      type: FileType.custom,
                                                                                                      allowMultiple: false,
                                                                                                      allowedExtensions: ['jpg', 'png', 'mp4',"jpeg"],
                                                                                                    );
                                                                                                    if(result != null){
                                                                                                      PlatformFile file = result.files.first;
                                                                                                      setState(() {
                                                                                                        data["isLoadingFile"] = true;
                                                                                                      },);setModalState((){});
                                                                                                      ThatZalApis.UploadFile(file: file.path).then((value)  {
                                                                                                        if(value != null){
                                                                                                          if(value["status"] == true){
                                                                                                            setState(() {
                                                                                                              data["isLoadingFile"] = false;
                                                                                                              data["media"].add({
                                                                                                                "file":"${value["result"]["id"]}",
                                                                                                                "name" : "${value["result"]["name"]}"
                                                                                                              });
                                                                                                              data["fileUrl"].add("${value["result"]["file"]}");
                                                                                                            });setModalState((){});
                                                                                                          }
                                                                                                        }
                                                                                                      });
                                                                                                    }else {
                                                                                                      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Nothing is selected')));
                                                                                                    }
                                                                                                    Navigator.of(context).pop();
                                                                                                  },
                                                                                                  CameraOnTap: ()async{

                                                                                                    Navigator.push(context, MaterialPageRoute(builder: (context) => UploadImageCameraScreen())).then((value) {
                                                                                                      Navigator.of(context).pop();
                                                                                                      if (value != null) {
                                                                                                        ConstantFun.imageProfileCropper(path: value).then((file) async {

                                                                                                          setState(() {
                                                                                                            data["isLoadingFile"] = true;
                                                                                                          },);setModalState((){});
                                                                                                          ThatZalApis.UploadFile(file: file.path).then((UploadImage)  {
                                                                                                            print("UploadImage");
                                                                                                            print(UploadImage);
                                                                                                            if(UploadImage != null){
                                                                                                              if(UploadImage["status"] == true){
                                                                                                                setState(() {
                                                                                                                  data["isLoadingFile"] = false;
                                                                                                                  data["media"].add({
                                                                                                                    "file":"${UploadImage["result"]["id"]}",
                                                                                                                    "name" :"${UploadImage["result"]["name"]}"
                                                                                                                  });
                                                                                                                  data["fileUrl"].add("${UploadImage["result"]["file"]}");
                                                                                                                });setModalState((){});
                                                                                                              }
                                                                                                            }
                                                                                                          });
                                                                                                        });
                                                                                                      }else{
                                                                                                        ScaffoldMessenger.of(context)
                                                                                                            .showSnackBar( // is this context <<<
                                                                                                            const SnackBar(content: Text(
                                                                                                                'Nothing is selected')));
                                                                                                      }
                                                                                                    });

                                                                                                    // final ImagePicker picker = ImagePicker();
                                                                                                    // final pickedFile = await picker.pickImage(source: ImageSource.camera);
                                                                                                    // XFile? xfilePick = pickedFile;
                                                                                                    // setState(
                                                                                                    //       () {
                                                                                                    //     if (xfilePick != null) {
                                                                                                    //
                                                                                                    //     } else {
                                                                                                    //       ScaffoldMessenger.of(context).showSnackBar(// is this context <<<
                                                                                                    //           const SnackBar(content: Text('Nothing is selected')));
                                                                                                    //     }
                                                                                                    //   },
                                                                                                    // );
                                                                                                    // Navigator.of(context).pop();
                                                                                                  }
                                                                                              );
                                                                                            }
                                                                                          },
                                                                                          child: Container(
                                                                                              height: 84,
                                                                                              width: 35,
                                                                                              padding: const EdgeInsets.all(0),
                                                                                              alignment: Alignment.center,
                                                                                              decoration: BoxDecoration(
                                                                                                  color: Colors.white,
                                                                                                  borderRadius: BorderRadius.circular(5)),
                                                                                              child: Column(
                                                                                                mainAxisAlignment: MainAxisAlignment.center,
                                                                                                children:  [
                                                                                                  data["isLoadingFile"] == true ?
                                                                                                  LoadingWidgetWithoutBox(): Icon(
                                                                                                    Icons.add,
                                                                                                    color: primaryColor,
                                                                                                    size: 35,
                                                                                                  ),
                                                                                                ],
                                                                                              ))

                                                                                      ),
                                                                                    ),
                                                                                  ],
                                                                                ),
                                                                                // data["media"].isEmpty?SizedBox():
                                                                                // Padding(
                                                                                //   padding: const EdgeInsets.only(left:8.0,top:5),
                                                                                //   child: Text(
                                                                                //     "Upload Meta",
                                                                                //     style: BlackDescStyle,
                                                                                //   ),
                                                                                // ),
                                                                                Row(
                                                                                  mainAxisAlignment: MainAxisAlignment.center,
                                                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                                                  children: [
                                                                                    InkWell(
                                                                                      onTap:() async{

                                                                                        setState(() {
                                                                                          data["showMediaData"] = false;
                                                                                          ItemsList[index]["item_condition"]["itemDisableFields"].add("UploadMeta");
                                                                                        });
                                                                                        setModalState((){});
                                                                                        final byteData = await rootBundle.load('assets/image_placeholder.jpg');
                                                                                        final file = File('${(await getTemporaryDirectory()).path}/image_placeholder.jpg');
                                                                                        await file.writeAsBytes(byteData.buffer.asUint8List(byteData.offsetInBytes, byteData.lengthInBytes));

                                                                                        ThatZalApis.UploadFile(file: file.path).then((value)  {
                                                                                          if(value != null){
                                                                                            if(value["status"] == true){
                                                                                              setState(() {
                                                                                                data["isLoadingFile"] = false;
                                                                                                data["media"] = [{
                                                                                                  "file": "${value["result"]["id"]}",
                                                                                                  "name" : "${value["result"]["name"]}"
                                                                                                }];
                                                                                              });setModalState((){});
                                                                                            }
                                                                                          }
                                                                                        });

                                                                                      },
                                                                                      child: Padding(
                                                                                        padding: const EdgeInsets.only(top:3.0,left:5),
                                                                                        child: CircleAvatar(
                                                                                          radius:8,
                                                                                          backgroundColor: Color(
                                                                                              0x3389F6B9) ,
                                                                                          child: Center(
                                                                                              child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                          ),
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                  ],
                                                                                )

                                                                              ],
                                                                            ),

                                                                            const SizedBox(width: 15,),
                                                                          ],
                                                                        ),
                                                                        SizedBox(height: 15,),
                                                                        data["showItemPriceMain"] == false?Row(
                                                                          children: [
                                                                            20.width,
                                                                            Text("Add back price",style: BlackDescStyle,),
                                                                            5.width,
                                                                            InkWell(
                                                                              onTap:(){
                                                                                setState(() {
                                                                                  data["showItemPriceMain"] = true;
                                                                                });setModalState((){});
                                                                              },
                                                                              child: CircleAvatar(
                                                                                radius:8,
                                                                                backgroundColor: primaryColor ,
                                                                                child: Center(
                                                                                    child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                                ),
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ):
                                                                        Stack(
                                                                          children: [
                                                                            Row(
                                                                              mainAxisAlignment: MainAxisAlignment.start,
                                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                                              children: [
                                                                                const SizedBox(width: 13,),
                                                                                Container(
                                                                                  height: 35,
                                                                                  decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                                                                                  width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                                                                                  margin: EdgeInsets.only(left: 5,top: 10),
                                                                                  child: TextFormField(
                                                                                    controller: data["price"],
                                                                                    keyboardType: TextInputType.number,
                                                                                    decoration: InputDecoration(hintText: "Enter Price", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                      focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                      enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                      floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                      contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                      border: const OutlineInputBorder(),
                                                                                      // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                    ),
                                                                                    style: Black87HintStyle,
                                                                                  ),
                                                                                ),
                                                                                Column(
                                                                                  children: [
                                                                                    Container(
                                                                                      height: 35,
                                                                                      decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                                                                                      width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                                                                                      margin: EdgeInsets.only(left: 1,right:0,top: 10),
                                                                                      child: TextFormField(
                                                                                        controller: data["unit"],
                                                                                        keyboardType: TextInputType.text,
                                                                                        decoration: InputDecoration(hintText: "Enter Unit", fillColor:  Colors.white,hintStyle: greyHintStyle,
                                                                                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                          floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                          contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                          border: const OutlineInputBorder(),

                                                                                          // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                        ),
                                                                                        onChanged: (String value) async {
                                                                                          setState(() {
                                                                                            data["filterGetUnitList"] = getUnitList.where((name) => name.name!.toLowerCase().contains(value.toLowerCase())).toList();
                                                                                            data["filterGetUnitList"].isEmpty ?  data["showOtherUnit"]=true:data["showOtherUnit"]=false;
                                                                                          });setModalState((){});
                                                                                          // _searchFilterUnit(value);
                                                                                        },

                                                                                        style: Black87HintStyle,
                                                                                      ),
                                                                                    ),
                                                                                    (data["filterGetUnitList"].isEmpty) ? SizedBox()
                                                                                        :SizedBox(
                                                                                      width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                                                                                      height: data["filterGetUnitList"].length >= 5 ?  MediaQuery.sizeOf(context).height*0.25 :null,
                                                                                      child: Card(
                                                                                        elevation: 2,
                                                                                        color: Colors.white,
                                                                                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),
                                                                                        child: Scrollbar(
                                                                                          thumbVisibility: data["filterGetUnitList"].length >= 5? true:false,
                                                                                          radius: Radius.circular(5),
                                                                                          thickness: 4,
                                                                                          child: ListView.builder(
                                                                                            itemCount:data["filterGetUnitList"].length,
                                                                                            shrinkWrap: true,
                                                                                            physics: ClampingScrollPhysics(),
                                                                                            padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),
                                                                                            itemBuilder: (context, index) {
                                                                                              var Unitdata = data["filterGetUnitList"][index];
                                                                                              return  Padding(
                                                                                                padding: const EdgeInsets.symmetric(horizontal: 5.0,vertical: 10),
                                                                                                child: InkWell(
                                                                                                    onTap: (){
                                                                                                      setState(() {
                                                                                                        data["unit"].text = Unitdata.name.toString() ;
                                                                                                        data["SelectedUnitId"] =  Unitdata.id.toString();
                                                                                                        data["filterGetUnitList"].clear();
                                                                                                        // segmentLoader=true;
                                                                                                        data["selectedUnitIndex"] = index;
                                                                                                      });setModalState((){});
                                                                                                      // DrawAuraAPi.getSegmentListApi(catId: Unitdata.id.toString()).then((value) {
                                                                                                      //   setState(() {
                                                                                                      //     getSegmentList=value.result!;
                                                                                                      //     segmentLoader=false;
                                                                                                      //   });
                                                                                                      // });

                                                                                                    },
                                                                                                    child: Text("${Unitdata.name.toString()}",style: Black87HintStyle,overflow: TextOverflow.ellipsis)),
                                                                                              );
                                                                                            },),
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                  ],
                                                                                ),
                                                                                Spacer(),
                                                                                data["filterGetUnitList"].isEmpty &&  data["showOtherUnit"]==true?
                                                                                InkWell(
                                                                                    onTap:(){
                                                                                      setState((){
                                                                                        data["isLoadNewUnit"]= true;
                                                                                      });setModalState((){});
                                                                                      var dataParam ={"name": data["unit"].text.toString()};
                                                                                      DrawAuraAPi().createUnitApi(
                                                                                          data: dataParam).then((value) {
                                                                                        if (value["status"] == 200) {
                                                                                          setState((){
                                                                                            data["SelectedUnitId"] = value["result"]["id"].toString();
                                                                                          });setModalState((){});
                                                                                          Fluttertoast.showToast(
                                                                                              msg: value["message"],
                                                                                              toastLength: Toast.LENGTH_SHORT,
                                                                                              gravity: ToastGravity.BOTTOM,
                                                                                              timeInSecForIosWeb: 2,
                                                                                              backgroundColor:Constants.primaryColor1,
                                                                                              textColor: Colors.white,
                                                                                              fontSize: 18.0
                                                                                          );
                                                                                          setState(() {
                                                                                            data["isLoadNewUnit"] = false;
                                                                                            data["showOtherUnit"] =false;
                                                                                          });setModalState((){});
                                                                                          DrawAuraAPi.getUnitList().then((value) {
                                                                                            setState((){
                                                                                              getUnitList.clear();
                                                                                              getUnitList = value.result!;
                                                                                            });setModalState((){});
                                                                                          });
                                                                                        } else {
                                                                                          Fluttertoast.showToast(
                                                                                              msg: value["message"],
                                                                                              toastLength: Toast.LENGTH_SHORT,
                                                                                              gravity: ToastGravity.BOTTOM,
                                                                                              timeInSecForIosWeb: 2,
                                                                                              backgroundColor: Constants.primaryColor1,
                                                                                              textColor: Colors.white,
                                                                                              fontSize: 18.0
                                                                                          );
                                                                                          setState(() {
                                                                                            data["isLoadNewUnit"] = false;
                                                                                            data["showOtherUnit"] =false;
                                                                                          });setModalState((){});
                                                                                        }
                                                                                      },);
                                                                                    },
                                                                                    child: Container(
                                                                                        height: 35,
                                                                                        width:ResponsiveHelper.isMobile(context)? width*0.12:tabWidth*0.12,
                                                                                        margin: EdgeInsets.only(left: 0,right:0,top: 10),
                                                                                        decoration: BoxDecoration(
                                                                                            borderRadius: BorderRadius.circular(5),
                                                                                            color:Constants.primaryColor1
                                                                                        ),
                                                                                        child:Center(child: data["isLoadNewUnit"] == false?Text("Other",style: WhiteHeadingStyle,):SizedBox(height: 15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2,)))
                                                                                    )):SizedBox(),

                                                                                const SizedBox(width: 15,)
                                                                              ],
                                                                            ),
                                                                            Positioned(
                                                                              top: 2,
                                                                              left: isMobile?width*0.84:tabWidth*0.82,
                                                                              child: Padding(
                                                                                padding: const EdgeInsets.only(top:3.0,left:0),
                                                                                child: InkWell(
                                                                                  onTap:(){
                                                                                    setState(() {

                                                                                      data["showItemPriceMain"] = false;
                                                                                      data["price"].text = "";
                                                                                      data["unit"].text = "";

                                                                                    });setModalState((){});
                                                                                  },
                                                                                  child: CircleAvatar(
                                                                                    radius:8,
                                                                                    backgroundColor: Color(
                                                                                        0x3389F6B9) ,
                                                                                    child: Center(
                                                                                        child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                              ),
                                                                            ),
                                                                            Positioned(
                                                                              top: 2,
                                                                              left: ResponsiveHelper.isMobile(context)? width*0.42:tabWidth*0.41,
                                                                              child: InkWell(
                                                                                onTap:(){
                                                                                  setState(() {

                                                                                    data["showItemPrice2"] == false ? data["showItemPrice2"] =true : data["showItemPrice3"] = true;
                                                                                  });setModalState((){});
                                                                                },
                                                                                child: const CircleAvatar(
                                                                                  radius: 9,
                                                                                  backgroundColor:primaryColor,
                                                                                  child: Center(
                                                                                    child: Icon(Icons.add, color: Colors.white, size: 18),
                                                                                  ),
                                                                                ),
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                        SizedBox(height:data["showItemPrice2"] ==true? 10:0,),
                                                                        data["showItemPrice2"] ==true? Stack(
                                                                          children: [
                                                                            Row(
                                                                              mainAxisAlignment: MainAxisAlignment.start,
                                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                                              children: [
                                                                                const SizedBox(width: 13,),
                                                                                Container(
                                                                                  height: 35,
                                                                                  decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                                                                                  width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                                                                                  margin: EdgeInsets.only(left: 5,top: 10),
                                                                                  child: TextFormField(
                                                                                    controller: data["MaintenancePrice"],
                                                                                    keyboardType: TextInputType.number,
                                                                                    decoration: InputDecoration(hintText: "Enter Price 2", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                      focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                      enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                      floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                      contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                      border: const OutlineInputBorder(),
                                                                                      // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                    ),
                                                                                    style: Black87HintStyle,
                                                                                  ),
                                                                                ),
                                                                                Column(
                                                                                  children: [
                                                                                    Container(
                                                                                      height: 35,
                                                                                      decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                                                                                      width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                                                                                      margin: EdgeInsets.only(left: 1,right:0,top: 10),
                                                                                      child: TextFormField(
                                                                                        controller: data["MaintenanceUnit"],
                                                                                        keyboardType: TextInputType.text,
                                                                                        decoration: InputDecoration(hintText: "Enter Unit 2", fillColor:  Colors.white,hintStyle: greyHintStyle,
                                                                                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                          floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                          contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                          border: const OutlineInputBorder(),

                                                                                          // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                        ),
                                                                                        onChanged: (String value) async {
                                                                                          setState(() {
                                                                                            data["filterGetUnitListMain"] = getUnitList.where((name) => name.name!.toLowerCase().contains(value.toLowerCase())).toList();
                                                                                            data["filterGetUnitListMain"].isEmpty ?  data["showOtherUnitMain"]=true:data["showOtherUnitMain"]=false;
                                                                                          });setModalState((){});
                                                                                          // _searchFilterUnit(value);
                                                                                        },

                                                                                        style: Black87HintStyle,
                                                                                      ),
                                                                                    ),
                                                                                    (data["filterGetUnitListMain"].isEmpty) ? SizedBox()
                                                                                        :SizedBox(
                                                                                      width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                                                                                      height: data["filterGetUnitListMain"].length >= 5 ?  MediaQuery.sizeOf(context).height*0.25 :null,
                                                                                      child: Card(
                                                                                        elevation: 2,
                                                                                        color: Colors.white,
                                                                                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),
                                                                                        child: Scrollbar(
                                                                                          thumbVisibility: data["filterGetUnitListMain"].length >= 5? true:false,
                                                                                          radius: Radius.circular(5),
                                                                                          thickness: 4,
                                                                                          child: ListView.builder(
                                                                                            itemCount:data["filterGetUnitListMain"].length,
                                                                                            shrinkWrap: true,
                                                                                            physics: ClampingScrollPhysics(),
                                                                                            padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),
                                                                                            itemBuilder: (context, index) {
                                                                                              var Unitdata = data["filterGetUnitListMain"][index];
                                                                                              return  Padding(
                                                                                                padding: const EdgeInsets.symmetric(horizontal: 5.0,vertical: 10),
                                                                                                child: InkWell(
                                                                                                    onTap: (){
                                                                                                      setState(() {
                                                                                                        data["MaintenanceUnit"].text = Unitdata.name.toString() ;
                                                                                                        data["SelectedUnitIdMain"] =  Unitdata.id.toString();
                                                                                                        data["filterGetUnitListMain"].clear();
                                                                                                        // segmentLoader=true;
                                                                                                        data["selectedUnitIndexMain"] = index;
                                                                                                      });setModalState((){});
                                                                                                      // DrawAuraAPi.getSegmentListApi(catId: Unitdata.id.toString()).then((value) {
                                                                                                      //   setState(() {
                                                                                                      //     getSegmentList=value.result!;
                                                                                                      //     segmentLoader=false;
                                                                                                      //   });
                                                                                                      // });

                                                                                                    },
                                                                                                    child: Text("${Unitdata.name.toString()}",style: Black87HintStyle,overflow: TextOverflow.ellipsis)),
                                                                                              );
                                                                                            },),
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                  ],
                                                                                ),
                                                                                Spacer(),
                                                                                data["filterGetUnitListMain"].isEmpty &&  data["showOtherUnitMain"]==true?
                                                                                InkWell(
                                                                                    onTap:(){
                                                                                      setState((){
                                                                                        data["isLoadNewUnitMain"]= true;
                                                                                      });setModalState((){});
                                                                                      var dataParam ={"name": data["MaintenanceUnit"].text.toString()};
                                                                                      DrawAuraAPi().createUnitApi(
                                                                                          data: dataParam).then((value) {
                                                                                        if (value["status"] == 200) {
                                                                                          setState((){
                                                                                            data["SelectedUnitIdMain"] = value["result"]["id"].toString();
                                                                                          });setModalState((){});
                                                                                          Fluttertoast.showToast(
                                                                                              msg: value["message"],
                                                                                              toastLength: Toast.LENGTH_SHORT,
                                                                                              gravity: ToastGravity.BOTTOM,
                                                                                              timeInSecForIosWeb: 2,
                                                                                              backgroundColor: Constants.primaryColor1,
                                                                                              textColor: Colors.white,
                                                                                              fontSize: 18.0
                                                                                          );
                                                                                          setState(() {
                                                                                            data["isLoadNewUnitMain"] = false;
                                                                                            data["showOtherUnitMain"] =false;
                                                                                          });setModalState((){});
                                                                                          DrawAuraAPi.getUnitList().then((value) {
                                                                                            setState((){
                                                                                              getUnitList.clear();
                                                                                              getUnitList = value.result!;
                                                                                            });setModalState((){});
                                                                                          });
                                                                                        } else {
                                                                                          Fluttertoast.showToast(
                                                                                              msg: value["message"],
                                                                                              toastLength: Toast.LENGTH_SHORT,
                                                                                              gravity: ToastGravity.BOTTOM,
                                                                                              timeInSecForIosWeb: 2,
                                                                                              backgroundColor:Constants.primaryColor1,
                                                                                              textColor: Colors.white,
                                                                                              fontSize: 18.0
                                                                                          );
                                                                                          setState(() {
                                                                                            data["isLoadNewUnitMain"] = false;
                                                                                            data["showOtherUnitMain"] =false;
                                                                                          });setModalState((){});
                                                                                        }
                                                                                      },);
                                                                                    },
                                                                                    child: Container(
                                                                                        height: 35,
                                                                                        width:ResponsiveHelper.isMobile(context)? width*0.12:tabWidth*0.12,
                                                                                        margin: EdgeInsets.only(left: 0,right:0,top: 10),
                                                                                        decoration: BoxDecoration(
                                                                                            borderRadius: BorderRadius.circular(5),
                                                                                            color:Constants.primaryColor1
                                                                                        ),
                                                                                        child:Center(child: data["isLoadNewUnitMain"]==false?Text("Other",style: WhiteHeadingStyle,):SizedBox(height: 15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2,)))
                                                                                    )):SizedBox(),
                                                                                const SizedBox(width: 15,)
                                                                              ],
                                                                            ),
                                                                            Positioned(
                                                                              top: 2,
                                                                              left: ResponsiveHelper.isMobile(context)? width*0.42:tabWidth*0.41,
                                                                              child: InkWell(
                                                                                onTap:(){
                                                                                  setState(() {
                                                                                    data["showItemPrice2"] = false;
                                                                                  });setModalState((){});
                                                                                },
                                                                                child: const CircleAvatar(
                                                                                  radius: 9,
                                                                                  backgroundColor: primaryColor,
                                                                                  child: Center(
                                                                                    child: Icon(Icons.remove, color: Colors.white, size: 18),
                                                                                  ),
                                                                                ),
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ):SizedBox(),
                                                                        SizedBox(height:data["showItemPrice3"] ==true?10:0,),
                                                                        data["showItemPrice3"] ==true?  Stack(
                                                                          children: [
                                                                            Row(
                                                                              mainAxisAlignment: MainAxisAlignment.start,
                                                                              crossAxisAlignment: CrossAxisAlignment.start,
                                                                              children: [
                                                                                const SizedBox(width: 13,),
                                                                                Container(
                                                                                  height: 35,
                                                                                  decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                                                                                  width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                                                                                  margin: EdgeInsets.only(left: 5,top: 10),
                                                                                  child: TextFormField(
                                                                                    controller: data["AdvancePrice"],
                                                                                    keyboardType: TextInputType.number,
                                                                                    decoration: InputDecoration(hintText: "Enter Price 3", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                      focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                      enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                      floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                      contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                      border: const OutlineInputBorder(),
                                                                                      // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                    ),
                                                                                    style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                                                                                  ),
                                                                                ),
                                                                                Column(
                                                                                  children: [
                                                                                    Container(
                                                                                      height: 35,
                                                                                      decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                                                                                      width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                                                                                      margin: EdgeInsets.only(left: 1,right:0,top: 10),
                                                                                      child: TextFormField(
                                                                                        controller: data["AdvanceUnit"],
                                                                                        keyboardType: TextInputType.text,
                                                                                        decoration: InputDecoration(hintText: "Enter Unit 3", fillColor:  Colors.white,hintStyle: greyHintStyle,
                                                                                          focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                          enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                          floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                          contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                          border: const OutlineInputBorder(),

                                                                                          // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                        ),
                                                                                        onChanged: (String value) async {
                                                                                          setState(() {
                                                                                            data["filterGetUnitListAdva"] = getUnitList.where((name) => name.name!.toLowerCase().contains(value.toLowerCase())).toList();
                                                                                            data["filterGetUnitListAdva"].isEmpty ?  data["showOtherUnitAdva"]=true:data["showOtherUnitAdva"]=false;
                                                                                          });setModalState((){});
                                                                                          // _searchFilterUnit(value);
                                                                                        },

                                                                                        style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                                                                                      ),
                                                                                    ),
                                                                                    (data["filterGetUnitListAdva"].isEmpty) ? SizedBox()
                                                                                        :SizedBox(
                                                                                      width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                                                                                      height: data["filterGetUnitListAdva"].length >= 5 ?  MediaQuery.sizeOf(context).height*0.25 :null,
                                                                                      child: Card(
                                                                                        elevation: 2,
                                                                                        color: Colors.white,
                                                                                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),
                                                                                        child: Scrollbar(
                                                                                          thumbVisibility: data["filterGetUnitListAdva"].length >= 5? true:false,
                                                                                          radius: Radius.circular(5),
                                                                                          thickness: 4,
                                                                                          child: ListView.builder(
                                                                                            itemCount:data["filterGetUnitListAdva"].length,
                                                                                            shrinkWrap: true,
                                                                                            physics: ClampingScrollPhysics(),
                                                                                            padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),
                                                                                            itemBuilder: (context, index) {
                                                                                              var Unitdata = data["filterGetUnitListAdva"][index];
                                                                                              return  Padding(
                                                                                                padding: const EdgeInsets.symmetric(horizontal: 5.0,vertical: 10),
                                                                                                child: InkWell(
                                                                                                    onTap: (){
                                                                                                      setState(() {
                                                                                                        data["AdvanceUnit"].text = Unitdata.name.toString() ;
                                                                                                        data["SelectedUnitIdAdva"] =  Unitdata.id.toString();
                                                                                                        data["filterGetUnitListAdva"].clear();
                                                                                                        data["selectedUnitIndexAdva"] = index;
                                                                                                      });setModalState((){});
                                                                                                    },
                                                                                                    child: Text("${Unitdata.name.toString()}",style: TextStyle(fontWeight: FontWeight.w400, fontSize: 14, color: Colors.black87,fontFamily:'Roboto400'),overflow: TextOverflow.ellipsis)),
                                                                                              );
                                                                                            },),
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                  ],
                                                                                ),
                                                                                Spacer(),
                                                                                data["filterGetUnitListAdva"].isEmpty &&  data["showOtherUnitAdva"]==true?
                                                                                InkWell(
                                                                                    onTap:(){
                                                                                      setState((){
                                                                                        data["isLoadNewUnitAdva"]= true;
                                                                                      });setModalState((){});
                                                                                      var dataParam ={"name": data["AdvanceUnit"].text.toString()};
                                                                                      DrawAuraAPi().createUnitApi(
                                                                                          data: dataParam).then((value) {
                                                                                        if (value["status"] == 200) {
                                                                                          setState((){
                                                                                            data["SelectedUnitIdAdva"] = value["result"]["id"].toString();
                                                                                          });setModalState((){});
                                                                                          Fluttertoast.showToast(
                                                                                              msg: value["message"],
                                                                                              toastLength: Toast.LENGTH_SHORT,
                                                                                              gravity: ToastGravity.BOTTOM,
                                                                                              timeInSecForIosWeb: 2,
                                                                                              backgroundColor: Constants.primaryColor1,
                                                                                              textColor: Colors.white,
                                                                                              fontSize: 18.0
                                                                                          );
                                                                                          setState(() {
                                                                                            data["isLoadNewUnitAdva"] = false;
                                                                                            data["showOtherUnitAdva"] =false;
                                                                                          });setModalState((){});
                                                                                          DrawAuraAPi.getUnitList().then((value) {
                                                                                            setState((){
                                                                                              getUnitList.clear();
                                                                                              getUnitList = value.result!;
                                                                                            });setModalState((){});
                                                                                          });
                                                                                        } else {
                                                                                          Fluttertoast.showToast(
                                                                                              msg: value["message"],
                                                                                              toastLength: Toast.LENGTH_SHORT,
                                                                                              gravity: ToastGravity.BOTTOM,
                                                                                              timeInSecForIosWeb: 2,
                                                                                              backgroundColor: Constants.primaryColor1,
                                                                                              textColor: Colors.white,
                                                                                              fontSize: 18.0
                                                                                          );
                                                                                          setState(() {
                                                                                            data["isLoadNewUnitAdva"] = false;
                                                                                            data["showOtherUnitAdva"] =false;
                                                                                          });setModalState((){});
                                                                                        }
                                                                                      },);
                                                                                    },
                                                                                    child: Container(
                                                                                        height: 35,
                                                                                        width:ResponsiveHelper.isMobile(context)? width*0.12:tabWidth*0.12,
                                                                                        margin: EdgeInsets.only(left: 0,right:0,top: 10),
                                                                                        decoration: BoxDecoration(
                                                                                            borderRadius: BorderRadius.circular(5),
                                                                                            color:Constants.primaryColor1
                                                                                        ),
                                                                                        child:Center(child: data["isLoadNewUnitAdva"]==false?Text("Other",style: WhiteHeadingStyle,):SizedBox(height: 15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2,)))
                                                                                    )):SizedBox(),
                                                                                const SizedBox(width: 15,)

                                                                              ],
                                                                            ),
                                                                            Positioned(
                                                                              top: 2,
                                                                              left: ResponsiveHelper.isMobile(context)? width*0.42:tabWidth*0.41,
                                                                              child: InkWell(
                                                                                onTap:(){
                                                                                  setState(() {
                                                                                    data["showItemPrice3"] = false;
                                                                                  });setModalState((){});
                                                                                },
                                                                                child: const CircleAvatar(
                                                                                  radius: 9,
                                                                                  backgroundColor: primaryColor,
                                                                                  child: Center(
                                                                                    child: Icon(Icons.remove, color: Colors.white, size: 18),
                                                                                  ),
                                                                                ),
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        ):SizedBox(),
                                                                        10.height,
                                                                        data["showItemQty"] ==false?
                                                                        Row(
                                                                          children: [
                                                                            20.width,
                                                                            Text("Add back Qty",style: BlackDescStyle,),
                                                                            5.width,
                                                                            InkWell(
                                                                              onTap:(){
                                                                                setState(() {
                                                                                  data["showItemQty"] = true;
                                                                                });setModalState((){});
                                                                              },
                                                                              child: CircleAvatar(
                                                                                radius:8,
                                                                                backgroundColor: primaryColor ,
                                                                                child: Center(
                                                                                    child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                                ),
                                                                              ),
                                                                            ),
                                                                          ],
                                                                        )
                                                                            :    Row(
                                                                          mainAxisAlignment: MainAxisAlignment.start,
                                                                          children: [
                                                                            15.width,
                                                                            InkWell(
                                                                              onTap:  (){
                                                                                setState((){
                                                                                  data["quantity"]==1? Constants.showToast("Minimum QTY is 1"):  data["quantity"] --;

                                                                                });setModalState((){});
                                                                              },
                                                                              child: Container(
                                                                                width: 35,
                                                                                height: 35,
                                                                                margin: EdgeInsets.only(top: 10),
                                                                                decoration: BoxDecoration(color:Color(0xFFeefaf7),borderRadius: BorderRadius.circular(5),border: Border.all(width: 0.5,color:  Constants.primaryColor1)),
                                                                                child: Center(
                                                                                  child: Icon(Icons.remove_circle_outline,color: Constants.primaryColor1),
                                                                                ),
                                                                              ),
                                                                            ),
                                                                            SizedBox(width: 5,),
                                                                            Container(
                                                                              width: 80,
                                                                              height: 35,  margin: EdgeInsets.only(top: 10),
                                                                              decoration: BoxDecoration(color:Color(0xFFeefaf7),borderRadius: BorderRadius.circular(5),border: Border.all(width: 0.5,color:  Constants.primaryColor1)),
                                                                              child:
                                                                              Center(child: Text( data["quantity"]==0?"Qty":"${data["quantity"]}",style: TextStyle(fontWeight: FontWeight.w600,color:  Colors.black,fontSize: 18),)),
                                                                            ),
                                                                            SizedBox(width: 5,),
                                                                            InkWell(
                                                                              onTap: (){
                                                                                setState((){
                                                                                  data["quantity"] ++;
                                                                                });setModalState((){});
                                                                              },
                                                                              child: Container(
                                                                                width: 35,
                                                                                height: 35,margin: EdgeInsets.only(top: 10),
                                                                                decoration: BoxDecoration(color:Color(0xFFeefaf7),borderRadius: BorderRadius.circular(5),border: Border.all(width: 0.5,color:  Constants.primaryColor1)),
                                                                                child: Center(
                                                                                  child: Icon(Icons.add_circle_outline,color:  Constants.primaryColor1,),
                                                                                ),
                                                                              ),
                                                                            ),
                                                                            InkWell(
                                                                              onTap:(){
                                                                                setState(() {
                                                                                  data["showItemQty"] =false;
                                                                                  data["quantity"] = "0";

                                                                                });setModalState((){});
                                                                              },
                                                                              child: Padding(
                                                                                padding: const EdgeInsets.only(top:3.0,left:5),
                                                                                child: CircleAvatar(
                                                                                  radius:8,
                                                                                  backgroundColor: Color(
                                                                                      0x3389F6B9) ,
                                                                                  child: Center(
                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                  ),
                                                                                ),
                                                                              ),
                                                                            ),

                                                                          ],
                                                                        ),
                                                                        const SizedBox(height: 15,),
                                                                        Padding(
                                                                          padding: const EdgeInsets.symmetric(horizontal: 15),
                                                                          child: Row(
                                                                            children:  [
                                                                              const Text(" Add Offer’s conditions for this item", style: BlackSubTitleItalicStyle,),
                                                                              const SizedBox(width: 5,),
                                                                              InkWell(
                                                                                onTap:(){
                                                                                  setState(() {

                                                                                    data["showItemCondition"] = !  data["showItemCondition"];
                                                                                  });setModalState((){});
                                                                                },
                                                                                child:  CircleAvatar(
                                                                                  radius: 10,
                                                                                  backgroundColor: primaryColor,
                                                                                  child: Center(
                                                                                    child: data["showItemCondition"] == false? Icon(Icons.add, color: Colors.white, size: 20): Icon(Icons.remove, color: Colors.white, size: 20),
                                                                                  ),
                                                                                ),
                                                                              )
                                                                            ],
                                                                          ),
                                                                        ),
                                                                        data["showItemCondition"]==true? SizedBox(
                                                                            height: 65,
                                                                            width: double.infinity,
                                                                            child: ListView(
                                                                              scrollDirection: Axis.horizontal,
                                                                              physics: const ScrollPhysics(),
                                                                              shrinkWrap: false,
                                                                              padding: EdgeInsets.only(top:5),
                                                                              children: [
                                                                                const SizedBox(width: 12,),
                                                                                data["showItemPeriodicity"]==true?  Padding(
                                                                                  padding: EdgeInsets.only(right:10),
                                                                                  child: Column(
                                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                                    children: [
                                                                                      Stack(
                                                                                        children: [
                                                                                          DropdownButtonHideUnderline(
                                                                                            child: DropdownButton2(
                                                                                              isExpanded: true,
                                                                                              items:
                                                                                              selectedPeriodicityValue == "Daily" ?
                                                                                              periodicityDailyList.map((item) => DropdownMenuItem (
                                                                                                value: item,
                                                                                                child: Text(
                                                                                                  item,
                                                                                                  style:  const TextStyle(
                                                                                                    fontSize: 15,
                                                                                                    fontWeight: FontWeight.w400,
                                                                                                    color:  Colors.black,
                                                                                                  ),
                                                                                                  overflow: TextOverflow.ellipsis,
                                                                                                ),
                                                                                              )).toList():
                                                                                              selectedPeriodicityValue == "Weekends" ?
                                                                                              periodicityWeekendsList.map((item) => DropdownMenuItem (
                                                                                                value: item,
                                                                                                child: Text(
                                                                                                  item,
                                                                                                  style:  const TextStyle(
                                                                                                    fontSize: 15,
                                                                                                    fontWeight: FontWeight.w400,
                                                                                                    color:  Colors.black,
                                                                                                  ),
                                                                                                  overflow: TextOverflow.ellipsis,
                                                                                                ),
                                                                                              )).toList():
                                                                                              selectedPeriodicityValue == "Weekdays" ?
                                                                                              periodicityWeekDaysList.map((item) => DropdownMenuItem (
                                                                                                value: item,
                                                                                                child: Text(
                                                                                                  item,
                                                                                                  style:  const TextStyle(
                                                                                                    fontSize: 15,
                                                                                                    fontWeight: FontWeight.w400,
                                                                                                    color:  Colors.black,
                                                                                                  ),
                                                                                                  overflow: TextOverflow.ellipsis,
                                                                                                ),
                                                                                              )).toList():
                                                                                              periodicityList.map((item) => DropdownMenuItem (
                                                                                                value: item,
                                                                                                child: Text(
                                                                                                  item,
                                                                                                  style:  const TextStyle(
                                                                                                    fontSize: 15,
                                                                                                    fontWeight: FontWeight.w400,
                                                                                                    color:  Colors.black,
                                                                                                  ),
                                                                                                  overflow: TextOverflow.ellipsis,
                                                                                                ),
                                                                                              )).toList(),
                                                                                              value: data["item_condition"]["periodicity"]==""?null:data["item_condition"]["periodicity"],
                                                                                              onChanged:
                                                                                              selectedPeriodicityValue == "Today" ||
                                                                                                  selectedPeriodicityValue == "Tomorrow" ||
                                                                                                  selectedPeriodicityValue == "Once" ||
                                                                                                  selectedPeriodicityValue == "Monthly" ||
                                                                                                  selectedPeriodicityValue == "Yearly" ||
                                                                                                  selectedPeriodicityValue == "Weekly" ?
                                                                                              null:
                                                                                                  (newValue) {
                                                                                                setState(() {
                                                                                                  data["item_condition"]["periodicity"] = newValue!;
                                                                                                });setModalState((){});
                                                                                              },
                                                                                              hint: const Text(
                                                                                                  "Periodicity",
                                                                                                  style:greyHintStyle
                                                                                              ),
                                                                                              iconStyleData: const IconStyleData(
                                                                                                icon: Icon(Icons.keyboard_arrow_down_sharp,),
                                                                                                iconSize: 10,
                                                                                                iconEnabledColor: Colors.white,
                                                                                                iconDisabledColor:Colors.white,
                                                                                              ),
                                                                                              buttonStyleData: ButtonStyleData(
                                                                                                  height:  35,
                                                                                                  width: ResponsiveHelper.isMobile(context)? width*0.38:tabWidth*0.38,
                                                                                                  padding: const EdgeInsets.only(left: 22, right: 3),
                                                                                                  decoration: BoxDecoration(borderRadius: BorderRadius.circular(5),color: Colors.white),
                                                                                                  elevation:  1,
                                                                                                  overlayColor: MaterialStateProperty.all(Colors.white)
                                                                                              ),
                                                                                              menuItemStyleData: MenuItemStyleData(
                                                                                                height: 33,
                                                                                                selectedMenuItemBuilder: (context, child) {
                                                                                                  return     Container(
                                                                                                    padding: const EdgeInsets.only(left: 0, right: 0),
                                                                                                    width: ResponsiveHelper.isMobile(context)? width*0.38:tabWidth*0.38,
                                                                                                    height: 30,color:Constants.primaryColor1,
                                                                                                    child: Row(
                                                                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                                                      children: [
                                                                                                        child,
                                                                                                        const Padding(
                                                                                                          padding: EdgeInsets.only(right: 5.0),
                                                                                                          child: Icon(Icons.done,color: Colors.white,size: 20,),
                                                                                                        )
                                                                                                      ],
                                                                                                    ),
                                                                                                  );
                                                                                                },
                                                                                                padding: const EdgeInsets.only(left: 8, right: 3),
                                                                                              ),
                                                                                              dropdownStyleData: DropdownStyleData(
                                                                                                maxHeight: 200,
                                                                                                padding: const EdgeInsets.only(left: 0, right: 0),
                                                                                                width: ResponsiveHelper.isMobile(context)? width*0.38:tabWidth*0.38,
                                                                                                decoration: BoxDecoration(
                                                                                                    borderRadius: BorderRadius.circular(5),
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(color:  Constants.primaryColor1,width: 1)
                                                                                                ),
                                                                                                elevation: 1,
                                                                                                scrollbarTheme: ScrollbarThemeData(
                                                                                                    radius:  const Radius.circular(20),
                                                                                                    thickness: MaterialStateProperty.all(5.0),
                                                                                                    minThumbLength: 20
                                                                                                ),
                                                                                                offset: const Offset(0, -5),
                                                                                              ),

                                                                                              style: const TextStyle(
                                                                                                fontSize: 14,
                                                                                                fontWeight: FontWeight.w400,
                                                                                                color: Colors.black,
                                                                                              ),

                                                                                            ),
                                                                                          ),
                                                                                          Positioned(
                                                                                              bottom:1,left:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["item_condition"]["periodicity"]=="";
                                                                                                    data["showItemPeriodicity"] = false;
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Color(
                                                                                                      0x3389F6B9) ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              ))
                                                                                        ],
                                                                                      ),
                                                                                      const SizedBox(height:5,),
                                                                                      const Padding(
                                                                                        padding: EdgeInsets.only(left:8.0),
                                                                                        child: Text("Periodicity", style: BlackDescStyle,),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ):SizedBox(),

                                                                                // data["showItemPeriod"] == true? Padding(
                                                                                //   padding: EdgeInsets.only(right:10),
                                                                                //   child: Column(
                                                                                //     crossAxisAlignment: CrossAxisAlignment.start,
                                                                                //     children: [
                                                                                //       Stack(
                                                                                //         children: [
                                                                                //           Container(
                                                                                //             height: 35,
                                                                                //             padding:EdgeInsets.only(left:12),
                                                                                //             decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                                                //               BoxShadow(
                                                                                //                   blurRadius: 2.0,
                                                                                //                   color: Colors.black54,
                                                                                //                   offset: Offset(0.0, 0.5) ),
                                                                                //             ], borderRadius: BorderRadius.circular(5)),
                                                                                //             width: ResponsiveHelper.isMobile(context)? width*0.55:tabWidth*0.55,
                                                                                //             child: TextFormField(
                                                                                //               controller: data["item_condition"]["period"],
                                                                                //               readOnly: true,
                                                                                //               onTap:(){
                                                                                //
                                                                                //                 if(data["item_condition"]["periodicity"] == null ||data["item_condition"]["periodicity"] == "" ){
                                                                                //                   Constants.showToast("Please select periodicity first");
                                                                                //                 }else{
                                                                                //                   if(
                                                                                //                   data["item_condition"]["periodicity"] == "Today" ||
                                                                                //                       data["item_condition"]["periodicity"] == "Tomorrow" ||
                                                                                //                       data["item_condition"]["periodicity"] == "Sunday" ||
                                                                                //                       data["item_condition"]["periodicity"] == "Monday" ||
                                                                                //                       data["item_condition"]["periodicity"] == "Tuesday" ||
                                                                                //                       data["item_condition"]["periodicity"] == "Wednesday" ||
                                                                                //                       data["item_condition"]["periodicity"] == "Thursday" ||
                                                                                //                       data["item_condition"]["periodicity"] == "Friday" ||
                                                                                //                       data["item_condition"]["periodicity"] == "Saturday"
                                                                                //
                                                                                //                   ){
                                                                                //                     DateTimeRangePickerItemLavelTime(
                                                                                //                         startText: "From",
                                                                                //                         endText: "To",
                                                                                //                         doneText: "Done",
                                                                                //                         cancelText: "Cancel",
                                                                                //                         interval: 1,
                                                                                //                         initialStartTime: data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["FromPeriodTimeFill"] ,
                                                                                //                         initialEndTime: data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["ToPeriodTimeFIll"] ,
                                                                                //
                                                                                //                         mode: DateTimeRangePickerModeItemLavelTime.time,
                                                                                //                         minimumTime: DateTime.now(),
                                                                                //                         maximumFromTime: OfferFromTime,
                                                                                //                         maximumToTime: OfferToTime,
                                                                                //                         use24hFormat: false,
                                                                                //                         onConfirm: (start, end) {
                                                                                //                           print(start);
                                                                                //                           print(end);
                                                                                //                           if(end == "NotPick"){
                                                                                //                             setState((){
                                                                                //                               data["item_condition"]["duration"].clear();
                                                                                //                               isItemSinglePeriodSelect =true;
                                                                                //                               final  STime = DateFormat('hh:mm a').format(start);
                                                                                //                               data["item_condition"]["period"].text = "From ${STime}";
                                                                                //                               data["item_condition"]["fromperiod"]="";
                                                                                //                               data["item_condition"]["toperiod"]="";
                                                                                //                               data["item_condition"]["fromperiodtime"]="";
                                                                                //                               data["item_condition"]["toperiodtime"]="";
                                                                                //                               final  STime24 = DateFormat('HH:mm').format(start);
                                                                                //                               data["item_condition"]["fromperiodtime"] = STime24.toString();
                                                                                //
                                                                                //                               data["item_condition"]["FromPeriodTimeFill"]= start;
                                                                                //                             });
                                                                                //                           }else{
                                                                                //                             setState((){
                                                                                //                               isItemSinglePeriodSelect = false;
                                                                                //                               Duration diff = DateTime.parse(end).difference(start);
                                                                                //                               diff.inHours !=0? data["item_condition"]["duration"].text = "${diff.inHours.toString()} Hours": diff.inSeconds !=00?   data["item_condition"]["duration"].text = "${diff.inMinutes.toString()} Minutes" :   data["item_condition"]["duration"].text = "${diff.inSeconds.toString()} Seconds";
                                                                                //                               final  FTime = DateFormat('hh:mm a').format(start);
                                                                                //                               final  ToTime = DateFormat('hh:mm a').format(DateTime.parse(end));
                                                                                //                               data["item_condition"]["period"].text = "${FTime} - ${ToTime}";
                                                                                //                               data["item_condition"]["fromperiod"]="";
                                                                                //                               data["item_condition"]["toperiod"]="";
                                                                                //                               data["item_condition"]["fromperiodtime"]="";
                                                                                //                               data["item_condition"]["toperiodtime"]="";
                                                                                //                               final  FTime24 = DateFormat('HH:mm').format(start);
                                                                                //                               final  ToTime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                                                                                //                               data["item_condition"]["fromperiodtime"] = FTime24.toString();
                                                                                //                               data["item_condition"]["toperiodtime"] = ToTime24.toString();
                                                                                //                               data["item_condition"]["FromPeriodTimeFill"]= start;
                                                                                //                               data["item_condition"]["ToPeriodTimeFIll"]= DateTime.parse(end);
                                                                                //                             });
                                                                                //                           }
                                                                                //                         }).showPicker(context);
                                                                                //                   }
                                                                                //                   else{
                                                                                //                     itemLavel.DateTimeRangePickerItemLavel(
                                                                                //                         startText: "From",
                                                                                //                         endText: "To",
                                                                                //                         doneText: "Done",
                                                                                //                         cancelText: "Cancel",
                                                                                //                         interval: 1,
                                                                                //                         mode: itemLavel.DateTimeRangePickerModeItemLavel.dateAndTime,
                                                                                //                         minimumTime: DateTime.now(),
                                                                                //                         initialStartTime: data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)): data["item_condition"]["FromPeriodDateFill"],
                                                                                //                         initialEndTime:data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["ToPeriodDateFill"] ,
                                                                                //                         maximumFromTime: OfferFromDate,
                                                                                //                         maximumToTime: OfferToDate,
                                                                                //                         use24hFormat: false,
                                                                                //                         onConfirm: (start, end) {
                                                                                //                           if(end == "NotPick"){
                                                                                //                             setState((){
                                                                                //                               data["item_condition"]["duration"].clear();
                                                                                //                               isItemSinglePeriodSelect =true;
                                                                                //                               final  STime = DateFormat('dd-MMM-yyyy hh:mm a').format(start);
                                                                                //                               data["item_condition"]["period"].text = "From ${STime}";
                                                                                //                               data["item_condition"]["fromperiod"]="";
                                                                                //                               data["item_condition"]["toperiod"]="";
                                                                                //                               data["item_condition"]["fromperiodtime"]="";
                                                                                //                               data["item_condition"]["toperiodtime"]="";
                                                                                //                               final  SDate = DateFormat('dd-MM-yyyy').format(start);
                                                                                //                               final  STime24 = DateFormat('HH:mm').format(start);
                                                                                //                               data["item_condition"]["fromperiodtime"] = STime24.toString();
                                                                                //                               data["item_condition"]["fromperiod"] = SDate.toString();
                                                                                //                               data["item_condition"]["FromPeriodDateFill"]= start;
                                                                                //                             });
                                                                                //
                                                                                //                           }else{
                                                                                //                             setState((){
                                                                                //
                                                                                //                               isItemSinglePeriodSelect = false;
                                                                                //                               // print(end);print(start);
                                                                                //                               int totalDays = DateTime.parse(end).difference(start).inDays;
                                                                                //                               int years = totalDays ~/ 365;
                                                                                //                               int months = (totalDays-years*365) ~/ 30;
                                                                                //                               int days = totalDays-years*365-months*30;
                                                                                //                               int doneHours = years*365*24;
                                                                                //                               int hours = DateTime.parse(end).difference(start).inHours  -(doneHours) -(months*30*24) - (days*24);
                                                                                //                               int min = (((DateTime.parse(end).difference(start).inMinutes - (years*365*24*60)) -(months*30*24*60)) - (days*24*60) )-hours*60;
                                                                                //                               String empty = "";
                                                                                //                               data["item_condition"]["duration"].text = "";
                                                                                //                               data["item_condition"]["fromperiod"]="";
                                                                                //                               data["item_condition"]["toperiod"]="";
                                                                                //                               data["item_condition"]["fromperiodtime"]="";
                                                                                //                               data["item_condition"]["toperiodtime"]="";
                                                                                //                               data["item_condition"]["duration"].text ="${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                                                                                //                               final  FTime = DateFormat('dd-MMM-yyyy').format(start);
                                                                                //                               final  ToTime = DateFormat('dd-MMM-yyyy').format(DateTime.parse(end));
                                                                                //                               data["item_condition"]["period"].text = "${FTime}-${ToTime}";
                                                                                //                               final  SDate = DateFormat('dd-MM-yyyy').format(start);
                                                                                //                               final  STime24 = DateFormat('HH:mm').format(start);
                                                                                //                               data["item_condition"]["fromperiodtime"] = STime24.toString();
                                                                                //                               data["item_condition"]["fromperiod"] = SDate.toString();
                                                                                //                               final  EDate = DateFormat('dd-MM-yyyy').format(DateTime.parse(end));
                                                                                //                               final  ETime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                                                                                //                               data["item_condition"]["toperiodtime"] = ETime24.toString();
                                                                                //                               data["item_condition"]["toperiod"] = EDate.toString();
                                                                                //                               data["item_condition"]["FromPeriodDateFill"]= start;
                                                                                //                               data["item_condition"]["ToPeriodDateFill"]= DateTime.parse(end);
                                                                                //
                                                                                //                             });
                                                                                //
                                                                                //                           }
                                                                                //                         }).showPicker(context);
                                                                                //                   }
                                                                                //                 }
                                                                                //
                                                                                //               },
                                                                                //               keyboardType: TextInputType.text,
                                                                                //               decoration: InputDecoration(hintText: "Period", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                //                 focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                //                 enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                //                 floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                //                 contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                //                 border: const OutlineInputBorder(),
                                                                                //               ),
                                                                                //               style: Black87HintStyle,
                                                                                //             ),
                                                                                //           ),
                                                                                //           Positioned(
                                                                                //               bottom:1,left:2,
                                                                                //               child: InkWell(
                                                                                //                 onTap:(){
                                                                                //                   setState((){
                                                                                //                     data["item_condition"]["period"].clear();
                                                                                //                     data["item_condition"]["fromperiod"]="";
                                                                                //                     data["item_condition"]["toperiod"]="";
                                                                                //                     data["item_condition"]["fromperiodtime"]="";
                                                                                //                     data["item_condition"]["toperiodtime"]="";
                                                                                //                     data["showItemPeriod"] = false;
                                                                                //                   });
                                                                                //                 },
                                                                                //                 child: CircleAvatar(
                                                                                //                   radius:8,
                                                                                //                   backgroundColor: Color(
                                                                                //                       0x3389F6B9) ,
                                                                                //                   child: Center(
                                                                                //                       child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                //                   ),
                                                                                //                 ),
                                                                                //               ))
                                                                                //         ],
                                                                                //       ),
                                                                                //       const SizedBox(height:5,),
                                                                                //       const Padding(
                                                                                //         padding: EdgeInsets.only(left:8.0),
                                                                                //         child: Text("Period", style: BlackDescStyle,),
                                                                                //       ),
                                                                                //     ],
                                                                                //   ),
                                                                                // ):SizedBox(),

                                                                                data["item_condition"]["periodicity"] == "Today" ||
                                                                                    data["item_condition"]["periodicity"] == "Tomorrow" ||
                                                                                    data["item_condition"]["periodicity"] == "Sunday" ||
                                                                                    data["item_condition"]["periodicity"] == "Monday" ||
                                                                                    data["item_condition"]["periodicity"] == "Tuesday" ||
                                                                                    data["item_condition"]["periodicity"] == "Wednesday" ||
                                                                                    data["item_condition"]["periodicity"] == "Thursday" ||
                                                                                    data["item_condition"]["periodicity"] == "Friday" ||
                                                                                    data["item_condition"]["periodicity"] == "Saturday"? SizedBox():
                                                                                data["showItemPeriod"] == true?    Padding(
                                                                                  padding: EdgeInsets.only(right:10,top:2),
                                                                                  child: Column(
                                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                                    children: [
                                                                                      Stack(
                                                                                        children: [
                                                                                          Container(
                                                                                            height: 35,
                                                                                            padding:EdgeInsets.only(left:12),
                                                                                            decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                                                              BoxShadow(
                                                                                                  blurRadius: 2.0,
                                                                                                  color: Colors.black54,
                                                                                                  offset: Offset(0.0, 0.5) ),
                                                                                            ], borderRadius: BorderRadius.circular(5)),
                                                                                            width: isMobile?width*0.55:tabWidth*0.55,
                                                                                            child: TextFormField(
                                                                                              controller:  data["item_condition"]["period"],
                                                                                              readOnly: true,
                                                                                              onTap:(){

                                                                                                ItemDatePicker(
                                                                                                    startText: "From",
                                                                                                    endText: "To",
                                                                                                    doneText: "Done",
                                                                                                    cancelText: "Cancel",
                                                                                                    interval: 1,
                                                                                                    mode: ItemDatePickerMode.date,
                                                                                                    minimumTime: DateTime.now(),
                                                                                                    maximumFromTime: OfferFromDate,
                                                                                                    maximumToTime: OfferToDate,
                                                                                                    initialStartTime:data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["FromPeriodDateFill"],
                                                                                                    initialEndTime:data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["ToPeriodDateFill"] ,
                                                                                                    use24hFormat: false,
                                                                                                    onConfirm:  (start, end) {
                                                                                                      if(end == "NotPick"){



                                                                                                        setState((){
                                                                                                          data["isItemSinglePeriodSelect"] =true;
                                                                                                          data["item_condition"]["periodTime"].clear();
                                                                                                          data["item_condition"]["duration"].clear();

                                                                                                          final  STime = DateFormat('dd-MMM-yyyy hh:mm a').format(start);
                                                                                                          data["item_condition"]["period"].text = "From ${STime}";
                                                                                                          data["item_condition"]["fromperiod"]="";
                                                                                                          data["item_condition"]["toperiod"]="";

                                                                                                          final  SDate = DateFormat('dd-MM-yyyy').format(start);
                                                                                                          final  STime24 = DateFormat('HH:mm').format(start);
                                                                                                          data["item_condition"]["fromperiod"] = SDate.toString();
                                                                                                          data["item_condition"]["FromPeriodDateFill"]= start;

                                                                                                        });setModalState((){});
                                                                                                      }else{
                                                                                                        setState((){
                                                                                                          data["isItemSinglePeriodSelect"] =false;
                                                                                                          data["item_condition"]["periodTime"].clear();
                                                                                                          data["item_condition"]["duration"].clear();
                                                                                                          int totalDays = DateTime.parse(end).difference(start).inDays;
                                                                                                          int years = totalDays ~/ 365;
                                                                                                          int months = (totalDays-years*365) ~/ 30;
                                                                                                          int days = totalDays-years*365-months*30;
                                                                                                          int doneHours = years*365*24;
                                                                                                          int hours = DateTime.parse(end).difference(start).inHours  -(doneHours) -(months*30*24) - (days*24);
                                                                                                          int min = (((DateTime.parse(end).difference(start).inMinutes - (years*365*24*60)) -(months*30*24*60)) - (days*24*60) )-hours*60;
                                                                                                          String empty = "";
                                                                                                          data["item_condition"]["duration"].text = "";
                                                                                                          data["item_condition"]["fromperiod"]="";
                                                                                                          data["item_condition"]["toperiod"]="";
                                                                                                          data["item_condition"]["duration"].text ="${years != 0 ? '${years} Year(s)': empty} ${ months != 0 ? '${months} Month(s)': empty } ${days != 0 ?'${days} Day(s)': empty } ${ hours != 0 ?'${hours} Hour(s)': empty } ${ min != 0 ?'${min} Minute(s)': empty}";
                                                                                                          final  FTime = DateFormat('dd-MMM-yyyy').format(start);
                                                                                                          final  ToTime = DateFormat('dd-MMM-yyyy').format(DateTime.parse(end));
                                                                                                          data["item_condition"]["period"].text = "${FTime}-${ToTime}";
                                                                                                          final  SDate = DateFormat('dd-MM-yyyy').format(start);
                                                                                                          data["item_condition"]["fromperiod"] = SDate.toString();
                                                                                                          final  EDate = DateFormat('dd-MM-yyyy').format(DateTime.parse(end));
                                                                                                          data["item_condition"]["toperiod"] = EDate.toString();
                                                                                                          data["item_condition"]["FromPeriodDateFill"]= start;
                                                                                                          data["item_condition"]["ToPeriodDateFill"]= DateTime.parse(end);

                                                                                                        });setModalState((){});
                                                                                                      }
                                                                                                    }).showPicker(context);

                                                                                                // FromToDatePicker(context,FirstDate: DateTime.now(),LastDate: DateTime.now().add(Duration(days: 365)));
                                                                                              },
                                                                                              keyboardType: TextInputType.text,
                                                                                              decoration: InputDecoration(hintText: "Period Date", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                                contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                                border: const OutlineInputBorder(),
                                                                                              ),
                                                                                              style: Black87HintStyle,
                                                                                            ),
                                                                                          ),
                                                                                          Positioned(
                                                                                              bottom:1,left:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["item_condition"]["period"].clear();
                                                                                                    data["item_condition"]["fromperiod"]="";
                                                                                                    data["item_condition"]["toperiod"]="";
                                                                                                    data["showItemPeriod"] = false;
                                                                                                    ItemsList[index]["item_condition"]["itemDisableFields"].add("DatePeriod");
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Color(0x3389F6B9) ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              ))
                                                                                        ],
                                                                                      ),
                                                                                      const SizedBox(height:5),
                                                                                      const Padding(
                                                                                        padding: EdgeInsets.only(left:8.0),
                                                                                        child: Text("Period Date", style: BlackDescStyle,),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ):
                                                                                TextForNewAdd(context,text: "Period Date",onTap: (){
                                                                                  setState(() {
                                                                                    data["showItemPeriod"] = true;
                                                                                    ItemsList[index]["item_condition"]["itemDisableFields"].remove("DatePeriod");
                                                                                  });setModalState((){});
                                                                                }),




                                                                                data["showItemPeriodTime"] == true?    Padding(
                                                                                  padding: EdgeInsets.only(right:10,top:2),
                                                                                  child: Column(
                                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                                    children: [
                                                                                      Stack(
                                                                                        children: [
                                                                                          Container(
                                                                                            height: 35,
                                                                                            padding:EdgeInsets.only(left:12),
                                                                                            decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                                                              BoxShadow(
                                                                                                  blurRadius: 2.0,
                                                                                                  color: Colors.black54,
                                                                                                  offset: Offset(0.0, 0.5) ),
                                                                                            ], borderRadius: BorderRadius.circular(5)),
                                                                                            width: isMobile?width*0.55:tabWidth*0.55,
                                                                                            child: TextFormField(
                                                                                              controller:  data["item_condition"]["periodTime"],
                                                                                              readOnly: true,

                                                                                              onTap:(){
                                                                                                print("Call");
                                                                                                ItemTimePicker(
                                                                                                    startText: "From",
                                                                                                    endText: "To",
                                                                                                    doneText: "Done",
                                                                                                    cancelText: "Cancel",
                                                                                                    interval: 1,

                                                                                                    mode: ItemTimePickerMode.time,
                                                                                                    type:data["item_condition"]["periodicity"] == "Today" ?"Today":"Else",
                                                                                                    initialStartTime:  data["item_condition"]["periodTime"].text.isEmpty?
                                                                                                    data["item_condition"]["periodicity"] == "Today" ?
                                                                                                    DateTime.now().add(Duration(hours: 1)):
                                                                                                    DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().toString())} 00:01:00"):
                                                                                                    data["item_condition"]["FromPeriodTimeFill"],
                                                                                                    initialEndTime:  data["item_condition"]["periodTime"].text.isEmpty?
                                                                                                    data["item_condition"]["periodicity"] == "Today" ?
                                                                                                    DateTime.now().add(Duration(hours: 1)):
                                                                                                    DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().toString())} 00:01:00"): data["item_condition"]["ToPeriodTimeFill"],

                                                                                                    use24hFormat: false,
                                                                                                    onConfirm: (start, end) {
                                                                                                      print(start);
                                                                                                      print(end);
                                                                                                      if(end == "NotPick"){

                                                                                                        setState((){
                                                                                                          data["item_condition"]["periodicity"] == "Today" ||
                                                                                                              data["item_condition"]["periodicity"] == "Tomorrow" ||
                                                                                                              data["item_condition"]["periodicity"] == "Sunday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Monday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Tuesday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Wednesday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Thursday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Friday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Saturday"?
                                                                                                          data["isItemSinglePeriodSelect"] = true :null;
                                                                                                          final  STime = DateFormat('hh:mm a').format(start);
                                                                                                          data["item_condition"]["periodTime"].text = "From ${STime}";
                                                                                                          data["item_condition"]["fromperiodtime"]="";
                                                                                                          data["item_condition"]["toperiodtime"]="";
                                                                                                          final  STime24 = DateFormat('HH:mm').format(start);
                                                                                                          data["item_condition"]["fromperiodtime"] = STime24.toString();
                                                                                                          data["item_condition"]["FromPeriodTimeFill"]= start;

                                                                                                        });setModalState((){});
                                                                                                      }else{
                                                                                                        setState((){
                                                                                                          data["item_condition"]["periodicity"] == "Today" ||
                                                                                                              data["item_condition"]["periodicity"] == "Tomorrow" ||
                                                                                                              data["item_condition"]["periodicity"] == "Sunday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Monday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Tuesday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Wednesday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Thursday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Friday" ||
                                                                                                              data["item_condition"]["periodicity"] == "Saturday"?
                                                                                                          data["isItemSinglePeriodSelect"] = false :null;

                                                                                                          Duration diff = DateTime.parse(end).difference(start);
                                                                                                          String TempDuration = "";
                                                                                                          diff.inHours !=0?TempDuration = "${diff.inHours.toString()} Hours": diff.inSeconds !=00?  TempDuration = "${diff.inMinutes.toString()} Minutes" :   TempDuration = "${diff.inSeconds.toString()} Seconds";
                                                                                                          data["item_condition"]["duration"].text.isEmpty ?  data["item_condition"]["duration"].text = TempDuration :  data["item_condition"]["duration"].text = "${ data["item_condition"]["duration"].text}${TempDuration}";

                                                                                                          final  FTime = DateFormat('hh:mm a').format(start);
                                                                                                          final  ToTime = DateFormat('hh:mm a').format(DateTime.parse(end));
                                                                                                          data["item_condition"]["periodTime"].text = "${FTime} - ${ToTime}";
                                                                                                          data["item_condition"]["fromperiodtime"]="";
                                                                                                          data["item_condition"]["toperiodtime"]="";
                                                                                                          final  FTime24 = DateFormat('HH:mm').format(start);
                                                                                                          final  ToTime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                                                                                                          data["item_condition"]["fromperiodtime"] = FTime24.toString();
                                                                                                          data["item_condition"]["toperiodtime"] = ToTime24.toString();
                                                                                                          data["item_condition"]["FromPeriodTimeFill"]= start;
                                                                                                          data["item_condition"]["ToPeriodTimeFIll"]= DateTime.parse(end);

                                                                                                        });setModalState((){});
                                                                                                      }
                                                                                                    }).showPicker(context);

                                                                                                // FromToDatePicker(context,FirstDate: DateTime.now(),LastDate: DateTime.now().add(Duration(days: 365)));
                                                                                              },
                                                                                              keyboardType: TextInputType.text,
                                                                                              decoration: InputDecoration(hintText: "Period Time", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                                contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                                border: const OutlineInputBorder(),
                                                                                              ),
                                                                                              style: Black87HintStyle,
                                                                                            ),
                                                                                          ),
                                                                                          Positioned(
                                                                                              bottom:1,left:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["item_condition"]["periodTime"].clear();
                                                                                                    data["item_condition"]["fromperiodtime"]="";
                                                                                                    data["item_condition"]["toperiodtime"]="";
                                                                                                    data["showItemPeriodTime"]  = false;
                                                                                                    ItemsList[index]["item_condition"]["itemDisableFields"].add("TimePeriod");
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Color(0x3389F6B9) ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              ))
                                                                                        ],
                                                                                      ),
                                                                                      const SizedBox(height:5),
                                                                                      const Padding(
                                                                                        padding: EdgeInsets.only(left:8.0),
                                                                                        child: Text("Period Time", style: BlackDescStyle,),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ): TextForNewAdd(context,text: "Period Time",onTap: (){
                                                                                  setState(() {
                                                                                    data["showItemPeriodTime"]  = true;
                                                                                    ItemsList[index]["item_condition"]["itemDisableFields"].remove("TimePeriod");
                                                                                  });setModalState((){});
                                                                                }),
                                                                                data["showItemDuration"]==true?   Padding(
                                                                                  padding: EdgeInsets.only(right:10),
                                                                                  child: Column(
                                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                                    children: [
                                                                                      Stack(
                                                                                        children: [
                                                                                          Container(
                                                                                            height: 35,
                                                                                            padding:EdgeInsets.only(left:12),
                                                                                            decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                                                              BoxShadow(
                                                                                                  blurRadius: 2.0,
                                                                                                  color: Colors.black54,
                                                                                                  offset: Offset(0.0, 0.5) ),
                                                                                            ], borderRadius: BorderRadius.circular(5)),
                                                                                            width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                                                                                            child: TextFormField(
                                                                                              inputFormatters: [maskFormatter],
                                                                                              controller:  data["item_condition"]["duration"],
                                                                                              keyboardType: TextInputType.number,
                                                                                              onTap:(){
                                                                                                if(isItemSinglePeriodSelect==true){
                                                                                                  showDurationPickerNew(context,setState,setModalState,data["item_condition"]["duration"]);
                                                                                                }else{

                                                                                                }
                                                                                              },
                                                                                              readOnly: true,
                                                                                              // onFieldSubmitted: (value){
                                                                                              //   print(value);
                                                                                              //   String empty = "";
                                                                                              //   int years =  value!.length < 2 ?int.parse(value) :int.parse(value.split(":").first);
                                                                                              //   int months =  value.length > 3 ?int.parse(value.split(":")[1]):0;
                                                                                              //   int days =  value.length > 5 ?int.parse(value.split(":")[2]):0;
                                                                                              //   int hours =  value.length > 7 ?int.parse(value.split(":")[3]):0;
                                                                                              //   int min =  value.length > 9 ?int.parse(value.split(":")[4]):0;
                                                                                              //   setState(() {
                                                                                              //     data["item_condition"]["duration"].text ="${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                                                                                              //   });
                                                                                              //   print( data["item_condition"]["duration"].text);
                                                                                              // },
                                                                                              // readOnly: isItemSinglePeriodSelect==true?false:true,
                                                                                              decoration: InputDecoration(hintText: "YY : MM : DD : HH : MI", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                                contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                                border: const OutlineInputBorder(),
                                                                                                // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                              ),
                                                                                              style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                                                                                            ),
                                                                                          ),
                                                                                          Positioned(
                                                                                              bottom:1,left:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["item_condition"]["duration"].clear();
                                                                                                    data["showItemDuration"] = false;
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Color(
                                                                                                      0x3389F6B9) ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              ))
                                                                                        ],
                                                                                      ),
                                                                                      const SizedBox(height:5,),
                                                                                      const Padding(
                                                                                        padding: EdgeInsets.only(left:8.0),
                                                                                        child: Text("Duration(YY:MM:DD:HH:MI)", style: BlackDescStyle,),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ):SizedBox(),

                                                                                Column(
                                                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                                                  crossAxisAlignment:CrossAxisAlignment.start,
                                                                                  children: [
                                                                                    Container(
                                                                                      height:40,
                                                                                      decoration:BoxDecoration(
                                                                                        color:Colors.transparent,
                                                                                        boxShadow: [
                                                                                          BoxShadow(
                                                                                              blurRadius: 1.5,
                                                                                              color: Colors.black26,
                                                                                              offset: Offset(0.0, 0.5) ),
                                                                                        ],
                                                                                      ),

                                                                                      width: MediaQuery.sizeOf(context).width*1.0,
                                                                                      child: Padding(
                                                                                        padding: const EdgeInsets.all(0.0),
                                                                                        child: CustomSearchableDropDownForUs(
                                                                                          initialValue:  data["type"] == "old" ? data["fillSelectedPerson"]:[],
                                                                                          items: ServicePersonList,
                                                                                          menuHeight: 30.0,
                                                                                          label: 'Select Service/Delivery person',
                                                                                          multiSelectTag: 'Names',
                                                                                          multiSelectValuesAsWidget: true,
                                                                                          decoration: BoxDecoration(
                                                                                            color: Colors.white,
                                                                                            borderRadius: BorderRadius.circular(5),
                                                                                          ),
                                                                                          multiSelect: true,
                                                                                          dropDownMenuItems: ServicePersonList.map((item) {
                                                                                            return item.displayname;
                                                                                          }).toList() ??
                                                                                              [],
                                                                                          onChanged: (value){
                                                                                            if(value!=null)
                                                                                            {
                                                                                              setState(() {
                                                                                                data["item_condition"]["servicepersons"] =   jsonDecode(value).map((e) =>e["id"] ).toList();

                                                                                              });setModalState((){});
                                                                                            }
                                                                                          },
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                    const SizedBox(height:3,),
                                                                                    const Padding(
                                                                                      padding: EdgeInsets.only(left:4.0),
                                                                                      child: Text("Service/Delivery person", style: BlackDescStyle,),
                                                                                    ),
                                                                                  ],
                                                                                ),
                                                                              ],
                                                                            )):SizedBox(),
                                                                        SizedBox(height: data["showItemCondition"]==true? 10:0,),
                                                                        data["showItemCondition"]==true?SizedBox(
                                                                            height: 60,
                                                                            width: double.infinity,
                                                                            child: ListView(
                                                                              scrollDirection: Axis.horizontal,
                                                                              physics: const ClampingScrollPhysics(),
                                                                              shrinkWrap: false,
                                                                              padding: EdgeInsets.only(top:5),
                                                                              children: [
                                                                                const SizedBox(width: 12,),
                                                                                data["showItemPriority"]==true?    Padding(
                                                                                  padding: EdgeInsets.only(right:10),
                                                                                  child: Column(
                                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                                    children: [
                                                                                      Stack(
                                                                                        children: [
                                                                                          DropdownButtonHideUnderline(
                                                                                            child: DropdownButton2(
                                                                                              isExpanded: true,
                                                                                              items:priority.map((item) => DropdownMenuItem (
                                                                                                value: item,
                                                                                                child: Text(
                                                                                                  item,
                                                                                                  style:  const TextStyle(
                                                                                                    fontSize: 15,
                                                                                                    fontWeight: FontWeight.w400,
                                                                                                    color:  Colors.black,
                                                                                                  ),
                                                                                                  overflow: TextOverflow.ellipsis,
                                                                                                ),
                                                                                              )).toList(),
                                                                                              value:  data["item_condition"]["priority"]==""?null: data["item_condition"]["priority"],
                                                                                              onChanged: (newValue) {
                                                                                                setState(() {
                                                                                                  data["item_condition"]["priority"] = newValue!;
                                                                                                });setModalState((){});
                                                                                              },
                                                                                              hint: const Text(
                                                                                                  "Priority",
                                                                                                  style:greyHintStyle
                                                                                              ),
                                                                                              iconStyleData: const IconStyleData(
                                                                                                icon: Icon(Icons.keyboard_arrow_down_sharp,),
                                                                                                iconSize: 10,
                                                                                                iconEnabledColor: Colors.white,
                                                                                                iconDisabledColor:Colors.white,
                                                                                              ),
                                                                                              buttonStyleData: ButtonStyleData(
                                                                                                  height:  35,
                                                                                                  width: ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3,
                                                                                                  padding: const EdgeInsets.only(left: 20, right: 3),
                                                                                                  decoration: BoxDecoration(borderRadius: BorderRadius.circular(5),color: Colors.white),
                                                                                                  elevation:  1,
                                                                                                  overlayColor: MaterialStateProperty.all(Colors.white)
                                                                                              ),
                                                                                              menuItemStyleData: MenuItemStyleData(
                                                                                                height: 33,
                                                                                                selectedMenuItemBuilder: (context, child) {
                                                                                                  return     Container(
                                                                                                    padding: const EdgeInsets.only(left: 0, right: 0),
                                                                                                    width: ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3,
                                                                                                    height: 30,color:Constants.primaryColor1,
                                                                                                    child: Row(
                                                                                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                                                      children: [
                                                                                                        child,
                                                                                                        const Padding(
                                                                                                          padding: EdgeInsets.only(right: 5.0),
                                                                                                          child: Icon(Icons.done,color: Colors.white,size: 20,),
                                                                                                        )
                                                                                                      ],
                                                                                                    ),
                                                                                                  );
                                                                                                },
                                                                                                padding: const EdgeInsets.only(left: 8, right: 3),
                                                                                              ),
                                                                                              dropdownStyleData: DropdownStyleData(
                                                                                                maxHeight: 200,
                                                                                                padding: const EdgeInsets.only(left: 0, right: 0),
                                                                                                width: ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3,
                                                                                                decoration: BoxDecoration(
                                                                                                    borderRadius: BorderRadius.circular(5),
                                                                                                    color: Colors.white,
                                                                                                    border: Border.all(color:  Constants.primaryColor1,width: 1)
                                                                                                ),
                                                                                                elevation: 1,
                                                                                                scrollbarTheme: ScrollbarThemeData(
                                                                                                    radius:  const Radius.circular(20),
                                                                                                    thickness: MaterialStateProperty.all(5.0),
                                                                                                    minThumbLength: 20
                                                                                                ),
                                                                                                offset: const Offset(0, -5),
                                                                                              ),

                                                                                              style: const TextStyle(
                                                                                                fontSize: 14,
                                                                                                fontWeight: FontWeight.w400,
                                                                                                color: Colors.black,
                                                                                              ),

                                                                                            ),
                                                                                          ),
                                                                                          Positioned(
                                                                                              bottom:1,left:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["item_condition"]["priority"]=="";
                                                                                                    data["showItemPriority"] = false;
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Color(0x3389F6B9) ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              )),
                                                                                        ],
                                                                                      ),
                                                                                      const SizedBox(height:5,),
                                                                                      const Padding(
                                                                                        padding: EdgeInsets.only(left:8.0),
                                                                                        child: Text("Priority", style: BlackDescStyle,),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ):SizedBox(),
                                                                                data["showItemExpiry"] == true? Padding(
                                                                                  padding: EdgeInsets.only(right:10),
                                                                                  child: Column(
                                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                                    children: [
                                                                                      Stack(
                                                                                        children: [
                                                                                          Container(
                                                                                            height: 35,
                                                                                            padding: EdgeInsets.only(left:12),
                                                                                            decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                                                              BoxShadow(
                                                                                                  blurRadius: 2.0,
                                                                                                  color: Colors.black54,
                                                                                                  offset: Offset(0.0, 0.5) ),
                                                                                            ], borderRadius: BorderRadius.circular(5)),
                                                                                            width: ResponsiveHelper.isMobile(context)? width*0.35:tabWidth*0.35,
                                                                                            child: TextFormField(
                                                                                              onTap:(){
                                                                                                showGeneralDialog(
                                                                                                    barrierColor: Colors.black.withOpacity(0.5),
                                                                                                    transitionBuilder: (context, a1, a2, widget) {
                                                                                                      return Transform.scale(
                                                                                                        scale: a1.value,
                                                                                                        child: Opacity(
                                                                                                            opacity: a1.value,
                                                                                                            child: Dialog(
                                                                                                                clipBehavior: Clip.hardEdge,

                                                                                                                shape: RoundedRectangleBorder(
                                                                                                                  borderRadius: BorderRadius.circular(15),
                                                                                                                ),
                                                                                                                insetPadding: const EdgeInsets.symmetric(horizontal: 25),
                                                                                                                backgroundColor: Colors.white,
                                                                                                                child:SizedBox(
                                                                                                                  height: ResponsiveHelper.isMobile(context)?height*0.3:tabWidth*0.5,
                                                                                                                  width: ResponsiveHelper.isMobile(context)?null:tabWidth*0.8,
                                                                                                                  child:  Column(
                                                                                                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                                                                                                    children: [
                                                                                                                      Flexible(
                                                                                                                        child: Padding(
                                                                                                                            padding: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 15.0),
                                                                                                                            child: CupertinoTheme(
                                                                                                                              data: CupertinoThemeData(
                                                                                                                                textTheme: CupertinoTextThemeData(
                                                                                                                                    dateTimePickerTextStyle: BlackBottomHeadStyle18500
                                                                                                                                ),
                                                                                                                              ),
                                                                                                                              child: CupertinoDatePicker(
                                                                                                                                mode: CupertinoDatePickerMode.dateAndTime,
                                                                                                                                dateOrder: DatePickerDateOrder.dmy,
                                                                                                                                use24hFormat: false,
                                                                                                                                minuteInterval: 1,
                                                                                                                                minimumDate:DateTime.now(),
                                                                                                                                initialDateTime: data["item_condition"]["expiry"].text.isEmpty || data["item_condition"]["expiry"].text == "" ?DateTime.now():data["item_condition"]["ExpiryDateTime"],
                                                                                                                                onDateTimeChanged: (DateTime newDateTime) {
                                                                                                                                  setState((){
                                                                                                                                    data["item_condition"]["ExpiryDateTime"] = newDateTime;
                                                                                                                                    ItemExDTime = newDateTime;
                                                                                                                                  });setModalState((){});
                                                                                                                                },
                                                                                                                                maximumDate:OfferExpiryDateTime,
                                                                                                                              ),
                                                                                                                            )
                                                                                                                        ),
                                                                                                                      ),
                                                                                                                      Padding(
                                                                                                                        padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10),
                                                                                                                        child: ElevatedButton(
                                                                                                                          style: ButtonStyle(
                                                                                                                              backgroundColor: MaterialStateProperty.all(Constants.primaryColor1 ),
                                                                                                                              elevation: MaterialStateProperty.all(0),
                                                                                                                              foregroundColor: MaterialStateProperty.all(Colors.transparent),
                                                                                                                              overlayColor: MaterialStateProperty.all(Colors.transparent),
                                                                                                                              shadowColor: MaterialStateProperty.all(Colors.transparent),
                                                                                                                              shape: MaterialStateProperty.all(RoundedRectangleBorder(
                                                                                                                                borderRadius: BorderRadius.circular(8),
                                                                                                                              ),)
                                                                                                                          ),
                                                                                                                          onPressed: () {
                                                                                                                            setState((){
                                                                                                                              final  STime = DateFormat('dd-MM-yyyy HH:mm').format(ItemExDTime!);
                                                                                                                              data["item_condition"]["expiry"].text = STime ;
                                                                                                                            });setModalState((){});
                                                                                                                            Navigator.pop(context);
                                                                                                                          },
                                                                                                                          child: const Padding(
                                                                                                                            padding: EdgeInsets.all(12.0),
                                                                                                                            child: Center(
                                                                                                                              child: Text('Save',
                                                                                                                                style: TextStyle(fontSize: 14, color: Colors.white, fontWeight: FontWeight.w500),
                                                                                                                                textAlign: TextAlign.center,
                                                                                                                              ),
                                                                                                                            ),
                                                                                                                          ),
                                                                                                                        ),
                                                                                                                      ),
                                                                                                                    ],
                                                                                                                  ),
                                                                                                                )
                                                                                                            )),
                                                                                                      );
                                                                                                    },
                                                                                                    transitionDuration: const Duration(milliseconds: 300),
                                                                                                    barrierDismissible: true,
                                                                                                    barrierLabel: '',
                                                                                                    context: context,
                                                                                                    pageBuilder: (BuildContext context, Animation<double> animation,
                                                                                                        Animation<double> secondaryAnimation) {
                                                                                                      return const Text('');
                                                                                                    }
                                                                                                );
                                                                                              },
                                                                                              readOnly: true,
                                                                                              controller:  data["item_condition"]["expiry"],
                                                                                              keyboardType: TextInputType.text,
                                                                                              decoration: InputDecoration(hintText: "Expiry", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                                contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                                border: const OutlineInputBorder(),
                                                                                                // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                              ),
                                                                                              style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                                                                                            ),
                                                                                          ),
                                                                                          Positioned(
                                                                                              bottom:1,left:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["item_condition"]["expiry"].clear();
                                                                                                    data["showItemExpiry"]  = false;
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Color(0x3389F6B9) ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              )),
                                                                                        ],
                                                                                      ),
                                                                                      const SizedBox(height:5,),
                                                                                      const Padding(
                                                                                        padding: EdgeInsets.only(left:8.0),
                                                                                        child: Text("Expiry", style: BlackDescStyle,),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ):SizedBox(),
                                                                                data["showItemFromLocation"]==true?  Padding(
                                                                                  padding: EdgeInsets.only(right:10),
                                                                                  child: Column(
                                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                                    children: [
                                                                                      Stack(
                                                                                        children: [
                                                                                          Container(
                                                                                            height: 35,
                                                                                            padding: EdgeInsets.only(left:12),
                                                                                            decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                                                              BoxShadow(
                                                                                                  blurRadius: 2.0,
                                                                                                  color: Colors.black54,
                                                                                                  offset: Offset(0.0, 0.5) ),
                                                                                            ], borderRadius: BorderRadius.circular(5)),
                                                                                            width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                                                                                            child: TextFormField(
                                                                                              controller:  data["item_condition"]["fromlocation"],
                                                                                              onTap:() async {

                                                                                                Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true,isTitleSelectAsAddress: true))).then((value) {
                                                                                                  setState(() {
                                                                                                    data["item_condition"]["fromlocation"].text=value.toString();
                                                                                                  });setModalState((){});
                                                                                                });


                                                                                                //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                                                                                              },
                                                                                              readOnly:true,
                                                                                              keyboardType: TextInputType.text,
                                                                                              decoration: InputDecoration(hintText:"From location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                                contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                                border: const OutlineInputBorder(),
                                                                                                // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                              ),
                                                                                              style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                                                                                            ),
                                                                                          ),
                                                                                          Positioned(
                                                                                              bottom:1,left:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["item_condition"]["fromlocation"].clear();
                                                                                                    data["showItemFromLocation"] = false;
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Color(
                                                                                                      0x3389F6B9) ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              )),
                                                                                          data["showItemTOLocation"]==true?SizedBox():    Positioned(
                                                                                              top:1,right:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["showItemTOLocation"]==true?null:data["showItemTOLocation"] =true ;
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Constants.primaryColor1 ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              ))
                                                                                        ],
                                                                                      ),
                                                                                      const SizedBox(height:5,),
                                                                                      Padding(
                                                                                        padding: EdgeInsets.only(left:4.0),
                                                                                        child: Text("From location", style: BlackDescStyle,),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ):SizedBox(),
                                                                                data["showItemTOLocation"]==true?  Padding(
                                                                                  padding: EdgeInsets.only(right:10),
                                                                                  child: Column(
                                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                                    children: [
                                                                                      Stack(
                                                                                        children: [
                                                                                          Container(
                                                                                            height: 35,
                                                                                            padding: EdgeInsets.only(left:12),
                                                                                            decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                                                              BoxShadow(
                                                                                                  blurRadius: 2.0,
                                                                                                  color: Colors.black54,
                                                                                                  offset: Offset(0.0, 0.5) ),
                                                                                            ], borderRadius: BorderRadius.circular(5)),
                                                                                            width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                                                                                            child: TextFormField(
                                                                                              controller:  data["item_condition"]["tolocation"],
                                                                                              onTap:() async {

                                                                                                Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true,isTitleSelectAsAddress: true))).then((value) {
                                                                                                  setState(() {
                                                                                                    data["item_condition"]["tolocation"].text=value.toString();
                                                                                                  });setModalState((){});
                                                                                                });


                                                                                                //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                                                                                              },
                                                                                              readOnly:true,
                                                                                              keyboardType: TextInputType.text,
                                                                                              decoration: InputDecoration(hintText:"To location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                                contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                                border: const OutlineInputBorder(),
                                                                                                // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                              ),
                                                                                              style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                                                                                            ),
                                                                                          ),
                                                                                          Positioned(
                                                                                              bottom:1,left:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["item_condition"]["tolocation"].clear();
                                                                                                    data["showItemTOLocation"] = false;
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Color(
                                                                                                      0x3389F6B9) ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              )),
                                                                                          data["showItemAtLocation"]==true?SizedBox():  Positioned(
                                                                                              top:1,right:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["showItemAtLocation"] = true ;
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Constants.primaryColor1 ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              ))
                                                                                        ],
                                                                                      ),
                                                                                      const SizedBox(height:5,),
                                                                                      Padding(
                                                                                        padding: EdgeInsets.only(left:4.0),
                                                                                        child: Text("To location", style: BlackDescStyle,),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ):SizedBox(),
                                                                                data["showItemAtLocation"]==true?  Padding(
                                                                                  padding: EdgeInsets.only(right:10),
                                                                                  child: Column(
                                                                                    crossAxisAlignment: CrossAxisAlignment.start,
                                                                                    children: [
                                                                                      Stack(
                                                                                        children: [
                                                                                          Container(
                                                                                            height: 35,
                                                                                            padding: EdgeInsets.only(left:12),
                                                                                            decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                                                              BoxShadow(
                                                                                                  blurRadius: 2.0,
                                                                                                  color: Colors.black54,
                                                                                                  offset: Offset(0.0, 0.5) ),
                                                                                            ], borderRadius: BorderRadius.circular(5)),
                                                                                            width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                                                                                            child: TextFormField(
                                                                                              controller:  data["item_condition"]["atlocation"],
                                                                                              onTap:() async {

                                                                                                Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201),isAppPlaceView: true,isTitleSelectAsAddress: true ))).then((value) {
                                                                                                  setState(() {
                                                                                                    data["item_condition"]["atlocation"].text=value.toString();
                                                                                                  });setModalState((){});
                                                                                                });
                                                                                                //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                                                                                              },
                                                                                              readOnly:true,
                                                                                              keyboardType: TextInputType.text,
                                                                                              decoration: InputDecoration(hintText:"At location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                                                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                                                floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                                                contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                                                border: const OutlineInputBorder(),
                                                                                                // hintText: 'Enter Query',hintStyle: hintstyle,
                                                                                              ),
                                                                                              style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                                                                                            ),
                                                                                          ),
                                                                                          Positioned(
                                                                                              bottom:1,left:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    data["item_condition"]["atlocation"].clear();
                                                                                                    data["showItemAtLocation"] = false;
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Color(
                                                                                                      0x3389F6B9) ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              )),
                                                                                          Positioned(
                                                                                              top:1,right:2,
                                                                                              child: InkWell(
                                                                                                onTap:(){
                                                                                                  setState((){
                                                                                                    Constants.showToast("From Location,To Location and At Location are allowed");
                                                                                                  });setModalState((){});
                                                                                                },
                                                                                                child: CircleAvatar(
                                                                                                  radius:8,
                                                                                                  backgroundColor: Constants.primaryColor1 ,
                                                                                                  child: Center(
                                                                                                      child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                                                  ),
                                                                                                ),
                                                                                              ))
                                                                                        ],
                                                                                      ),
                                                                                      const SizedBox(height:5,),
                                                                                      Padding(
                                                                                        padding: EdgeInsets.only(left:4.0),
                                                                                        child: Text("At location", style: BlackDescStyle,),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ):SizedBox(),

                                                                                const SizedBox(width: 8,),
                                                                              ],
                                                                            )):SizedBox(),
                                                                        const SizedBox(height: 15,),
                                                                        const Divider(height: 2,thickness: 2),
                                                                        const SizedBox(height: 10,),
                                                                      ],
                                                                    ),
                                                                  );
                                                                },
                                                              ),
                                                              Positioned(
                                                                  top:10,left:0,right:0,
                                                                  child:BottomSheetDivider()),
                                                              Positioned.fill(
                                                                  bottom: 0,left: 0,right: 0,top: 0,
                                                                  child:   segmentLoader==true ?
                                                                  Container(
                                                                    color: Colors.black12,

                                                                    width: isMobile ?width:tabWidth,
                                                                    child: const Center(
                                                                        child:   SearchLoading()
                                                                    ),
                                                                  ) : const SizedBox())
                                                            ],
                                                          ),
                                                        );
                                                      },)
                                                  );
                                                })
                                              ]
                                          )  ],
                                      ),
                                    ),
                                  );
                                },),
                              // TODO Offer Bids
                              Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 15,vertical: 10),
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    OfferInstruction1Controller.text == ""?
                                    Flexible(
                                        child: Padding(
                                          padding:  EdgeInsets.symmetric(vertical: 8.0),
                                          child: Text("Tap Edit To Enter Addition Instruction",style:BlackSubCardTitle),
                                        ))
                                        :
                                    ListView(
                                      physics: NeverScrollableScrollPhysics(),
                                      shrinkWrap: true,
                                      children: [
                                        Row (
                                          mainAxisAlignment: MainAxisAlignment.start,
                                          crossAxisAlignment: CrossAxisAlignment.center,
                                          children: [
                                            Flexible(child: Text("${OfferInstruction1Controller.text}",style: BlackSubTitleStyle,)),
                                          ],
                                        ),
                                        OfferInstruction2Controller.text.isEmpty ?SizedBox():  Row (
                                          mainAxisAlignment: MainAxisAlignment.start,
                                          crossAxisAlignment: CrossAxisAlignment.center,
                                          children: [
                                            Flexible(child: Text("${OfferInstruction2Controller.text}",style: BlackSubTitleStyle,)),
                                          ],
                                        ),
                                      ],
                                    ),
                                    Row(
                                      mainAxisAlignment: MainAxisAlignment.end,
                                      children: [
                                        EditBtn((){
                                          Get.bottomSheet(
                                              backgroundColor: Colors.white,
                                              elevation: 0,  shape: RoundedRectangleBorder(
                                              borderRadius: BorderRadius.only(topRight: Radius.circular(20),topLeft: Radius.circular(20))
                                          ),
                                              isDismissible: true,isScrollControlled: true,
                                              StatefulBuilder(builder: (context, setModalState) {
                                                return  ListView(
                                                  shrinkWrap: true,
                                                  physics: NeverScrollableScrollPhysics(),
                                                  children: [
                                                    const Padding(
                                                      padding: EdgeInsets.symmetric(horizontal: 15.0,vertical: 8),
                                                      child: Align(
                                                          alignment: Alignment.topLeft,
                                                          child: Text(
                                                            "Offer Instruction & bids",
                                                            style: BlackFieldStyleBold,
                                                          )),
                                                    ),
                                                    OfferInstruction1Visible==true? Stack(
                                                      children: [
                                                        Padding(
                                                          padding: const EdgeInsets.only(right: 15.0,top:8,bottom: 5,left: 15),
                                                          child: Container(
                                                            height: 37,
                                                            padding: EdgeInsets.only(left:12),
                                                            decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                              BoxShadow(
                                                                  blurRadius: 2.0,
                                                                  color: Colors.black54,
                                                                  offset: Offset(0.0, 0.5) ),
                                                            ], borderRadius: BorderRadius.circular(5)),
                                                            child: TextFormField(
                                                              controller: OfferInstruction1Controller,
                                                              keyboardType: TextInputType.text,
                                                              decoration: InputDecoration(hintText:"Offer Instruction Remarks Bits Counter & details", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                border: const OutlineInputBorder(),
                                                                // hintText: 'Enter Query',hintStyle: hintstyle,
                                                              ),
                                                              onChanged: (v){

                                                                setModalState((){});
                                                              },
                                                              style: Black87HintStyle,
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                            bottom:4,left:17,
                                                            child: InkWell(
                                                              onTap:(){
                                                                setState((){
                                                                  OfferInstruction1Visible = false;
                                                                  offerDisableFields.add("Bid1");
                                                                });
                                                              },
                                                              child: CircleAvatar(
                                                                radius:9,
                                                                backgroundColor: Color(
                                                                    0x3389F6B9) ,
                                                                child: Center(
                                                                    child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                ),
                                                              ),
                                                            )),
                                                        OfferInstruction2Visible==true?SizedBox(): Positioned(
                                                            top:5,right:12,
                                                            child: InkWell(
                                                              onTap:(){
                                                                setState((){
                                                                  OfferInstruction2Visible = true;
                                                                });
                                                                setModalState((){});
                                                              },
                                                              child: CircleAvatar(
                                                                radius:9,
                                                                backgroundColor: Constants.primaryColor1 ,
                                                                child: Center(
                                                                    child:Icon(Icons.add,color: Colors.white,size:14,)
                                                                ),
                                                              ),
                                                            )),
                                                      ],
                                                    ):SizedBox(),
                                                    SizedBox(height: 10,),
                                                    OfferInstruction2Visible==true?   Stack(
                                                      children: [
                                                        Padding(
                                                          padding: const EdgeInsets.only(right: 15.0,top:8,bottom: 5,left: 15),
                                                          child: Container(
                                                            height: 37,
                                                            padding: EdgeInsets.only(left:12),
                                                            decoration: BoxDecoration(color: Colors.white, boxShadow: [
                                                              BoxShadow(
                                                                  blurRadius: 2.0,
                                                                  color: Colors.black54,
                                                                  offset: Offset(0.0, 0.5) ),
                                                            ], borderRadius: BorderRadius.circular(5)),
                                                            child: TextFormField(
                                                              controller: OfferInstruction2Controller,
                                                              keyboardType: TextInputType.text,
                                                              onChanged: (v){

                                                                setModalState((){});
                                                              },
                                                              decoration: InputDecoration(hintText:"Enter Offer Instruction Remarks", fillColor:  Colors.white, hintStyle: greyHintStyle,
                                                                focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                                                                floatingLabelBehavior: FloatingLabelBehavior.never,
                                                                contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                                                                border: const OutlineInputBorder(),

                                                                // hintText: 'Enter Query',hintStyle: hintstyle,
                                                              ),
                                                              style: Black87HintStyle,
                                                            ),
                                                          ),
                                                        ),
                                                        Positioned(
                                                            bottom:4,left:17,
                                                            child: InkWell(
                                                              onTap:(){
                                                                setState((){
                                                                  OfferInstruction2Visible = false;
                                                                });
                                                                setModalState((){});
                                                              },
                                                              child: CircleAvatar(
                                                                radius:9,
                                                                backgroundColor: Color(
                                                                    0x3389F6B9) ,
                                                                child: Center(
                                                                    child:Icon(Icons.close,color: Colors.black,size:14,)
                                                                ),
                                                              ),
                                                            )),
                                                      ],
                                                    ):SizedBox(),
                                                  ],
                                                );
                                              },)
                                          );
                                        })
                                      ],
                                    )                              ],
                                ),
                              ),

                              // ListView.builder(
                              //   itemCount:ItemsList.length,
                              //   shrinkWrap: true,
                              //   physics: ScrollPhysics(),
                              //   itemBuilder: (context, index) {
                              //     var data = ItemsList[index];
                              //     return Container(
                              //       color:  Colors.white,
                              //
                              //       child: Column(
                              //         crossAxisAlignment: CrossAxisAlignment.start,
                              //         children: [
                              //           Row(
                              //             mainAxisAlignment: MainAxisAlignment.start,
                              //             crossAxisAlignment: CrossAxisAlignment.start,
                              //             children: [
                              //               const SizedBox(width: 10,),
                              //               Column(
                              //                 children: [
                              //                   Stack(
                              //                     children: [
                              //                       Container(
                              //                         height: data["name"].text.length < 15 ?35:null,
                              //                         decoration: BoxDecoration(
                              //                             color: Constants.white,
                              //                             borderRadius: BorderRadius.circular(5)),
                              //                         width: ResponsiveHelper.isMobile(context)? width*0.4:tabWidth*0.4,
                              //                         margin: EdgeInsets.only(left: 5,right:5,top: 10),
                              //                         child: ConstrainedBox(
                              //                           constraints: BoxConstraints(
                              //                               maxHeight: 150.0
                              //                           ),
                              //                           child: TextFormField(
                              //                             controller: data["name"],
                              //                             maxLines: null,
                              //                             decoration: InputDecoration(
                              //                               hintText: "Enter Item Name",
                              //                               fillColor:  Colors.white,
                              //                               hintStyle:  Constants.hintStyle,
                              //                               focusedBorder: OutlineInputBorder(borderSide: BorderSide(width: 1.0, color: Constants.greyFieldColor), borderRadius: BorderRadius.circular(5)),
                              //                               enabledBorder: OutlineInputBorder(borderSide:  BorderSide(width: 1.0, color: Constants.greyFieldColor), borderRadius: BorderRadius.circular(5)),
                              //
                              //                               contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                               border: const OutlineInputBorder(),
                              //                               // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                             ),
                              //                             style: Black87HintStyle,),
                              //                         ),
                              //                       ),
                              //                       index==0?Positioned(
                              //                         top:10,right:0,
                              //                         child: InkWell(
                              //                           onTap:(){
                              //                             setState((){
                              //                               List selectedItemsPersonList = [];
                              //                               List<UnitListData> TempUnitList = [];
                              //                               ItemsList.add({
                              //                                 "ItemId": "",
                              //                                 "name":TextEditingController(text: ""),
                              //                                 "desc":TextEditingController(text: ""),
                              //                                 "price":TextEditingController(text: ""),
                              //                                 "unit":TextEditingController(text: ""),
                              //                                 "AdvancePrice" : TextEditingController(text : ""),
                              //                                 "AdvanceUnit" : TextEditingController(text : ""),
                              //                                 "MaintenancePrice" : TextEditingController(text : ""),
                              //                                 "MaintenanceUnit" : TextEditingController(text : ""),
                              //
                              //
                              //                                 "filterGetUnitList" : TempUnitList,
                              //                                 "showOtherUnit" : false,
                              //                                 "isLoadNewUnit" : false,
                              //                                 "selectedUnitIndex" : -1,
                              //                                 "SelectedUnitId" : "",
                              //
                              //                                 "filterGetUnitListMain" : TempUnitList,
                              //                                 "showOtherUnitMain" : false,
                              //                                 "isLoadNewUnitMain" : false,
                              //                                 "selectedUnitIndexMain" : -1,
                              //                                 "SelectedUnitIdMain" : "",
                              //
                              //                                 "filterGetUnitListAdva" : TempUnitList,
                              //                                 "showOtherUnitAdva" : false,
                              //                                 "isLoadNewUnitAdva" : false,
                              //                                 "selectedUnitIndexAdva" : -1,
                              //                                 "SelectedUnitIdAdva" : "",
                              //                                 "type" : "new",
                              //
                              //                                 "quantity":1,
                              //                                 "currency":"INR",
                              //                                 "addon":false,
                              //                                 "required":false,
                              //                                 "toggle_state":false,
                              //
                              //                                 "media":[],
                              //                                 "isLoadingFile":false,
                              //                                 "fileUrl":[],
                              //
                              //                                 "item_condition":{
                              //                                   "ItemConditionId": "",
                              //                                   "period":TextEditingController(text: "${OfferPeriodController.text}"),
                              //                                   "periodTime":TextEditingController(text: "${OfferPeriodTimeController.text}"),
                              //                                   "periodicity":selectedPeriodicityValue,
                              //                                   "fromperiod":offerPeriodFromDate.toString(),
                              //                                   "toperiod":offerPeriodToDate.toString(),
                              //                                   "duration":TextEditingController(text: OfferDurationController.text),
                              //                                   "fromperiodtime":offerPeriodFromTime.toString(),
                              //                                   "toperiodtime":offerPeriodToTime.toString(),
                              //                                   "durationoftime":"",
                              //                                   "fromlocation" : TextEditingController(text:OfferFromLocationController.text),
                              //                                   "tolocation" :  TextEditingController(text :OfferToLocationController.text),
                              //                                   "atlocation" : TextEditingController(text:OfferAtLocationController.text),
                              //                                   "servicepersons": selectedItems,
                              //                                   "priority":"",
                              //                                   "expiry":TextEditingController(text: offerExpiryDateTime),
                              //                                   "ExpiryDateTime" : ExDTime,
                              //                                   "FromPeriodDateFill" : OfferFromDate,
                              //                                   "ToPeriodDateFill" : OfferToDate,
                              //                                   "FromPeriodTimeFill" : OfferFromTime,
                              //                                   "ToPeriodTimeFIll" : OfferToTime,
                              //                                 },
                              //
                              //                                 "showItemPriceMain":true,
                              //                                 "showMediaData":true,
                              //                                 "showItemQty":true,
                              //                                 "isShowItem": true,
                              //                                 "showItemPrice2":false,
                              //                                 "showItemPrice3":false,
                              //                                 "showItemCondition": false,
                              //                                 "showItemPeriodicity" :true,
                              //                                 "showItemPeriod" :true,
                              //                                 "showItemPeriodTime" :true,
                              //                                 "isItemSinglePeriodSelect" :true,
                              //                                 "showItemDuration" :true,
                              //                                 "showItemPriority" :true,
                              //                                 "showItemExpiry" :true,
                              //                                 "showItemFromLocation" :true,
                              //                                 "showItemTOLocation" :false,
                              //                                 "showItemAtLocation" :false,
                              //
                              //                               });
                              //                             });
                              //                           },
                              //                           child: CircleAvatar(
                              //                             radius: 10,
                              //                             backgroundColor: primaryColor,
                              //                             child: Center(
                              //                               child: Icon(Icons.add, color: Colors.white, size: 20),
                              //                             ),
                              //                           ),
                              //                         ),
                              //                       ): Positioned(
                              //                         top:10,right:0,
                              //                         child: InkWell(
                              //                           onTap:(){
                              //                             setState((){
                              //                               ItemsList.removeAt(index);
                              //                             });
                              //                           },
                              //                           child: CircleAvatar(
                              //                             radius: 10,
                              //                             backgroundColor:primaryColor,
                              //                             child: Center(
                              //                               child:Icon(Icons.remove, color: Colors.white, size: 20),
                              //                             ),
                              //                           ),
                              //                         ),
                              //                       ),
                              //                     ],
                              //                   ),
                              //                   Container(
                              //                     height: data["desc"].text.length < 15 ?35:null,
                              //                     decoration: BoxDecoration(
                              //                         color: Constants.white,
                              //                         borderRadius: BorderRadius.circular(5)),
                              //                     width: ResponsiveHelper.isMobile(context)? width*0.4:tabWidth*0.4,
                              //                     margin: EdgeInsets.only(left: 5,right:5,top: 10),
                              //                     child: ConstrainedBox(
                              //                       constraints: BoxConstraints(
                              //                           maxHeight: 150.0
                              //                       ),
                              //                       child: TextFormField(
                              //                         controller: data["desc"],
                              //                         maxLines: null,
                              //                         decoration: InputDecoration(
                              //                           hintText: "Enter Description",
                              //                           fillColor:  Colors.white,
                              //                           hintStyle: Constants.hintStyle,
                              //                           focusedBorder: OutlineInputBorder(borderSide: BorderSide(width: 1.0, color: Constants.greyFieldColor), borderRadius: BorderRadius.circular(5)),
                              //                           enabledBorder: OutlineInputBorder(borderSide:  BorderSide(width: 1.0, color: Constants.greyFieldColor), borderRadius: BorderRadius.circular(5)),
                              //                           floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                           contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                           border: const OutlineInputBorder(),
                              //                           // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                         ),
                              //                         style: Black87HintStyle,
                              //                       ),
                              //                     ),
                              //                   ),
                              //                 ],
                              //               ),
                              //
                              //               const Spacer(),
                              //               Column(
                              //                 crossAxisAlignment: CrossAxisAlignment.start,
                              //                 mainAxisAlignment: MainAxisAlignment.start,
                              //                 children:[
                              //                   SizedBox(height: 10,),
                              //                   InkWell(
                              //                       onTap:(){
                              //                         setState(() {
                              //                           data["required"] = !data["required"];
                              //                           Constants.showToast( data["required"]  == true ?"REQUIRED Enabled":"REQUIRED Disabled");
                              //                         });
                              //                       },
                              //                       child: Text("REQUIRED", style: TextStyle(color:data["required"] ==true?primaryColor: Colors.black38, fontWeight:data["required"] ==true ?FontWeight.w700:FontWeight.w500, fontSize: 14),)),
                              //
                              //                   SizedBox(height: 20,),
                              //                   InkWell(
                              //                       onTap:(){
                              //                         setState(() {
                              //                           data["addon"] = !data["addon"];
                              //                           Constants.showToast( data["addon"]  == true ?"ADDON Enabled":"ADDON Disabled");
                              //                         });
                              //                       },
                              //                       child: Text("ADD ON", style: TextStyle(color: data["addon"] == true?primaryColor: Colors.black38, fontWeight:data["addon"] ==true ?FontWeight.w700: FontWeight.w500, fontSize: 14), )),
                              //
                              //                 ],
                              //               ),
                              //               const SizedBox(width: 10,),
                              //               data["showMediaData"] == false ?   DottedBorder(
                              //                 dashPattern: const [6, 2],
                              //                 strokeWidth: 1.5,
                              //                 color: Constants.primaryColor1,
                              //                 borderType: BorderType.RRect,
                              //                 radius: const Radius.circular(2),
                              //                 padding: EdgeInsets.symmetric(horizontal: 7),
                              //                 child: Column(
                              //                   children: [
                              //                     10.height,
                              //                     Text("Add back \nImage",style: BlackDescStyle,textAlign: TextAlign.center,),
                              //                     5.height,
                              //                     InkWell(
                              //                       onTap:(){
                              //                         setState(() {
                              //                           data["showMediaData"] = true;
                              //                           data["media"] = [];
                              //                           data["fileUrl"] = [];
                              //                         });
                              //                       },
                              //                       child: CircleAvatar(
                              //                         radius:8,
                              //                         backgroundColor: primaryColor ,
                              //                         child: Center(
                              //                             child:Icon(Icons.add,color: Colors.white,size:14,)
                              //                         ),
                              //                       ),
                              //                     ),
                              //                     10.height,
                              //                   ],
                              //                 ),
                              //               ):  Column(
                              //
                              //                 children: [
                              //                   Row(
                              //                     children: [
                              //                       DottedBorder(
                              //                         dashPattern: const [6, 2],
                              //                         strokeWidth: 1.5,
                              //                         color: Constants.primaryColor1,
                              //                         borderType: BorderType.RRect,
                              //                         radius: const Radius.circular(2),
                              //                         child: Stack(
                              //
                              //                           children: [
                              //                             InkWell(
                              //                               onTap: () async {
                              //                                 data["media"].isEmpty?
                              //                                 ShowPickerBottomSheet(context,
                              //                                     GalleryOnTap: () async{
                              //                                       FilePickerResult? result = await FilePicker.platform.pickFiles(
                              //                                         type: FileType.custom,
                              //                                         allowMultiple: false,
                              //                                         allowedExtensions: ['jpg', 'png', 'mp4',"jpeg"],
                              //                                       );
                              //                                       if (result != null) {
                              //                                         PlatformFile file = result.files.first;
                              //                                         setState(() {
                              //                                           data["isLoadingFile"] = true;
                              //                                         },);
                              //                                         ThatZalApis.UploadFile(file: file.path).then((value)  {
                              //                                           if(value != null){
                              //                                             if(value["status"] == true){
                              //                                               setState(() {
                              //                                                 data["isLoadingFile"] = false;
                              //                                                 data["media"] = [{
                              //                                                   "file":"${value["result"]["id"]}",
                              //                                                   "name" : "${value["result"]["name"]}"
                              //                                                 }];
                              //                                                 data["fileUrl"] = ["${value["result"]["file"]}"];
                              //                                               });
                              //                                             }
                              //                                           }
                              //                                         });
                              //                                       } else {
                              //                                         ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Nothing is selected')));
                              //                                       }
                              //
                              //                                       Navigator.of(context).pop();
                              //                                     },
                              //                                     CameraOnTap: ()async{
                              //                                       Navigator.push(context, MaterialPageRoute(builder: (context) => UploadImageCameraScreen())).then((value) {
                              //                                         Navigator.of(context).pop();
                              //                                         if (value != null) {
                              //                                           ConstantFun.imageProfileCropper(path: value).then((file) async {
                              //                                             setState(() {
                              //                                               data["isLoadingFile"] = true;
                              //                                             },);
                              //                                             ThatZalApis.UploadFile(file: file.path).then((UploadImage)  {
                              //                                               if(UploadImage != null){
                              //                                                 if(UploadImage["status"] == true){
                              //                                                   setState(() {
                              //                                                     data["isLoadingFile"] = false;
                              //                                                     data["media"] = [{
                              //                                                       "file":"${UploadImage["result"]["id"]}",
                              //                                                       "name" : "${UploadImage["result"]["name"]}"
                              //                                                     }];
                              //                                                     data["fileUrl"] = ["${UploadImage["result"]["file"]}"];
                              //                                                   });
                              //                                                 }
                              //                                               }
                              //                                             });
                              //                                           });
                              //                                         }else{
                              //                                           ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Nothing is selected')));
                              //                                         }
                              //                                       });
                              //                                     }
                              //                                 ):      ImageGalleryView(context, data["media"], data["fileUrl"],setState);
                              //                               },
                              //                               child: data["media"].isEmpty
                              //                                   ? Container(
                              //                                   height: 84,
                              //                                   width:  data["media"].isEmpty?84: 45,
                              //                                   padding: const EdgeInsets.all(0),
                              //                                   alignment: Alignment.center,
                              //                                   decoration: BoxDecoration(
                              //                                       color: Colors.white,
                              //                                       borderRadius: BorderRadius.circular(5)),
                              //                                   child: Column(
                              //                                     mainAxisAlignment: MainAxisAlignment.center,
                              //                                     children:  [
                              //                                       SizedBox(
                              //                                         height: 5,
                              //                                       ),
                              //                                       Text(
                              //                                         "UPLOAD MEDIA",
                              //                                         style: uploadMetaStyle,
                              //                                         textAlign: TextAlign.center,
                              //                                       ),
                              //                                       data["isLoadingFile"] == true ?
                              //                                       LoadingWidgetWithoutBox()
                              //                                           :SizedBox()
                              //                                     ],
                              //                                   ))
                              //                                   : SizedBox(
                              //                                 height: 84,
                              //                                 width: 45, child:
                              //                               "${data["media"][0]["name"].toString().substring( data["media"][0]["name"].toString().lastIndexOf('.'))}" == ".mp4"?Image.asset("assets/mp4placeholder.png",fit: BoxFit.cover):
                              //                               Image.network(data["fileUrl"][0].toString(), fit: BoxFit.fill),
                              //                               ),
                              //                             ),
                              //                             data["media"].isEmpty ||  data["media"].length == 1 ?SizedBox():
                              //                             InkWell(
                              //                               onTap:(){
                              //                                 ImageGalleryView(context, data["media"], data["fileUrl"],setState);
                              //                               },
                              //                               child: Container(
                              //                                   height: 84,
                              //                                   width:  data["media"].isEmpty?84: 45,
                              //                                   padding: const EdgeInsets.all(0),
                              //                                   alignment: Alignment.center,
                              //                                   decoration: BoxDecoration(
                              //                                       color: Constants.closeOfferCard,
                              //                                       borderRadius: BorderRadius.circular(5)),
                              //                                   child:Center(
                              //                                       child:Text("+${data["media"].length -1}",style: BlackTitles400height,)
                              //                                   )
                              //                               ),
                              //                             )
                              //                           ],
                              //                         ),
                              //                       ),
                              //                       data["media"].isEmpty?SizedBox():  DottedBorder(
                              //                         dashPattern: const [6, 2],
                              //                         strokeWidth: 1.5,
                              //                         color: Constants.primaryColor1,
                              //                         borderType: BorderType.Rect,
                              //                         radius: const Radius.circular(2),
                              //                         child: InkWell(
                              //                             onTap: () async {
                              //                               if(data["media"].length == 4){
                              //                                 Constants.showToast("Max 4 files are allowed for select");
                              //                               }else{
                              //                                 ShowPickerBottomSheet(
                              //                                     context,
                              //                                     GalleryOnTap: () async{
                              //                                       FilePickerResult? result = await FilePicker.platform.pickFiles(
                              //                                         type: FileType.custom,
                              //                                         allowMultiple: false,
                              //                                         allowedExtensions: ['jpg', 'png', 'mp4',"jpeg"],
                              //                                       );
                              //                                       if(result != null){
                              //                                         PlatformFile file = result.files.first;
                              //                                         setState(() {
                              //                                           data["isLoadingFile"] = true;
                              //                                         },);
                              //                                         ThatZalApis.UploadFile(file: file.path).then((value)  {
                              //                                           if(value != null){
                              //                                             if(value["status"] == true){
                              //                                               setState(() {
                              //                                                 data["isLoadingFile"] = false;
                              //                                                 data["media"].add({
                              //                                                   "file":"${value["result"]["id"]}",
                              //                                                   "name" : "${value["result"]["name"]}"
                              //                                                 });
                              //                                                 data["fileUrl"].add("${value["result"]["file"]}");
                              //                                               });
                              //                                             }
                              //                                           }
                              //                                         });
                              //                                       }else {
                              //                                         ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Nothing is selected')));
                              //                                       }
                              //                                       Navigator.of(context).pop();
                              //                                     },
                              //                                     CameraOnTap: ()async{
                              //
                              //                                       Navigator.push(context, MaterialPageRoute(builder: (context) => UploadImageCameraScreen())).then((value) {
                              //                                         Navigator.of(context).pop();
                              //                                         if (value != null) {
                              //                                           ConstantFun.imageProfileCropper(path: value).then((file) async {
                              //
                              //                                             setState(() {
                              //                                               data["isLoadingFile"] = true;
                              //                                             },);
                              //                                             ThatZalApis.UploadFile(file: file.path).then((UploadImage)  {
                              //                                               print("UploadImage");
                              //                                               print(UploadImage);
                              //                                               if(UploadImage != null){
                              //                                                 if(UploadImage["status"] == true){
                              //                                                   setState(() {
                              //                                                     data["isLoadingFile"] = false;
                              //                                                     data["media"].add({
                              //                                                       "file":"${UploadImage["result"]["id"]}",
                              //                                                       "name" :"${UploadImage["result"]["name"]}"
                              //                                                     });
                              //                                                     data["fileUrl"].add("${UploadImage["result"]["file"]}");
                              //                                                   });
                              //                                                 }
                              //                                               }
                              //                                             });
                              //                                           });
                              //                                         }else{
                              //                                           ScaffoldMessenger.of(context)
                              //                                               .showSnackBar( // is this context <<<
                              //                                               const SnackBar(content: Text(
                              //                                                   'Nothing is selected')));
                              //                                         }
                              //                                       });
                              //
                              //                                       // final ImagePicker picker = ImagePicker();
                              //                                       // final pickedFile = await picker.pickImage(source: ImageSource.camera);
                              //                                       // XFile? xfilePick = pickedFile;
                              //                                       // setState(
                              //                                       //       () {
                              //                                       //     if (xfilePick != null) {
                              //                                       //
                              //                                       //     } else {
                              //                                       //       ScaffoldMessenger.of(context).showSnackBar(// is this context <<<
                              //                                       //           const SnackBar(content: Text('Nothing is selected')));
                              //                                       //     }
                              //                                       //   },
                              //                                       // );
                              //                                       // Navigator.of(context).pop();
                              //                                     }
                              //                                 );
                              //                               }
                              //                             },
                              //                             child: Container(
                              //                                 height: 84,
                              //                                 width: 35,
                              //                                 padding: const EdgeInsets.all(0),
                              //                                 alignment: Alignment.center,
                              //                                 decoration: BoxDecoration(
                              //                                     color: Colors.white,
                              //                                     borderRadius: BorderRadius.circular(5)),
                              //                                 child: Column(
                              //                                   mainAxisAlignment: MainAxisAlignment.center,
                              //                                   children:  [
                              //                                     data["isLoadingFile"] == true ?
                              //                                     LoadingWidgetWithoutBox(): Icon(
                              //                                       Icons.add,
                              //                                       color: primaryColor,
                              //                                       size: 35,
                              //                                     ),
                              //                                   ],
                              //                                 ))
                              //
                              //                         ),
                              //                       ),
                              //                     ],
                              //                   ),
                              //                   // data["media"].isEmpty?SizedBox():
                              //                   // Padding(
                              //                   //   padding: const EdgeInsets.only(left:8.0,top:5),
                              //                   //   child: Text(
                              //                   //     "Upload Meta",
                              //                   //     style: BlackDescStyle,
                              //                   //   ),
                              //                   // ),
                              //                   Row(
                              //                     mainAxisAlignment: MainAxisAlignment.center,
                              //                     crossAxisAlignment: CrossAxisAlignment.start,
                              //                     children: [
                              //                       InkWell(
                              //                         onTap:() async{
                              //
                              //                           setState(() {
                              //                             data["showMediaData"] = false;
                              //                             ItemsList[index]["item_condition"]["itemDisableFields"].add("UploadMeta");
                              //                           });
                              //
                              //                           final byteData = await rootBundle.load('assets/image_placeholder.jpg');
                              //                           final file = File('${(await getTemporaryDirectory()).path}/image_placeholder.jpg');
                              //                           await file.writeAsBytes(byteData.buffer.asUint8List(byteData.offsetInBytes, byteData.lengthInBytes));
                              //
                              //                           ThatZalApis.UploadFile(file: file.path).then((value)  {
                              //                             if(value != null){
                              //                               if(value["status"] == true){
                              //                                 setState(() {
                              //                                   data["isLoadingFile"] = false;
                              //                                   data["media"] = [{
                              //                                     "file": "${value["result"]["id"]}",
                              //                                     "name" : "${value["result"]["name"]}"
                              //                                   }];
                              //                                 });
                              //                               }
                              //                             }
                              //                           });
                              //
                              //                         },
                              //                         child: Padding(
                              //                           padding: const EdgeInsets.only(top:3.0,left:5),
                              //                           child: CircleAvatar(
                              //                             radius:8,
                              //                             backgroundColor: Color(
                              //                                 0x3389F6B9) ,
                              //                             child: Center(
                              //                                 child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                             ),
                              //                           ),
                              //                         ),
                              //                       ),
                              //                     ],
                              //                   )
                              //
                              //                 ],
                              //               ),
                              //
                              //               const SizedBox(width: 15,),
                              //             ],
                              //           ),
                              //           SizedBox(height: 15,),
                              //           data["showItemPriceMain"] == false?Row(
                              //             children: [
                              //               20.width,
                              //               Text("Add back price",style: BlackDescStyle,),
                              //               5.width,
                              //               InkWell(
                              //                 onTap:(){
                              //                   setState(() {
                              //                     data["showItemPriceMain"] = true;
                              //                   });
                              //                 },
                              //                 child: CircleAvatar(
                              //                   radius:8,
                              //                   backgroundColor: primaryColor ,
                              //                   child: Center(
                              //                       child:Icon(Icons.add,color: Colors.white,size:14,)
                              //                   ),
                              //                 ),
                              //               ),
                              //             ],
                              //           ):
                              //           Stack(
                              //             children: [
                              //               Row(
                              //                 mainAxisAlignment: MainAxisAlignment.start,
                              //                 crossAxisAlignment: CrossAxisAlignment.start,
                              //                 children: [
                              //                   const SizedBox(width: 13,),
                              //                   Container(
                              //                     height: 35,
                              //                     decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                              //                     width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                              //                     margin: EdgeInsets.only(left: 5,top: 10),
                              //                     child: TextFormField(
                              //                       controller: data["price"],
                              //                       keyboardType: TextInputType.number,
                              //                       decoration: InputDecoration(hintText: "Enter Price", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                         focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                         enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                         floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                         contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                         border: const OutlineInputBorder(),
                              //                         // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                       ),
                              //                       style: Black87HintStyle,
                              //                     ),
                              //                   ),
                              //                   Column(
                              //                     children: [
                              //                       Container(
                              //                         height: 35,
                              //                         decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                              //                         width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                              //                         margin: EdgeInsets.only(left: 1,right:0,top: 10),
                              //                         child: TextFormField(
                              //                           controller: data["unit"],
                              //                           keyboardType: TextInputType.text,
                              //                           decoration: InputDecoration(hintText: "Enter Unit", fillColor:  Colors.white,hintStyle: greyHintStyle,
                              //                             focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                             contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                             border: const OutlineInputBorder(),
                              //
                              //                             // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                           ),
                              //                           onChanged: (String value) async {
                              //                             setState(() {
                              //                               data["filterGetUnitList"] = getUnitList.where((name) => name.name!.toLowerCase().contains(value.toLowerCase())).toList();
                              //                               data["filterGetUnitList"].isEmpty ?  data["showOtherUnit"]=true:data["showOtherUnit"]=false;
                              //                             });
                              //                             // _searchFilterUnit(value);
                              //                           },
                              //
                              //                           style: Black87HintStyle,
                              //                         ),
                              //                       ),
                              //                       (data["filterGetUnitList"].isEmpty) ? SizedBox()
                              //                           :SizedBox(
                              //                         width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                              //                         height: data["filterGetUnitList"].length >= 5 ?  MediaQuery.sizeOf(context).height*0.25 :null,
                              //                         child: Card(
                              //                           elevation: 2,
                              //                           color: Colors.white,
                              //                           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),
                              //                           child: Scrollbar(
                              //                             thumbVisibility: data["filterGetUnitList"].length >= 5? true:false,
                              //                             radius: Radius.circular(5),
                              //                             thickness: 4,
                              //                             child: ListView.builder(
                              //                               itemCount:data["filterGetUnitList"].length,
                              //                               shrinkWrap: true,
                              //                               physics: ClampingScrollPhysics(),
                              //                               padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),
                              //                               itemBuilder: (context, index) {
                              //                                 var Unitdata = data["filterGetUnitList"][index];
                              //                                 return  Padding(
                              //                                   padding: const EdgeInsets.symmetric(horizontal: 5.0,vertical: 10),
                              //                                   child: InkWell(
                              //                                       onTap: (){
                              //                                         setState(() {
                              //                                           data["unit"].text = Unitdata.name.toString() ;
                              //                                           data["SelectedUnitId"] =  Unitdata.id.toString();
                              //                                           data["filterGetUnitList"].clear();
                              //                                           // segmentLoader=true;
                              //                                           data["selectedUnitIndex"] = index;
                              //                                         });
                              //                                         // DrawAuraAPi.getSegmentListApi(catId: Unitdata.id.toString()).then((value) {
                              //                                         //   setState(() {
                              //                                         //     getSegmentList=value.result!;
                              //                                         //     segmentLoader=false;
                              //                                         //   });
                              //                                         // });
                              //
                              //                                       },
                              //                                       child: Text("${Unitdata.name.toString()}",style: Black87HintStyle,overflow: TextOverflow.ellipsis)),
                              //                                 );
                              //                               },),
                              //                           ),
                              //                         ),
                              //                       ),
                              //                     ],
                              //                   ),
                              //                   Spacer(),
                              //                   data["filterGetUnitList"].isEmpty &&  data["showOtherUnit"]==true?
                              //                   InkWell(
                              //                       onTap:(){
                              //                         setState((){
                              //                           data["isLoadNewUnit"]= true;
                              //                         });
                              //                         var dataParam ={"name": data["unit"].text.toString()};
                              //                         DrawAuraAPi().createUnitApi(
                              //                             data: dataParam).then((value) {
                              //                           if (value["status"] == 200) {
                              //                             setState((){
                              //                               data["SelectedUnitId"] = value["result"]["id"].toString();
                              //                             });
                              //                             Fluttertoast.showToast(
                              //                                 msg: value["message"],
                              //                                 toastLength: Toast.LENGTH_SHORT,
                              //                                 gravity: ToastGravity.BOTTOM,
                              //                                 timeInSecForIosWeb: 2,
                              //                                 backgroundColor:Constants.primaryColor1,
                              //                                 textColor: Colors.white,
                              //                                 fontSize: 18.0
                              //                             );
                              //                             setState(() {
                              //                               data["isLoadNewUnit"] = false;
                              //                               data["showOtherUnit"] =false;
                              //                             });
                              //                             DrawAuraAPi.getUnitList().then((value) {
                              //                               setState((){
                              //                                 getUnitList.clear();
                              //                                 getUnitList = value.result!;
                              //                               });
                              //                             });
                              //                           } else {
                              //                             Fluttertoast.showToast(
                              //                                 msg: value["message"],
                              //                                 toastLength: Toast.LENGTH_SHORT,
                              //                                 gravity: ToastGravity.BOTTOM,
                              //                                 timeInSecForIosWeb: 2,
                              //                                 backgroundColor: Constants.primaryColor1,
                              //                                 textColor: Colors.white,
                              //                                 fontSize: 18.0
                              //                             );
                              //                             setState(() {
                              //                               data["isLoadNewUnit"] = false;
                              //                               data["showOtherUnit"] =false;
                              //                             });
                              //                           }
                              //                         },);
                              //                       },
                              //                       child: Container(
                              //                           height: 35,
                              //                           width:ResponsiveHelper.isMobile(context)? width*0.12:tabWidth*0.12,
                              //                           margin: EdgeInsets.only(left: 0,right:0,top: 10),
                              //                           decoration: BoxDecoration(
                              //                               borderRadius: BorderRadius.circular(5),
                              //                               color:Constants.primaryColor1
                              //                           ),
                              //                           child:Center(child: data["isLoadNewUnit"] == false?Text("Other",style: WhiteHeadingStyle,):SizedBox(height: 15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2,)))
                              //                       )):SizedBox(),
                              //
                              //                   const SizedBox(width: 15,)
                              //                 ],
                              //               ),
                              //               Positioned(
                              //                 top: 2,
                              //                 left: isMobile?width*0.84:tabWidth*0.82,
                              //                 child: Padding(
                              //                   padding: const EdgeInsets.only(top:3.0,left:0),
                              //                   child: InkWell(
                              //                     onTap:(){
                              //                       setState(() {
                              //
                              //                         data["showItemPriceMain"] = false;
                              //                         data["price"].text = "";
                              //                         data["unit"].text = "";
                              //
                              //                       });
                              //                     },
                              //                     child: CircleAvatar(
                              //                       radius:8,
                              //                       backgroundColor: Color(
                              //                           0x3389F6B9) ,
                              //                       child: Center(
                              //                           child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                       ),
                              //                     ),
                              //                   ),
                              //                 ),
                              //               ),
                              //               Positioned(
                              //                 top: 2,
                              //                 left: ResponsiveHelper.isMobile(context)? width*0.42:tabWidth*0.41,
                              //                 child: InkWell(
                              //                   onTap:(){
                              //                     setState(() {
                              //
                              //                       data["showItemPrice2"] == false ? data["showItemPrice2"] =true : data["showItemPrice3"] = true;
                              //                     });
                              //                   },
                              //                   child: const CircleAvatar(
                              //                     radius: 9,
                              //                     backgroundColor:primaryColor,
                              //                     child: Center(
                              //                       child: Icon(Icons.add, color: Colors.white, size: 18),
                              //                     ),
                              //                   ),
                              //                 ),
                              //               ),
                              //             ],
                              //           ),
                              //           SizedBox(height:data["showItemPrice2"] ==true? 10:0,),
                              //           data["showItemPrice2"] ==true? Stack(
                              //             children: [
                              //               Row(
                              //                 mainAxisAlignment: MainAxisAlignment.start,
                              //                 crossAxisAlignment: CrossAxisAlignment.start,
                              //                 children: [
                              //                   const SizedBox(width: 13,),
                              //                   Container(
                              //                     height: 35,
                              //                     decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                              //                     width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                              //                     margin: EdgeInsets.only(left: 5,top: 10),
                              //                     child: TextFormField(
                              //                       controller: data["MaintenancePrice"],
                              //                       keyboardType: TextInputType.number,
                              //                       decoration: InputDecoration(hintText: "Enter Price 2", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                         focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                         enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                         floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                         contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                         border: const OutlineInputBorder(),
                              //                         // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                       ),
                              //                       style: Black87HintStyle,
                              //                     ),
                              //                   ),
                              //                   Column(
                              //                     children: [
                              //                       Container(
                              //                         height: 35,
                              //                         decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                              //                         width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                              //                         margin: EdgeInsets.only(left: 1,right:0,top: 10),
                              //                         child: TextFormField(
                              //                           controller: data["MaintenanceUnit"],
                              //                           keyboardType: TextInputType.text,
                              //                           decoration: InputDecoration(hintText: "Enter Unit 2", fillColor:  Colors.white,hintStyle: greyHintStyle,
                              //                             focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                             contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                             border: const OutlineInputBorder(),
                              //
                              //                             // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                           ),
                              //                           onChanged: (String value) async {
                              //                             setState(() {
                              //                               data["filterGetUnitListMain"] = getUnitList.where((name) => name.name!.toLowerCase().contains(value.toLowerCase())).toList();
                              //                               data["filterGetUnitListMain"].isEmpty ?  data["showOtherUnitMain"]=true:data["showOtherUnitMain"]=false;
                              //                             });
                              //                             // _searchFilterUnit(value);
                              //                           },
                              //
                              //                           style: Black87HintStyle,
                              //                         ),
                              //                       ),
                              //                       (data["filterGetUnitListMain"].isEmpty) ? SizedBox()
                              //                           :SizedBox(
                              //                         width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                              //                         height: data["filterGetUnitListMain"].length >= 5 ?  MediaQuery.sizeOf(context).height*0.25 :null,
                              //                         child: Card(
                              //                           elevation: 2,
                              //                           color: Colors.white,
                              //                           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),
                              //                           child: Scrollbar(
                              //                             thumbVisibility: data["filterGetUnitListMain"].length >= 5? true:false,
                              //                             radius: Radius.circular(5),
                              //                             thickness: 4,
                              //                             child: ListView.builder(
                              //                               itemCount:data["filterGetUnitListMain"].length,
                              //                               shrinkWrap: true,
                              //                               physics: ClampingScrollPhysics(),
                              //                               padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),
                              //                               itemBuilder: (context, index) {
                              //                                 var Unitdata = data["filterGetUnitListMain"][index];
                              //                                 return  Padding(
                              //                                   padding: const EdgeInsets.symmetric(horizontal: 5.0,vertical: 10),
                              //                                   child: InkWell(
                              //                                       onTap: (){
                              //                                         setState(() {
                              //                                           data["MaintenanceUnit"].text = Unitdata.name.toString() ;
                              //                                           data["SelectedUnitIdMain"] =  Unitdata.id.toString();
                              //                                           data["filterGetUnitListMain"].clear();
                              //                                           // segmentLoader=true;
                              //                                           data["selectedUnitIndexMain"] = index;
                              //                                         });
                              //                                         // DrawAuraAPi.getSegmentListApi(catId: Unitdata.id.toString()).then((value) {
                              //                                         //   setState(() {
                              //                                         //     getSegmentList=value.result!;
                              //                                         //     segmentLoader=false;
                              //                                         //   });
                              //                                         // });
                              //
                              //                                       },
                              //                                       child: Text("${Unitdata.name.toString()}",style: Black87HintStyle,overflow: TextOverflow.ellipsis)),
                              //                                 );
                              //                               },),
                              //                           ),
                              //                         ),
                              //                       ),
                              //                     ],
                              //                   ),
                              //                   Spacer(),
                              //                   data["filterGetUnitListMain"].isEmpty &&  data["showOtherUnitMain"]==true?
                              //                   InkWell(
                              //                       onTap:(){
                              //                         setState((){
                              //                           data["isLoadNewUnitMain"]= true;
                              //                         });
                              //                         var dataParam ={"name": data["MaintenanceUnit"].text.toString()};
                              //                         DrawAuraAPi().createUnitApi(
                              //                             data: dataParam).then((value) {
                              //                           if (value["status"] == 200) {
                              //                             setState((){
                              //                               data["SelectedUnitIdMain"] = value["result"]["id"].toString();
                              //                             });
                              //                             Fluttertoast.showToast(
                              //                                 msg: value["message"],
                              //                                 toastLength: Toast.LENGTH_SHORT,
                              //                                 gravity: ToastGravity.BOTTOM,
                              //                                 timeInSecForIosWeb: 2,
                              //                                 backgroundColor: Constants.primaryColor1,
                              //                                 textColor: Colors.white,
                              //                                 fontSize: 18.0
                              //                             );
                              //                             setState(() {
                              //                               data["isLoadNewUnitMain"] = false;
                              //                               data["showOtherUnitMain"] =false;
                              //                             });
                              //                             DrawAuraAPi.getUnitList().then((value) {
                              //                               setState((){
                              //                                 getUnitList.clear();
                              //                                 getUnitList = value.result!;
                              //                               });
                              //                             });
                              //                           } else {
                              //                             Fluttertoast.showToast(
                              //                                 msg: value["message"],
                              //                                 toastLength: Toast.LENGTH_SHORT,
                              //                                 gravity: ToastGravity.BOTTOM,
                              //                                 timeInSecForIosWeb: 2,
                              //                                 backgroundColor:Constants.primaryColor1,
                              //                                 textColor: Colors.white,
                              //                                 fontSize: 18.0
                              //                             );
                              //                             setState(() {
                              //                               data["isLoadNewUnitMain"] = false;
                              //                               data["showOtherUnitMain"] =false;
                              //                             });
                              //                           }
                              //                         },);
                              //                       },
                              //                       child: Container(
                              //                           height: 35,
                              //                           width:ResponsiveHelper.isMobile(context)? width*0.12:tabWidth*0.12,
                              //                           margin: EdgeInsets.only(left: 0,right:0,top: 10),
                              //                           decoration: BoxDecoration(
                              //                               borderRadius: BorderRadius.circular(5),
                              //                               color:Constants.primaryColor1
                              //                           ),
                              //                           child:Center(child: data["isLoadNewUnitMain"]==false?Text("Other",style: WhiteHeadingStyle,):SizedBox(height: 15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2,)))
                              //                       )):SizedBox(),
                              //                   const SizedBox(width: 15,)
                              //                 ],
                              //               ),
                              //               Positioned(
                              //                 top: 2,
                              //                 left: ResponsiveHelper.isMobile(context)? width*0.42:tabWidth*0.41,
                              //                 child: InkWell(
                              //                   onTap:(){
                              //                     setState(() {
                              //                       data["showItemPrice2"] = false;
                              //                     });
                              //                   },
                              //                   child: const CircleAvatar(
                              //                     radius: 9,
                              //                     backgroundColor: primaryColor,
                              //                     child: Center(
                              //                       child: Icon(Icons.remove, color: Colors.white, size: 18),
                              //                     ),
                              //                   ),
                              //                 ),
                              //               ),
                              //             ],
                              //           ):SizedBox(),
                              //           SizedBox(height:data["showItemPrice3"] ==true?10:0,),
                              //           data["showItemPrice3"] ==true?  Stack(
                              //             children: [
                              //               Row(
                              //                 mainAxisAlignment: MainAxisAlignment.start,
                              //                 crossAxisAlignment: CrossAxisAlignment.start,
                              //                 children: [
                              //                   const SizedBox(width: 13,),
                              //                   Container(
                              //                     height: 35,
                              //                     decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                              //                     width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                              //                     margin: EdgeInsets.only(left: 5,top: 10),
                              //                     child: TextFormField(
                              //                       controller: data["AdvancePrice"],
                              //                       keyboardType: TextInputType.number,
                              //                       decoration: InputDecoration(hintText: "Enter Price 3", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                         focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                         enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                         floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                         contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                         border: const OutlineInputBorder(),
                              //                         // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                       ),
                              //                       style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                              //                     ),
                              //                   ),
                              //                   Column(
                              //                     children: [
                              //                       Container(
                              //                         height: 35,
                              //                         decoration: BoxDecoration(color: Colors.white, boxShadow: [BoxShadow(blurRadius: 3.0, color: Colors.grey),], borderRadius: BorderRadius.circular(5)),
                              //                         width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                              //                         margin: EdgeInsets.only(left: 1,right:0,top: 10),
                              //                         child: TextFormField(
                              //                           controller: data["AdvanceUnit"],
                              //                           keyboardType: TextInputType.text,
                              //                           decoration: InputDecoration(hintText: "Enter Unit 3", fillColor:  Colors.white,hintStyle: greyHintStyle,
                              //                             focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                             floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                             contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                             border: const OutlineInputBorder(),
                              //
                              //                             // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                           ),
                              //                           onChanged: (String value) async {
                              //                             setState(() {
                              //                               data["filterGetUnitListAdva"] = getUnitList.where((name) => name.name!.toLowerCase().contains(value.toLowerCase())).toList();
                              //                               data["filterGetUnitListAdva"].isEmpty ?  data["showOtherUnitAdva"]=true:data["showOtherUnitAdva"]=false;
                              //                             });
                              //                             // _searchFilterUnit(value);
                              //                           },
                              //
                              //                           style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                              //                         ),
                              //                       ),
                              //                       (data["filterGetUnitListAdva"].isEmpty) ? SizedBox()
                              //                           :SizedBox(
                              //                         width:ResponsiveHelper.isMobile(context)? width*0.39:tabWidth*0.39,
                              //                         height: data["filterGetUnitListAdva"].length >= 5 ?  MediaQuery.sizeOf(context).height*0.25 :null,
                              //                         child: Card(
                              //                           elevation: 2,
                              //                           color: Colors.white,
                              //                           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),
                              //                           child: Scrollbar(
                              //                             thumbVisibility: data["filterGetUnitListAdva"].length >= 5? true:false,
                              //                             radius: Radius.circular(5),
                              //                             thickness: 4,
                              //                             child: ListView.builder(
                              //                               itemCount:data["filterGetUnitListAdva"].length,
                              //                               shrinkWrap: true,
                              //                               physics: ClampingScrollPhysics(),
                              //                               padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),
                              //                               itemBuilder: (context, index) {
                              //                                 var Unitdata = data["filterGetUnitListAdva"][index];
                              //                                 return  Padding(
                              //                                   padding: const EdgeInsets.symmetric(horizontal: 5.0,vertical: 10),
                              //                                   child: InkWell(
                              //                                       onTap: (){
                              //                                         setState(() {
                              //                                           data["AdvanceUnit"].text = Unitdata.name.toString() ;
                              //                                           data["SelectedUnitIdAdva"] =  Unitdata.id.toString();
                              //                                           data["filterGetUnitListAdva"].clear();
                              //                                           data["selectedUnitIndexAdva"] = index;
                              //                                         });
                              //                                       },
                              //                                       child: Text("${Unitdata.name.toString()}",style: TextStyle(fontWeight: FontWeight.w400, fontSize: 14, color: Colors.black87,fontFamily:'RobotoMono'),overflow: TextOverflow.ellipsis)),
                              //                                 );
                              //                               },),
                              //                           ),
                              //                         ),
                              //                       ),
                              //                     ],
                              //                   ),
                              //                   Spacer(),
                              //                   data["filterGetUnitListAdva"].isEmpty &&  data["showOtherUnitAdva"]==true?
                              //                   InkWell(
                              //                       onTap:(){
                              //                         setState((){
                              //                           data["isLoadNewUnitAdva"]= true;
                              //                         });
                              //                         var dataParam ={"name": data["AdvanceUnit"].text.toString()};
                              //                         DrawAuraAPi().createUnitApi(
                              //                             data: dataParam).then((value) {
                              //                           if (value["status"] == 200) {
                              //                             setState((){
                              //                               data["SelectedUnitIdAdva"] = value["result"]["id"].toString();
                              //                             });
                              //                             Fluttertoast.showToast(
                              //                                 msg: value["message"],
                              //                                 toastLength: Toast.LENGTH_SHORT,
                              //                                 gravity: ToastGravity.BOTTOM,
                              //                                 timeInSecForIosWeb: 2,
                              //                                 backgroundColor: Constants.primaryColor1,
                              //                                 textColor: Colors.white,
                              //                                 fontSize: 18.0
                              //                             );
                              //                             setState(() {
                              //                               data["isLoadNewUnitAdva"] = false;
                              //                               data["showOtherUnitAdva"] =false;
                              //                             });
                              //                             DrawAuraAPi.getUnitList().then((value) {
                              //                               setState((){
                              //                                 getUnitList.clear();
                              //                                 getUnitList = value.result!;
                              //                               });
                              //                             });
                              //                           } else {
                              //                             Fluttertoast.showToast(
                              //                                 msg: value["message"],
                              //                                 toastLength: Toast.LENGTH_SHORT,
                              //                                 gravity: ToastGravity.BOTTOM,
                              //                                 timeInSecForIosWeb: 2,
                              //                                 backgroundColor: Constants.primaryColor1,
                              //                                 textColor: Colors.white,
                              //                                 fontSize: 18.0
                              //                             );
                              //                             setState(() {
                              //                               data["isLoadNewUnitAdva"] = false;
                              //                               data["showOtherUnitAdva"] =false;
                              //                             });
                              //                           }
                              //                         },);
                              //                       },
                              //                       child: Container(
                              //                           height: 35,
                              //                           width:ResponsiveHelper.isMobile(context)? width*0.12:tabWidth*0.12,
                              //                           margin: EdgeInsets.only(left: 0,right:0,top: 10),
                              //                           decoration: BoxDecoration(
                              //                               borderRadius: BorderRadius.circular(5),
                              //                               color:Constants.primaryColor1
                              //                           ),
                              //                           child:Center(child: data["isLoadNewUnitAdva"]==false?Text("Other",style: WhiteHeadingStyle,):SizedBox(height: 15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2,)))
                              //                       )):SizedBox(),
                              //                   const SizedBox(width: 15,)
                              //
                              //                 ],
                              //               ),
                              //               Positioned(
                              //                 top: 2,
                              //                 left: ResponsiveHelper.isMobile(context)? width*0.42:tabWidth*0.41,
                              //                 child: InkWell(
                              //                   onTap:(){
                              //                     setState(() {
                              //                       setState(() {
                              //                         data["showItemPrice3"] = false;
                              //                       });
                              //                     });
                              //                   },
                              //                   child: const CircleAvatar(
                              //                     radius: 9,
                              //                     backgroundColor: primaryColor,
                              //                     child: Center(
                              //                       child: Icon(Icons.remove, color: Colors.white, size: 18),
                              //                     ),
                              //                   ),
                              //                 ),
                              //               ),
                              //             ],
                              //           ):SizedBox(),
                              //           10.height,
                              //           data["showItemQty"] ==false?
                              //           Row(
                              //             children: [
                              //               20.width,
                              //               Text("Add back Qty",style: BlackDescStyle,),
                              //               5.width,
                              //               InkWell(
                              //                 onTap:(){
                              //                   setState(() {
                              //                     data["showItemQty"] = true;
                              //                   });
                              //                 },
                              //                 child: CircleAvatar(
                              //                   radius:8,
                              //                   backgroundColor: primaryColor ,
                              //                   child: Center(
                              //                       child:Icon(Icons.add,color: Colors.white,size:14,)
                              //                   ),
                              //                 ),
                              //               ),
                              //             ],
                              //           )
                              //               :    Row(
                              //             mainAxisAlignment: MainAxisAlignment.start,
                              //             children: [
                              //               15.width,
                              //               InkWell(
                              //                 onTap:  (){
                              //                   setState((){
                              //                     data["quantity"]==1? Constants.showToast("Minimum QTY is 1"):  data["quantity"] --;
                              //
                              //                   });
                              //                 },
                              //                 child: Container(
                              //                   width: 35,
                              //                   height: 35,
                              //                   margin: EdgeInsets.only(top: 10),
                              //                   decoration: BoxDecoration(color:Color(0xFFeefaf7),borderRadius: BorderRadius.circular(5),border: Border.all(width: 0.5,color:  Constants.primaryColor1)),
                              //                   child: Center(
                              //                     child: Icon(Icons.remove_circle_outline,color: Constants.primaryColor1),
                              //                   ),
                              //                 ),
                              //               ),
                              //               SizedBox(width: 5,),
                              //               Container(
                              //                 width: 80,
                              //                 height: 35,  margin: EdgeInsets.only(top: 10),
                              //                 decoration: BoxDecoration(color:Color(0xFFeefaf7),borderRadius: BorderRadius.circular(5),border: Border.all(width: 0.5,color:  Constants.primaryColor1)),
                              //                 child:
                              //                 Center(child: Text( data["quantity"]==0?"Qty":"${data["quantity"]}",style: TextStyle(fontWeight: FontWeight.w600,color:  Colors.black,fontSize: 18),)),
                              //               ),
                              //               SizedBox(width: 5,),
                              //               InkWell(
                              //                 onTap: (){
                              //                   setState((){
                              //                     data["quantity"] ++;
                              //                   });
                              //                 },
                              //                 child: Container(
                              //                   width: 35,
                              //                   height: 35,margin: EdgeInsets.only(top: 10),
                              //                   decoration: BoxDecoration(color:Color(0xFFeefaf7),borderRadius: BorderRadius.circular(5),border: Border.all(width: 0.5,color:  Constants.primaryColor1)),
                              //                   child: Center(
                              //                     child: Icon(Icons.add_circle_outline,color:  Constants.primaryColor1,),
                              //                   ),
                              //                 ),
                              //               ),
                              //               InkWell(
                              //                 onTap:(){
                              //                   setState(() {
                              //                     data["showItemQty"] =false;
                              //                     data["quantity"] = "0";
                              //
                              //                   });
                              //                 },
                              //                 child: Padding(
                              //                   padding: const EdgeInsets.only(top:3.0,left:5),
                              //                   child: CircleAvatar(
                              //                     radius:8,
                              //                     backgroundColor: Color(
                              //                         0x3389F6B9) ,
                              //                     child: Center(
                              //                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                     ),
                              //                   ),
                              //                 ),
                              //               ),
                              //
                              //             ],
                              //           ),
                              //           const SizedBox(height: 15,),
                              //           Padding(
                              //             padding: const EdgeInsets.symmetric(horizontal: 15),
                              //             child: Row(
                              //               children:  [
                              //                 const Text(" Add Offer’s conditions for this item", style: BlackSubTitleItalicStyle,),
                              //                 const SizedBox(width: 5,),
                              //                 InkWell(
                              //                   onTap:(){
                              //                     setState(() {
                              //
                              //                       data["showItemCondition"] = !  data["showItemCondition"];
                              //                     });
                              //                   },
                              //                   child:  CircleAvatar(
                              //                     radius: 10,
                              //                     backgroundColor: primaryColor,
                              //                     child: Center(
                              //                       child: data["showItemCondition"] == false? Icon(Icons.add, color: Colors.white, size: 20): Icon(Icons.remove, color: Colors.white, size: 20),
                              //                     ),
                              //                   ),
                              //                 )
                              //               ],
                              //             ),
                              //           ),
                              //           data["showItemCondition"]==true? SizedBox(
                              //               height: 65,
                              //               width: double.infinity,
                              //               child: ListView(
                              //                 scrollDirection: Axis.horizontal,
                              //                 physics: const ScrollPhysics(),
                              //                 shrinkWrap: false,
                              //                 padding: EdgeInsets.only(top:5),
                              //                 children: [
                              //                   const SizedBox(width: 12,),
                              //                   data["showItemPeriodicity"]==true?  Padding(
                              //                     padding: EdgeInsets.only(right:10),
                              //                     child: Column(
                              //                       crossAxisAlignment: CrossAxisAlignment.start,
                              //                       children: [
                              //                         Stack(
                              //                           children: [
                              //                             DropdownButtonHideUnderline(
                              //                               child: DropdownButton2(
                              //                                 isExpanded: true,
                              //                                 items:
                              //                                 selectedPeriodicityValue == "Daily" ?
                              //                                 periodicityDailyList.map((item) => DropdownMenuItem (
                              //                                   value: item,
                              //                                   child: Text(
                              //                                     item,
                              //                                     style:  const TextStyle(
                              //                                       fontSize: 15,
                              //                                       fontWeight: FontWeight.w400,
                              //                                       color:  Colors.black,
                              //                                     ),
                              //                                     overflow: TextOverflow.ellipsis,
                              //                                   ),
                              //                                 )).toList():
                              //                                 selectedPeriodicityValue == "Weekends" ?
                              //                                 periodicityWeekendsList.map((item) => DropdownMenuItem (
                              //                                   value: item,
                              //                                   child: Text(
                              //                                     item,
                              //                                     style:  const TextStyle(
                              //                                       fontSize: 15,
                              //                                       fontWeight: FontWeight.w400,
                              //                                       color:  Colors.black,
                              //                                     ),
                              //                                     overflow: TextOverflow.ellipsis,
                              //                                   ),
                              //                                 )).toList():
                              //                                 selectedPeriodicityValue == "Weekdays" ?
                              //                                 periodicityWeekDaysList.map((item) => DropdownMenuItem (
                              //                                   value: item,
                              //                                   child: Text(
                              //                                     item,
                              //                                     style:  const TextStyle(
                              //                                       fontSize: 15,
                              //                                       fontWeight: FontWeight.w400,
                              //                                       color:  Colors.black,
                              //                                     ),
                              //                                     overflow: TextOverflow.ellipsis,
                              //                                   ),
                              //                                 )).toList():
                              //                                 periodicityList.map((item) => DropdownMenuItem (
                              //                                   value: item,
                              //                                   child: Text(
                              //                                     item,
                              //                                     style:  const TextStyle(
                              //                                       fontSize: 15,
                              //                                       fontWeight: FontWeight.w400,
                              //                                       color:  Colors.black,
                              //                                     ),
                              //                                     overflow: TextOverflow.ellipsis,
                              //                                   ),
                              //                                 )).toList(),
                              //                                 value: data["item_condition"]["periodicity"]==""?null:data["item_condition"]["periodicity"],
                              //                                 onChanged:
                              //                                 selectedPeriodicityValue == "Today" ||
                              //                                     selectedPeriodicityValue == "Tomorrow" ||
                              //                                     selectedPeriodicityValue == "Once" ||
                              //                                     selectedPeriodicityValue == "Monthly" ||
                              //                                     selectedPeriodicityValue == "Yearly" ||
                              //                                     selectedPeriodicityValue == "Weekly" ?
                              //                                 null:
                              //                                     (newValue) {
                              //                                   setState(() {
                              //                                     data["item_condition"]["periodicity"] = newValue!;
                              //                                   });
                              //                                 },
                              //                                 hint: const Text(
                              //                                     "Periodicity",
                              //                                     style:greyHintStyle
                              //                                 ),
                              //                                 iconStyleData: const IconStyleData(
                              //                                   icon: Icon(Icons.keyboard_arrow_down_sharp,),
                              //                                   iconSize: 10,
                              //                                   iconEnabledColor: Colors.white,
                              //                                   iconDisabledColor:Colors.white,
                              //                                 ),
                              //                                 buttonStyleData: ButtonStyleData(
                              //                                     height:  35,
                              //                                     width: ResponsiveHelper.isMobile(context)? width*0.38:tabWidth*0.38,
                              //                                     padding: const EdgeInsets.only(left: 22, right: 3),
                              //                                     decoration: BoxDecoration(borderRadius: BorderRadius.circular(5),color: Colors.white),
                              //                                     elevation:  1,
                              //                                     overlayColor: MaterialStateProperty.all(Colors.white)
                              //                                 ),
                              //                                 menuItemStyleData: MenuItemStyleData(
                              //                                   height: 33,
                              //                                   selectedMenuItemBuilder: (context, child) {
                              //                                     return     Container(
                              //                                       padding: const EdgeInsets.only(left: 0, right: 0),
                              //                                       width: ResponsiveHelper.isMobile(context)? width*0.38:tabWidth*0.38,
                              //                                       height: 30,color:Constants.primaryColor1,
                              //                                       child: Row(
                              //                                         mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              //                                         children: [
                              //                                           child,
                              //                                           const Padding(
                              //                                             padding: EdgeInsets.only(right: 5.0),
                              //                                             child: Icon(Icons.done,color: Colors.white,size: 20,),
                              //                                           )
                              //                                         ],
                              //                                       ),
                              //                                     );
                              //                                   },
                              //                                   padding: const EdgeInsets.only(left: 8, right: 3),
                              //                                 ),
                              //                                 dropdownStyleData: DropdownStyleData(
                              //                                   maxHeight: 200,
                              //                                   padding: const EdgeInsets.only(left: 0, right: 0),
                              //                                   width: ResponsiveHelper.isMobile(context)? width*0.38:tabWidth*0.38,
                              //                                   decoration: BoxDecoration(
                              //                                       borderRadius: BorderRadius.circular(5),
                              //                                       color: Colors.white,
                              //                                       border: Border.all(color:  Constants.primaryColor1,width: 1)
                              //                                   ),
                              //                                   elevation: 1,
                              //                                   scrollbarTheme: ScrollbarThemeData(
                              //                                       radius:  const Radius.circular(20),
                              //                                       thickness: MaterialStateProperty.all(5.0),
                              //                                       minThumbLength: 20
                              //                                   ),
                              //                                   offset: const Offset(0, -5),
                              //                                 ),
                              //
                              //                                 style: const TextStyle(
                              //                                   fontSize: 14,
                              //                                   fontWeight: FontWeight.w400,
                              //                                   color: Colors.black,
                              //                                 ),
                              //
                              //                               ),
                              //                             ),
                              //                             Positioned(
                              //                                 bottom:1,left:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["item_condition"]["periodicity"]=="";
                              //                                       data["showItemPeriodicity"] = false;
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Color(
                              //                                         0x3389F6B9) ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 ))
                              //                           ],
                              //                         ),
                              //                         const SizedBox(height:5,),
                              //                         const Padding(
                              //                           padding: EdgeInsets.only(left:8.0),
                              //                           child: Text("Periodicity", style: BlackDescStyle,),
                              //                         ),
                              //                       ],
                              //                     ),
                              //                   ):SizedBox(),
                              //
                              //                   // data["showItemPeriod"] == true? Padding(
                              //                   //   padding: EdgeInsets.only(right:10),
                              //                   //   child: Column(
                              //                   //     crossAxisAlignment: CrossAxisAlignment.start,
                              //                   //     children: [
                              //                   //       Stack(
                              //                   //         children: [
                              //                   //           Container(
                              //                   //             height: 35,
                              //                   //             padding:EdgeInsets.only(left:12),
                              //                   //             decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                   //               BoxShadow(
                              //                   //                   blurRadius: 2.0,
                              //                   //                   color: Colors.black54,
                              //                   //                   offset: Offset(0.0, 0.5) ),
                              //                   //             ], borderRadius: BorderRadius.circular(5)),
                              //                   //             width: ResponsiveHelper.isMobile(context)? width*0.55:tabWidth*0.55,
                              //                   //             child: TextFormField(
                              //                   //               controller: data["item_condition"]["period"],
                              //                   //               readOnly: true,
                              //                   //               onTap:(){
                              //                   //
                              //                   //                 if(data["item_condition"]["periodicity"] == null ||data["item_condition"]["periodicity"] == "" ){
                              //                   //                   Constants.showToast("Please select periodicity first");
                              //                   //                 }else{
                              //                   //                   if(
                              //                   //                   data["item_condition"]["periodicity"] == "Today" ||
                              //                   //                       data["item_condition"]["periodicity"] == "Tomorrow" ||
                              //                   //                       data["item_condition"]["periodicity"] == "Sunday" ||
                              //                   //                       data["item_condition"]["periodicity"] == "Monday" ||
                              //                   //                       data["item_condition"]["periodicity"] == "Tuesday" ||
                              //                   //                       data["item_condition"]["periodicity"] == "Wednesday" ||
                              //                   //                       data["item_condition"]["periodicity"] == "Thursday" ||
                              //                   //                       data["item_condition"]["periodicity"] == "Friday" ||
                              //                   //                       data["item_condition"]["periodicity"] == "Saturday"
                              //                   //
                              //                   //                   ){
                              //                   //                     DateTimeRangePickerItemLavelTime(
                              //                   //                         startText: "From",
                              //                   //                         endText: "To",
                              //                   //                         doneText: "Done",
                              //                   //                         cancelText: "Cancel",
                              //                   //                         interval: 1,
                              //                   //                         initialStartTime: data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["FromPeriodTimeFill"] ,
                              //                   //                         initialEndTime: data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["ToPeriodTimeFIll"] ,
                              //                   //
                              //                   //                         mode: DateTimeRangePickerModeItemLavelTime.time,
                              //                   //                         minimumTime: DateTime.now(),
                              //                   //                         maximumFromTime: OfferFromTime,
                              //                   //                         maximumToTime: OfferToTime,
                              //                   //                         use24hFormat: false,
                              //                   //                         onConfirm: (start, end) {
                              //                   //                           print(start);
                              //                   //                           print(end);
                              //                   //                           if(end == "NotPick"){
                              //                   //                             setState((){
                              //                   //                               data["item_condition"]["duration"].clear();
                              //                   //                               isItemSinglePeriodSelect =true;
                              //                   //                               final  STime = DateFormat('hh:mm a').format(start);
                              //                   //                               data["item_condition"]["period"].text = "From ${STime}";
                              //                   //                               data["item_condition"]["fromperiod"]="";
                              //                   //                               data["item_condition"]["toperiod"]="";
                              //                   //                               data["item_condition"]["fromperiodtime"]="";
                              //                   //                               data["item_condition"]["toperiodtime"]="";
                              //                   //                               final  STime24 = DateFormat('HH:mm').format(start);
                              //                   //                               data["item_condition"]["fromperiodtime"] = STime24.toString();
                              //                   //
                              //                   //                               data["item_condition"]["FromPeriodTimeFill"]= start;
                              //                   //                             });
                              //                   //                           }else{
                              //                   //                             setState((){
                              //                   //                               isItemSinglePeriodSelect = false;
                              //                   //                               Duration diff = DateTime.parse(end).difference(start);
                              //                   //                               diff.inHours !=0? data["item_condition"]["duration"].text = "${diff.inHours.toString()} Hours": diff.inSeconds !=00?   data["item_condition"]["duration"].text = "${diff.inMinutes.toString()} Minutes" :   data["item_condition"]["duration"].text = "${diff.inSeconds.toString()} Seconds";
                              //                   //                               final  FTime = DateFormat('hh:mm a').format(start);
                              //                   //                               final  ToTime = DateFormat('hh:mm a').format(DateTime.parse(end));
                              //                   //                               data["item_condition"]["period"].text = "${FTime} - ${ToTime}";
                              //                   //                               data["item_condition"]["fromperiod"]="";
                              //                   //                               data["item_condition"]["toperiod"]="";
                              //                   //                               data["item_condition"]["fromperiodtime"]="";
                              //                   //                               data["item_condition"]["toperiodtime"]="";
                              //                   //                               final  FTime24 = DateFormat('HH:mm').format(start);
                              //                   //                               final  ToTime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                              //                   //                               data["item_condition"]["fromperiodtime"] = FTime24.toString();
                              //                   //                               data["item_condition"]["toperiodtime"] = ToTime24.toString();
                              //                   //                               data["item_condition"]["FromPeriodTimeFill"]= start;
                              //                   //                               data["item_condition"]["ToPeriodTimeFIll"]= DateTime.parse(end);
                              //                   //                             });
                              //                   //                           }
                              //                   //                         }).showPicker(context);
                              //                   //                   }
                              //                   //                   else{
                              //                   //                     itemLavel.DateTimeRangePickerItemLavel(
                              //                   //                         startText: "From",
                              //                   //                         endText: "To",
                              //                   //                         doneText: "Done",
                              //                   //                         cancelText: "Cancel",
                              //                   //                         interval: 1,
                              //                   //                         mode: itemLavel.DateTimeRangePickerModeItemLavel.dateAndTime,
                              //                   //                         minimumTime: DateTime.now(),
                              //                   //                         initialStartTime: data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)): data["item_condition"]["FromPeriodDateFill"],
                              //                   //                         initialEndTime:data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["ToPeriodDateFill"] ,
                              //                   //                         maximumFromTime: OfferFromDate,
                              //                   //                         maximumToTime: OfferToDate,
                              //                   //                         use24hFormat: false,
                              //                   //                         onConfirm: (start, end) {
                              //                   //                           if(end == "NotPick"){
                              //                   //                             setState((){
                              //                   //                               data["item_condition"]["duration"].clear();
                              //                   //                               isItemSinglePeriodSelect =true;
                              //                   //                               final  STime = DateFormat('dd-MMM-yyyy hh:mm a').format(start);
                              //                   //                               data["item_condition"]["period"].text = "From ${STime}";
                              //                   //                               data["item_condition"]["fromperiod"]="";
                              //                   //                               data["item_condition"]["toperiod"]="";
                              //                   //                               data["item_condition"]["fromperiodtime"]="";
                              //                   //                               data["item_condition"]["toperiodtime"]="";
                              //                   //                               final  SDate = DateFormat('dd-MM-yyyy').format(start);
                              //                   //                               final  STime24 = DateFormat('HH:mm').format(start);
                              //                   //                               data["item_condition"]["fromperiodtime"] = STime24.toString();
                              //                   //                               data["item_condition"]["fromperiod"] = SDate.toString();
                              //                   //                               data["item_condition"]["FromPeriodDateFill"]= start;
                              //                   //                             });
                              //                   //
                              //                   //                           }else{
                              //                   //                             setState((){
                              //                   //
                              //                   //                               isItemSinglePeriodSelect = false;
                              //                   //                               // print(end);print(start);
                              //                   //                               int totalDays = DateTime.parse(end).difference(start).inDays;
                              //                   //                               int years = totalDays ~/ 365;
                              //                   //                               int months = (totalDays-years*365) ~/ 30;
                              //                   //                               int days = totalDays-years*365-months*30;
                              //                   //                               int doneHours = years*365*24;
                              //                   //                               int hours = DateTime.parse(end).difference(start).inHours  -(doneHours) -(months*30*24) - (days*24);
                              //                   //                               int min = (((DateTime.parse(end).difference(start).inMinutes - (years*365*24*60)) -(months*30*24*60)) - (days*24*60) )-hours*60;
                              //                   //                               String empty = "";
                              //                   //                               data["item_condition"]["duration"].text = "";
                              //                   //                               data["item_condition"]["fromperiod"]="";
                              //                   //                               data["item_condition"]["toperiod"]="";
                              //                   //                               data["item_condition"]["fromperiodtime"]="";
                              //                   //                               data["item_condition"]["toperiodtime"]="";
                              //                   //                               data["item_condition"]["duration"].text ="${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                              //                   //                               final  FTime = DateFormat('dd-MMM-yyyy').format(start);
                              //                   //                               final  ToTime = DateFormat('dd-MMM-yyyy').format(DateTime.parse(end));
                              //                   //                               data["item_condition"]["period"].text = "${FTime}-${ToTime}";
                              //                   //                               final  SDate = DateFormat('dd-MM-yyyy').format(start);
                              //                   //                               final  STime24 = DateFormat('HH:mm').format(start);
                              //                   //                               data["item_condition"]["fromperiodtime"] = STime24.toString();
                              //                   //                               data["item_condition"]["fromperiod"] = SDate.toString();
                              //                   //                               final  EDate = DateFormat('dd-MM-yyyy').format(DateTime.parse(end));
                              //                   //                               final  ETime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                              //                   //                               data["item_condition"]["toperiodtime"] = ETime24.toString();
                              //                   //                               data["item_condition"]["toperiod"] = EDate.toString();
                              //                   //                               data["item_condition"]["FromPeriodDateFill"]= start;
                              //                   //                               data["item_condition"]["ToPeriodDateFill"]= DateTime.parse(end);
                              //                   //
                              //                   //                             });
                              //                   //
                              //                   //                           }
                              //                   //                         }).showPicker(context);
                              //                   //                   }
                              //                   //                 }
                              //                   //
                              //                   //               },
                              //                   //               keyboardType: TextInputType.text,
                              //                   //               decoration: InputDecoration(hintText: "Period", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                   //                 focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                   //                 enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                   //                 floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                   //                 contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                   //                 border: const OutlineInputBorder(),
                              //                   //               ),
                              //                   //               style: Black87HintStyle,
                              //                   //             ),
                              //                   //           ),
                              //                   //           Positioned(
                              //                   //               bottom:1,left:2,
                              //                   //               child: InkWell(
                              //                   //                 onTap:(){
                              //                   //                   setState((){
                              //                   //                     data["item_condition"]["period"].clear();
                              //                   //                     data["item_condition"]["fromperiod"]="";
                              //                   //                     data["item_condition"]["toperiod"]="";
                              //                   //                     data["item_condition"]["fromperiodtime"]="";
                              //                   //                     data["item_condition"]["toperiodtime"]="";
                              //                   //                     data["showItemPeriod"] = false;
                              //                   //                   });
                              //                   //                 },
                              //                   //                 child: CircleAvatar(
                              //                   //                   radius:8,
                              //                   //                   backgroundColor: Color(
                              //                   //                       0x3389F6B9) ,
                              //                   //                   child: Center(
                              //                   //                       child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                   //                   ),
                              //                   //                 ),
                              //                   //               ))
                              //                   //         ],
                              //                   //       ),
                              //                   //       const SizedBox(height:5,),
                              //                   //       const Padding(
                              //                   //         padding: EdgeInsets.only(left:8.0),
                              //                   //         child: Text("Period", style: BlackDescStyle,),
                              //                   //       ),
                              //                   //     ],
                              //                   //   ),
                              //                   // ):SizedBox(),
                              //
                              //                   data["item_condition"]["periodicity"] == "Today" ||
                              //                       data["item_condition"]["periodicity"] == "Tomorrow" ||
                              //                       data["item_condition"]["periodicity"] == "Sunday" ||
                              //                       data["item_condition"]["periodicity"] == "Monday" ||
                              //                       data["item_condition"]["periodicity"] == "Tuesday" ||
                              //                       data["item_condition"]["periodicity"] == "Wednesday" ||
                              //                       data["item_condition"]["periodicity"] == "Thursday" ||
                              //                       data["item_condition"]["periodicity"] == "Friday" ||
                              //                       data["item_condition"]["periodicity"] == "Saturday"? SizedBox():
                              //                   data["showItemPeriod"] == true?    Padding(
                              //                     padding: EdgeInsets.only(right:10,top:2),
                              //                     child: Column(
                              //                       crossAxisAlignment: CrossAxisAlignment.start,
                              //                       children: [
                              //                         Stack(
                              //                           children: [
                              //                             Container(
                              //                               height: 35,
                              //                               padding:EdgeInsets.only(left:12),
                              //                               decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                                 BoxShadow(
                              //                                     blurRadius: 2.0,
                              //                                     color: Colors.black54,
                              //                                     offset: Offset(0.0, 0.5) ),
                              //                               ], borderRadius: BorderRadius.circular(5)),
                              //                               width: isMobile?width*0.55:tabWidth*0.55,
                              //                               child: TextFormField(
                              //                                 controller:  data["item_condition"]["period"],
                              //                                 readOnly: true,
                              //                                 onTap:(){
                              //
                              //                                   ItemDatePicker(
                              //                                       startText: "From",
                              //                                       endText: "To",
                              //                                       doneText: "Done",
                              //                                       cancelText: "Cancel",
                              //                                       interval: 1,
                              //                                       mode: ItemDatePickerMode.date,
                              //                                       minimumTime: DateTime.now(),
                              //                                       maximumFromTime: OfferFromDate,
                              //                                       maximumToTime: OfferToDate,
                              //                                       initialStartTime:data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["FromPeriodDateFill"],
                              //                                       initialEndTime:data["item_condition"]["period"].text.isEmpty? DateTime.now().add(Duration(hours: 1)):data["item_condition"]["ToPeriodDateFill"] ,
                              //                                       use24hFormat: false,
                              //                                       onConfirm:  (start, end) {
                              //                                         if(end == "NotPick"){
                              //
                              //
                              //
                              //                                           setState((){
                              //                                             data["isItemSinglePeriodSelect"] =true;
                              //                                             data["item_condition"]["periodTime"].clear();
                              //                                             data["item_condition"]["duration"].clear();
                              //
                              //                                             final  STime = DateFormat('dd-MMM-yyyy hh:mm a').format(start);
                              //                                             data["item_condition"]["period"].text = "From ${STime}";
                              //                                             data["item_condition"]["fromperiod"]="";
                              //                                             data["item_condition"]["toperiod"]="";
                              //
                              //                                             final  SDate = DateFormat('dd-MM-yyyy').format(start);
                              //                                             final  STime24 = DateFormat('HH:mm').format(start);
                              //                                             data["item_condition"]["fromperiod"] = SDate.toString();
                              //                                             data["item_condition"]["FromPeriodDateFill"]= start;
                              //
                              //                                           });
                              //                                         }else{
                              //                                           setState((){
                              //                                             data["isItemSinglePeriodSelect"] =false;
                              //                                             data["item_condition"]["periodTime"].clear();
                              //                                             data["item_condition"]["duration"].clear();
                              //                                             int totalDays = DateTime.parse(end).difference(start).inDays;
                              //                                             int years = totalDays ~/ 365;
                              //                                             int months = (totalDays-years*365) ~/ 30;
                              //                                             int days = totalDays-years*365-months*30;
                              //                                             int doneHours = years*365*24;
                              //                                             int hours = DateTime.parse(end).difference(start).inHours  -(doneHours) -(months*30*24) - (days*24);
                              //                                             int min = (((DateTime.parse(end).difference(start).inMinutes - (years*365*24*60)) -(months*30*24*60)) - (days*24*60) )-hours*60;
                              //                                             String empty = "";
                              //                                             data["item_condition"]["duration"].text = "";
                              //                                             data["item_condition"]["fromperiod"]="";
                              //                                             data["item_condition"]["toperiod"]="";
                              //                                             data["item_condition"]["duration"].text ="${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                              //                                             final  FTime = DateFormat('dd-MMM-yyyy').format(start);
                              //                                             final  ToTime = DateFormat('dd-MMM-yyyy').format(DateTime.parse(end));
                              //                                             data["item_condition"]["period"].text = "${FTime}-${ToTime}";
                              //                                             final  SDate = DateFormat('dd-MM-yyyy').format(start);
                              //                                             data["item_condition"]["fromperiod"] = SDate.toString();
                              //                                             final  EDate = DateFormat('dd-MM-yyyy').format(DateTime.parse(end));
                              //                                             data["item_condition"]["toperiod"] = EDate.toString();
                              //                                             data["item_condition"]["FromPeriodDateFill"]= start;
                              //                                             data["item_condition"]["ToPeriodDateFill"]= DateTime.parse(end);
                              //
                              //                                           });
                              //                                         }
                              //                                       }).showPicker(context);
                              //
                              //                                   // FromToDatePicker(context,FirstDate: DateTime.now(),LastDate: DateTime.now().add(Duration(days: 365)));
                              //                                 },
                              //                                 keyboardType: TextInputType.text,
                              //                                 decoration: InputDecoration(hintText: "Period Date", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                                   focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                                   contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                                   border: const OutlineInputBorder(),
                              //                                 ),
                              //                                 style: Black87HintStyle,
                              //                               ),
                              //                             ),
                              //                             Positioned(
                              //                                 bottom:1,left:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["item_condition"]["period"].clear();
                              //                                       data["item_condition"]["fromperiod"]="";
                              //                                       data["item_condition"]["toperiod"]="";
                              //                                       data["showItemPeriod"] = false;
                              //                                       ItemsList[index]["item_condition"]["itemDisableFields"].add("DatePeriod");
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Color(0x3389F6B9) ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 ))
                              //                           ],
                              //                         ),
                              //                         const SizedBox(height:5),
                              //                         const Padding(
                              //                           padding: EdgeInsets.only(left:8.0),
                              //                           child: Text("Period Date", style: BlackDescStyle,),
                              //                         ),
                              //                       ],
                              //                     ),
                              //                   ):
                              //                   TextForNewAdd(context,text: "Period Date",onTap: (){
                              //                     setState(() {
                              //                       data["showItemPeriod"] = true;
                              //                       ItemsList[index]["item_condition"]["itemDisableFields"].remove("DatePeriod");
                              //                     });
                              //                   }),
                              //
                              //
                              //
                              //
                              //                   data["showItemPeriodTime"] == true?    Padding(
                              //                     padding: EdgeInsets.only(right:10,top:2),
                              //                     child: Column(
                              //                       crossAxisAlignment: CrossAxisAlignment.start,
                              //                       children: [
                              //                         Stack(
                              //                           children: [
                              //                             Container(
                              //                               height: 35,
                              //                               padding:EdgeInsets.only(left:12),
                              //                               decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                                 BoxShadow(
                              //                                     blurRadius: 2.0,
                              //                                     color: Colors.black54,
                              //                                     offset: Offset(0.0, 0.5) ),
                              //                               ], borderRadius: BorderRadius.circular(5)),
                              //                               width: isMobile?width*0.55:tabWidth*0.55,
                              //                               child: TextFormField(
                              //                                 controller:  data["item_condition"]["periodTime"],
                              //                                 readOnly: true,
                              //
                              //                                 onTap:(){
                              //                                   print("Call");
                              //                                   ItemTimePicker(
                              //                                       startText: "From",
                              //                                       endText: "To",
                              //                                       doneText: "Done",
                              //                                       cancelText: "Cancel",
                              //                                       interval: 1,
                              //
                              //                                       mode: ItemTimePickerMode.time,
                              //                                       type:data["item_condition"]["periodicity"] == "Today" ?"Today":"Else",
                              //                                       initialStartTime:  data["item_condition"]["periodTime"].text.isEmpty?
                              //                                       data["item_condition"]["periodicity"] == "Today" ?
                              //                                       DateTime.now().add(Duration(hours: 1)):
                              //                                       DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().toString())} 00:01:00"):
                              //                                       data["item_condition"]["FromPeriodTimeFill"],
                              //                                       initialEndTime:  data["item_condition"]["periodTime"].text.isEmpty?
                              //                                       data["item_condition"]["periodicity"] == "Today" ?
                              //                                       DateTime.now().add(Duration(hours: 1)):
                              //                                       DateFormat("yyyy-MM-dd HH:mm:ss").parse("${DateFormat("yyyy-MM-dd").parse(DateTime.now().toString())} 00:01:00"): data["item_condition"]["ToPeriodTimeFill"],
                              //
                              //                                       use24hFormat: false,
                              //                                       onConfirm: (start, end) {
                              //                                         print(start);
                              //                                         print(end);
                              //                                         if(end == "NotPick"){
                              //
                              //                                           setState((){
                              //                                             data["item_condition"]["periodicity"] == "Today" ||
                              //                                                 data["item_condition"]["periodicity"] == "Tomorrow" ||
                              //                                                 data["item_condition"]["periodicity"] == "Sunday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Monday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Tuesday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Wednesday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Thursday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Friday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Saturday"?
                              //                                             data["isItemSinglePeriodSelect"] = true :null;
                              //                                             final  STime = DateFormat('hh:mm a').format(start);
                              //                                             data["item_condition"]["periodTime"].text = "From ${STime}";
                              //                                             data["item_condition"]["fromperiodtime"]="";
                              //                                             data["item_condition"]["toperiodtime"]="";
                              //                                             final  STime24 = DateFormat('HH:mm').format(start);
                              //                                             data["item_condition"]["fromperiodtime"] = STime24.toString();
                              //                                             data["item_condition"]["FromPeriodTimeFill"]= start;
                              //
                              //                                           });
                              //                                         }else{
                              //                                           setState((){
                              //                                             data["item_condition"]["periodicity"] == "Today" ||
                              //                                                 data["item_condition"]["periodicity"] == "Tomorrow" ||
                              //                                                 data["item_condition"]["periodicity"] == "Sunday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Monday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Tuesday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Wednesday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Thursday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Friday" ||
                              //                                                 data["item_condition"]["periodicity"] == "Saturday"?
                              //                                             data["isItemSinglePeriodSelect"] = false :null;
                              //
                              //                                             Duration diff = DateTime.parse(end).difference(start);
                              //                                             String TempDuration = "";
                              //                                             diff.inHours !=0?TempDuration = "${diff.inHours.toString()} Hours": diff.inSeconds !=00?  TempDuration = "${diff.inMinutes.toString()} Minutes" :   TempDuration = "${diff.inSeconds.toString()} Seconds";
                              //                                             data["item_condition"]["duration"].text.isEmpty ?  data["item_condition"]["duration"].text = TempDuration :  data["item_condition"]["duration"].text = "${ data["item_condition"]["duration"].text}${TempDuration}";
                              //
                              //                                             final  FTime = DateFormat('hh:mm a').format(start);
                              //                                             final  ToTime = DateFormat('hh:mm a').format(DateTime.parse(end));
                              //                                             data["item_condition"]["periodTime"].text = "${FTime} - ${ToTime}";
                              //                                             data["item_condition"]["fromperiodtime"]="";
                              //                                             data["item_condition"]["toperiodtime"]="";
                              //                                             final  FTime24 = DateFormat('HH:mm').format(start);
                              //                                             final  ToTime24 = DateFormat('HH:mm').format(DateTime.parse(end));
                              //                                             data["item_condition"]["fromperiodtime"] = FTime24.toString();
                              //                                             data["item_condition"]["toperiodtime"] = ToTime24.toString();
                              //                                             data["item_condition"]["FromPeriodTimeFill"]= start;
                              //                                             data["item_condition"]["ToPeriodTimeFIll"]= DateTime.parse(end);
                              //
                              //                                           });
                              //                                         }
                              //                                       }).showPicker(context);
                              //
                              //                                   // FromToDatePicker(context,FirstDate: DateTime.now(),LastDate: DateTime.now().add(Duration(days: 365)));
                              //                                 },
                              //                                 keyboardType: TextInputType.text,
                              //                                 decoration: InputDecoration(hintText: "Period Time", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                                   focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                                   contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                                   border: const OutlineInputBorder(),
                              //                                 ),
                              //                                 style: Black87HintStyle,
                              //                               ),
                              //                             ),
                              //                             Positioned(
                              //                                 bottom:1,left:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["item_condition"]["periodTime"].clear();
                              //                                       data["item_condition"]["fromperiodtime"]="";
                              //                                       data["item_condition"]["toperiodtime"]="";
                              //                                       data["showItemPeriodTime"]  = false;
                              //                                       ItemsList[index]["item_condition"]["itemDisableFields"].add("TimePeriod");
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Color(0x3389F6B9) ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 ))
                              //                           ],
                              //                         ),
                              //                         const SizedBox(height:5),
                              //                         const Padding(
                              //                           padding: EdgeInsets.only(left:8.0),
                              //                           child: Text("Period Time", style: BlackDescStyle,),
                              //                         ),
                              //                       ],
                              //                     ),
                              //                   ): TextForNewAdd(context,text: "Period Time",onTap: (){
                              //                     setState(() {
                              //                       data["showItemPeriodTime"]  = true;
                              //                       ItemsList[index]["item_condition"]["itemDisableFields"].remove("TimePeriod");
                              //                     });
                              //                   }),
                              //                   data["showItemDuration"]==true?   Padding(
                              //                     padding: EdgeInsets.only(right:10),
                              //                     child: Column(
                              //                       crossAxisAlignment: CrossAxisAlignment.start,
                              //                       children: [
                              //                         Stack(
                              //                           children: [
                              //                             Container(
                              //                               height: 35,
                              //                               padding:EdgeInsets.only(left:12),
                              //                               decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                                 BoxShadow(
                              //                                     blurRadius: 2.0,
                              //                                     color: Colors.black54,
                              //                                     offset: Offset(0.0, 0.5) ),
                              //                               ], borderRadius: BorderRadius.circular(5)),
                              //                               width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                              //                               child: TextFormField(
                              //                                 inputFormatters: [maskFormatter],
                              //                                 controller:  data["item_condition"]["duration"],
                              //                                 keyboardType: TextInputType.number,
                              //                                 onTap:(){
                              //                                   if(isItemSinglePeriodSelect==true){
                              //                                     showDurationPicker(context,setState,data["item_condition"]["duration"]);
                              //                                   }else{
                              //
                              //                                   }
                              //                                 },
                              //                                 readOnly: true,
                              //                                 // onFieldSubmitted: (value){
                              //                                 //   print(value);
                              //                                 //   String empty = "";
                              //                                 //   int years =  value!.length < 2 ?int.parse(value) :int.parse(value.split(":").first);
                              //                                 //   int months =  value.length > 3 ?int.parse(value.split(":")[1]):0;
                              //                                 //   int days =  value.length > 5 ?int.parse(value.split(":")[2]):0;
                              //                                 //   int hours =  value.length > 7 ?int.parse(value.split(":")[3]):0;
                              //                                 //   int min =  value.length > 9 ?int.parse(value.split(":")[4]):0;
                              //                                 //   setState(() {
                              //                                 //     data["item_condition"]["duration"].text ="${years != 0 ? '${years} Years': empty} ${ months != 0 ? '${months} Months': empty } ${days != 0 ?'${days} Days': empty } ${ hours != 0 ?'${hours} Hours': empty } ${ min != 0 ?'${min} Minutes': empty}";
                              //                                 //   });
                              //                                 //   print( data["item_condition"]["duration"].text);
                              //                                 // },
                              //                                 // readOnly: isItemSinglePeriodSelect==true?false:true,
                              //                                 decoration: InputDecoration(hintText: "YY : MM : DD : HH : MI", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                                   focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                                   contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                                   border: const OutlineInputBorder(),
                              //                                   // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                                 ),
                              //                                 style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                              //                               ),
                              //                             ),
                              //                             Positioned(
                              //                                 bottom:1,left:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["item_condition"]["duration"].clear();
                              //                                       data["showItemDuration"] = false;
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Color(
                              //                                         0x3389F6B9) ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 ))
                              //                           ],
                              //                         ),
                              //                         const SizedBox(height:5,),
                              //                         const Padding(
                              //                           padding: EdgeInsets.only(left:8.0),
                              //                           child: Text("Duration(YY:MM:DD:HH:MI)", style: BlackDescStyle,),
                              //                         ),
                              //                       ],
                              //                     ),
                              //                   ):SizedBox(),
                              //
                              //                   Column(
                              //                     mainAxisAlignment: MainAxisAlignment.start,
                              //                     crossAxisAlignment:CrossAxisAlignment.start,
                              //                     children: [
                              //                       Container(
                              //                         height:40,
                              //                         decoration:BoxDecoration(
                              //                           color:Colors.transparent,
                              //                           boxShadow: [
                              //                             BoxShadow(
                              //                                 blurRadius: 1.0,
                              //                                 color: Colors.black26,
                              //                                 offset: Offset(0.0, 0.5) ),
                              //                           ],
                              //                         ),
                              //
                              //                         width: MediaQuery.sizeOf(context).width*1.0,
                              //                         child: Padding(
                              //                           padding: const EdgeInsets.all(0.0),
                              //                           child: CustomSearchableDropDownForUs(
                              //                             initialValue:  data["type"] == "old" ? data["fillSelectedPerson"]:[],
                              //                             items: ServicePersonList,
                              //                             menuHeight: 30.0,
                              //                             label: 'Select Service/Delivery person',
                              //                             multiSelectTag: 'Names',
                              //                             multiSelectValuesAsWidget: true,
                              //                             decoration: BoxDecoration(
                              //                               color: Colors.white,
                              //                               borderRadius: BorderRadius.circular(5),
                              //                             ),
                              //                             multiSelect: true,
                              //                             dropDownMenuItems: ServicePersonList.map((item) {
                              //                               return item.displayname;
                              //                             }).toList() ??
                              //                                 [],
                              //                             onChanged: (value){
                              //                               if(value!=null)
                              //                               {
                              //                                 setState(() {
                              //                                   data["item_condition"]["servicepersons"] =   jsonDecode(value).map((e) =>e["id"] ).toList();
                              //
                              //                                 });
                              //                               }
                              //                             },
                              //                           ),
                              //                         ),
                              //                       ),
                              //                       const SizedBox(height:3,),
                              //                       const Padding(
                              //                         padding: EdgeInsets.only(left:4.0),
                              //                         child: Text("Service/Delivery person", style: BlackDescStyle,),
                              //                       ),
                              //                     ],
                              //                   ),
                              //                 ],
                              //               )):SizedBox(),
                              //           SizedBox(height: data["showItemCondition"]==true? 10:0,),
                              //           data["showItemCondition"]==true?SizedBox(
                              //               height: 60,
                              //               width: double.infinity,
                              //               child: ListView(
                              //                 scrollDirection: Axis.horizontal,
                              //                 physics: const ClampingScrollPhysics(),
                              //                 shrinkWrap: false,
                              //                 padding: EdgeInsets.only(top:5),
                              //                 children: [
                              //                   const SizedBox(width: 12,),
                              //                   data["showItemPriority"]==true?    Padding(
                              //                     padding: EdgeInsets.only(right:10),
                              //                     child: Column(
                              //                       crossAxisAlignment: CrossAxisAlignment.start,
                              //                       children: [
                              //                         Stack(
                              //                           children: [
                              //                             DropdownButtonHideUnderline(
                              //                               child: DropdownButton2(
                              //                                 isExpanded: true,
                              //                                 items:priority.map((item) => DropdownMenuItem (
                              //                                   value: item,
                              //                                   child: Text(
                              //                                     item,
                              //                                     style:  const TextStyle(
                              //                                       fontSize: 15,
                              //                                       fontWeight: FontWeight.w400,
                              //                                       color:  Colors.black,
                              //                                     ),
                              //                                     overflow: TextOverflow.ellipsis,
                              //                                   ),
                              //                                 )).toList(),
                              //                                 value:  data["item_condition"]["priority"]==""?null: data["item_condition"]["priority"],
                              //                                 onChanged: (newValue) {
                              //                                   setState(() {
                              //                                     data["item_condition"]["priority"] = newValue!;
                              //                                   });
                              //                                 },
                              //                                 hint: const Text(
                              //                                     "Priority",
                              //                                     style:greyHintStyle
                              //                                 ),
                              //                                 iconStyleData: const IconStyleData(
                              //                                   icon: Icon(Icons.keyboard_arrow_down_sharp,),
                              //                                   iconSize: 10,
                              //                                   iconEnabledColor: Colors.white,
                              //                                   iconDisabledColor:Colors.white,
                              //                                 ),
                              //                                 buttonStyleData: ButtonStyleData(
                              //                                     height:  35,
                              //                                     width: ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3,
                              //                                     padding: const EdgeInsets.only(left: 20, right: 3),
                              //                                     decoration: BoxDecoration(borderRadius: BorderRadius.circular(5),color: Colors.white),
                              //                                     elevation:  1,
                              //                                     overlayColor: MaterialStateProperty.all(Colors.white)
                              //                                 ),
                              //                                 menuItemStyleData: MenuItemStyleData(
                              //                                   height: 33,
                              //                                   selectedMenuItemBuilder: (context, child) {
                              //                                     return     Container(
                              //                                       padding: const EdgeInsets.only(left: 0, right: 0),
                              //                                       width: ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3,
                              //                                       height: 30,color:Constants.primaryColor1,
                              //                                       child: Row(
                              //                                         mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              //                                         children: [
                              //                                           child,
                              //                                           const Padding(
                              //                                             padding: EdgeInsets.only(right: 5.0),
                              //                                             child: Icon(Icons.done,color: Colors.white,size: 20,),
                              //                                           )
                              //                                         ],
                              //                                       ),
                              //                                     );
                              //                                   },
                              //                                   padding: const EdgeInsets.only(left: 8, right: 3),
                              //                                 ),
                              //                                 dropdownStyleData: DropdownStyleData(
                              //                                   maxHeight: 200,
                              //                                   padding: const EdgeInsets.only(left: 0, right: 0),
                              //                                   width: ResponsiveHelper.isMobile(context)? width*0.3:tabWidth*0.3,
                              //                                   decoration: BoxDecoration(
                              //                                       borderRadius: BorderRadius.circular(5),
                              //                                       color: Colors.white,
                              //                                       border: Border.all(color:  Constants.primaryColor1,width: 1)
                              //                                   ),
                              //                                   elevation: 1,
                              //                                   scrollbarTheme: ScrollbarThemeData(
                              //                                       radius:  const Radius.circular(20),
                              //                                       thickness: MaterialStateProperty.all(5.0),
                              //                                       minThumbLength: 20
                              //                                   ),
                              //                                   offset: const Offset(0, -5),
                              //                                 ),
                              //
                              //                                 style: const TextStyle(
                              //                                   fontSize: 14,
                              //                                   fontWeight: FontWeight.w400,
                              //                                   color: Colors.black,
                              //                                 ),
                              //
                              //                               ),
                              //                             ),
                              //                             Positioned(
                              //                                 bottom:1,left:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["item_condition"]["priority"]=="";
                              //                                       data["showItemPriority"] = false;
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Color(0x3389F6B9) ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 )),
                              //                           ],
                              //                         ),
                              //                         const SizedBox(height:5,),
                              //                         const Padding(
                              //                           padding: EdgeInsets.only(left:8.0),
                              //                           child: Text("Priority", style: BlackDescStyle,),
                              //                         ),
                              //                       ],
                              //                     ),
                              //                   ):SizedBox(),
                              //                   data["showItemExpiry"] == true? Padding(
                              //                     padding: EdgeInsets.only(right:10),
                              //                     child: Column(
                              //                       crossAxisAlignment: CrossAxisAlignment.start,
                              //                       children: [
                              //                         Stack(
                              //                           children: [
                              //                             Container(
                              //                               height: 35,
                              //                               padding: EdgeInsets.only(left:12),
                              //                               decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                                 BoxShadow(
                              //                                     blurRadius: 2.0,
                              //                                     color: Colors.black54,
                              //                                     offset: Offset(0.0, 0.5) ),
                              //                               ], borderRadius: BorderRadius.circular(5)),
                              //                               width: ResponsiveHelper.isMobile(context)? width*0.35:tabWidth*0.35,
                              //                               child: TextFormField(
                              //                                 onTap:(){
                              //                                   showGeneralDialog(
                              //                                       barrierColor: Colors.black.withOpacity(0.5),
                              //                                       transitionBuilder: (context, a1, a2, widget) {
                              //                                         return Transform.scale(
                              //                                           scale: a1.value,
                              //                                           child: Opacity(
                              //                                               opacity: a1.value,
                              //                                               child: Dialog(
                              //                                                   clipBehavior: Clip.hardEdge,
                              //
                              //                                                   shape: RoundedRectangleBorder(
                              //                                                     borderRadius: BorderRadius.circular(15),
                              //                                                   ),
                              //                                                   insetPadding: const EdgeInsets.symmetric(horizontal: 25),
                              //                                                   backgroundColor: Colors.white,
                              //                                                   child:SizedBox(
                              //                                                     height: ResponsiveHelper.isMobile(context)?height*0.3:tabWidth*0.5,
                              //                                                     width: ResponsiveHelper.isMobile(context)?null:tabWidth*0.8,
                              //                                                     child:  Column(
                              //                                                       mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                              //                                                       children: [
                              //                                                         Flexible(
                              //                                                           child: Padding(
                              //                                                               padding: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 15.0),
                              //                                                               child: CupertinoTheme(
                              //                                                                 data: CupertinoThemeData(
                              //                                                                   textTheme: CupertinoTextThemeData(
                              //                                                                       dateTimePickerTextStyle: BlackBottomHeadStyle18500
                              //                                                                   ),
                              //                                                                 ),
                              //                                                                 child: CupertinoDatePicker(
                              //                                                                   mode: CupertinoDatePickerMode.dateAndTime,
                              //                                                                   dateOrder: DatePickerDateOrder.dmy,
                              //                                                                   use24hFormat: false,
                              //                                                                   minuteInterval: 1,
                              //                                                                   minimumDate:DateTime.now(),
                              //                                                                   initialDateTime: data["item_condition"]["expiry"].text.isEmpty || data["item_condition"]["expiry"].text == "" ?DateTime.now():data["item_condition"]["ExpiryDateTime"],
                              //                                                                   onDateTimeChanged: (DateTime newDateTime) {
                              //                                                                     setState((){
                              //                                                                       data["item_condition"]["ExpiryDateTime"] = newDateTime;
                              //                                                                       ItemExDTime = newDateTime;
                              //                                                                     });
                              //                                                                   },
                              //                                                                   maximumDate:OfferExpiryDateTime,
                              //                                                                 ),
                              //                                                               )
                              //                                                           ),
                              //                                                         ),
                              //                                                         Padding(
                              //                                                           padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10),
                              //                                                           child: ElevatedButton(
                              //                                                             style: ButtonStyle(
                              //                                                                 backgroundColor: MaterialStateProperty.all(Constants.primaryColor1 ),
                              //                                                                 elevation: MaterialStateProperty.all(0),
                              //                                                                 foregroundColor: MaterialStateProperty.all(Colors.transparent),
                              //                                                                 overlayColor: MaterialStateProperty.all(Colors.transparent),
                              //                                                                 shadowColor: MaterialStateProperty.all(Colors.transparent),
                              //                                                                 shape: MaterialStateProperty.all(RoundedRectangleBorder(
                              //                                                                   borderRadius: BorderRadius.circular(8),
                              //                                                                 ),)
                              //                                                             ),
                              //                                                             onPressed: () {
                              //                                                               setState((){
                              //                                                                 final  STime = DateFormat('dd-MM-yyyy HH:mm').format(ItemExDTime!);
                              //                                                                 data["item_condition"]["expiry"].text = STime ;
                              //                                                               });
                              //                                                               Navigator.pop(context);
                              //                                                             },
                              //                                                             child: const Padding(
                              //                                                               padding: EdgeInsets.all(12.0),
                              //                                                               child: Center(
                              //                                                                 child: Text('Save',
                              //                                                                   style: TextStyle(fontSize: 14, color: Colors.white, fontWeight: FontWeight.w500),
                              //                                                                   textAlign: TextAlign.center,
                              //                                                                 ),
                              //                                                               ),
                              //                                                             ),
                              //                                                           ),
                              //                                                         ),
                              //                                                       ],
                              //                                                     ),
                              //                                                   )
                              //                                               )),
                              //                                         );
                              //                                       },
                              //                                       transitionDuration: const Duration(milliseconds: 300),
                              //                                       barrierDismissible: true,
                              //                                       barrierLabel: '',
                              //                                       context: context,
                              //                                       pageBuilder: (BuildContext context, Animation<double> animation,
                              //                                           Animation<double> secondaryAnimation) {
                              //                                         return const Text('');
                              //                                       }
                              //                                   );
                              //                                 },
                              //                                 readOnly: true,
                              //                                 controller:  data["item_condition"]["expiry"],
                              //                                 keyboardType: TextInputType.text,
                              //                                 decoration: InputDecoration(hintText: "Expiry", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                                   focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                                   contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                                   border: const OutlineInputBorder(),
                              //                                   // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                                 ),
                              //                                 style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                              //                               ),
                              //                             ),
                              //                             Positioned(
                              //                                 bottom:1,left:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["item_condition"]["expiry"].clear();
                              //                                       data["showItemExpiry"]  = false;
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Color(0x3389F6B9) ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 )),
                              //                           ],
                              //                         ),
                              //                         const SizedBox(height:5,),
                              //                         const Padding(
                              //                           padding: EdgeInsets.only(left:8.0),
                              //                           child: Text("Expiry", style: BlackDescStyle,),
                              //                         ),
                              //                       ],
                              //                     ),
                              //                   ):SizedBox(),
                              //                   data["showItemFromLocation"]==true?  Padding(
                              //                     padding: EdgeInsets.only(right:10),
                              //                     child: Column(
                              //                       crossAxisAlignment: CrossAxisAlignment.start,
                              //                       children: [
                              //                         Stack(
                              //                           children: [
                              //                             Container(
                              //                               height: 35,
                              //                               padding: EdgeInsets.only(left:12),
                              //                               decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                                 BoxShadow(
                              //                                     blurRadius: 2.0,
                              //                                     color: Colors.black54,
                              //                                     offset: Offset(0.0, 0.5) ),
                              //                               ], borderRadius: BorderRadius.circular(5)),
                              //                               width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                              //                               child: TextFormField(
                              //                                 controller:  data["item_condition"]["fromlocation"],
                              //                                 onTap:() async {
                              //
                              //                                   Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true))).then((value) {
                              //                                     setState(() {
                              //                                       data["item_condition"]["fromlocation"].text=value.toString();
                              //                                     });
                              //                                   });
                              //
                              //
                              //                                   //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                              //                                 },
                              //                                 readOnly:true,
                              //                                 keyboardType: TextInputType.text,
                              //                                 decoration: InputDecoration(hintText:"From location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                                   focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                                   contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                                   border: const OutlineInputBorder(),
                              //                                   // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                                 ),
                              //                                 style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                              //                               ),
                              //                             ),
                              //                             Positioned(
                              //                                 bottom:1,left:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["item_condition"]["fromlocation"].clear();
                              //                                       data["showItemFromLocation"] = false;
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Color(
                              //                                         0x3389F6B9) ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 )),
                              //                             data["showItemTOLocation"]==true?SizedBox():    Positioned(
                              //                                 top:1,right:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["showItemTOLocation"]==true?null:data["showItemTOLocation"] =true ;
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Constants.primaryColor1 ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.add,color: Colors.white,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 ))
                              //                           ],
                              //                         ),
                              //                         const SizedBox(height:5,),
                              //                         Padding(
                              //                           padding: EdgeInsets.only(left:4.0),
                              //                           child: Text("From location", style: BlackDescStyle,),
                              //                         ),
                              //                       ],
                              //                     ),
                              //                   ):SizedBox(),
                              //                   data["showItemTOLocation"]==true?  Padding(
                              //                     padding: EdgeInsets.only(right:10),
                              //                     child: Column(
                              //                       crossAxisAlignment: CrossAxisAlignment.start,
                              //                       children: [
                              //                         Stack(
                              //                           children: [
                              //                             Container(
                              //                               height: 35,
                              //                               padding: EdgeInsets.only(left:12),
                              //                               decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                                 BoxShadow(
                              //                                     blurRadius: 2.0,
                              //                                     color: Colors.black54,
                              //                                     offset: Offset(0.0, 0.5) ),
                              //                               ], borderRadius: BorderRadius.circular(5)),
                              //                               width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                              //                               child: TextFormField(
                              //                                 controller:  data["item_condition"]["tolocation"],
                              //                                 onTap:() async {
                              //
                              //                                   Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201) ,isAppPlaceView: true))).then((value) {
                              //                                     setState(() {
                              //                                       data["item_condition"]["tolocation"].text=value.toString();
                              //                                     });
                              //                                   });
                              //
                              //
                              //                                   //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                              //                                 },
                              //                                 readOnly:true,
                              //                                 keyboardType: TextInputType.text,
                              //                                 decoration: InputDecoration(hintText:"To location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                                   focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                                   contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                                   border: const OutlineInputBorder(),
                              //                                   // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                                 ),
                              //                                 style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                              //                               ),
                              //                             ),
                              //                             Positioned(
                              //                                 bottom:1,left:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["item_condition"]["tolocation"].clear();
                              //                                       data["showItemTOLocation"] = false;
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Color(
                              //                                         0x3389F6B9) ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 )),
                              //                             data["showItemAtLocation"]==true?SizedBox():  Positioned(
                              //                                 top:1,right:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["showItemAtLocation"] = true ;
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Constants.primaryColor1 ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.add,color: Colors.white,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 ))
                              //                           ],
                              //                         ),
                              //                         const SizedBox(height:5,),
                              //                         Padding(
                              //                           padding: EdgeInsets.only(left:4.0),
                              //                           child: Text("To location", style: BlackDescStyle,),
                              //                         ),
                              //                       ],
                              //                     ),
                              //                   ):SizedBox(),
                              //                   data["showItemAtLocation"]==true?  Padding(
                              //                     padding: EdgeInsets.only(right:10),
                              //                     child: Column(
                              //                       crossAxisAlignment: CrossAxisAlignment.start,
                              //                       children: [
                              //                         Stack(
                              //                           children: [
                              //                             Container(
                              //                               height: 35,
                              //                               padding: EdgeInsets.only(left:12),
                              //                               decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                                 BoxShadow(
                              //                                     blurRadius: 2.0,
                              //                                     color: Colors.black54,
                              //                                     offset: Offset(0.0, 0.5) ),
                              //                               ], borderRadius: BorderRadius.circular(5)),
                              //                               width: ResponsiveHelper.isMobile(context)? width*0.45:tabWidth*0.45,
                              //                               child: TextFormField(
                              //                                 controller:  data["item_condition"]["atlocation"],
                              //                                 onTap:() async {
                              //
                              //                                   Navigator.of(context).push(MaterialPageRoute(builder: (context) =>NewAddressPickerList(latLong:LatLng(10.5381264, 73.8827201),isAppPlaceView: true ))).then((value) {
                              //                                     setState(() {
                              //                                       data["item_condition"]["atlocation"].text=value.toString();
                              //                                     });
                              //                                   });
                              //                                   //  Navigator.push(context, MaterialPageRoute(builder: (context) => placepick(title: "Place picker"),));
                              //                                 },
                              //                                 readOnly:true,
                              //                                 keyboardType: TextInputType.text,
                              //                                 decoration: InputDecoration(hintText:"At location", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                                   focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                                   floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                                   contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                                   border: const OutlineInputBorder(),
                              //                                   // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                                 ),
                              //                                 style: TextStyle(fontSize: 15, fontWeight: FontWeight.w400, color: Colors.black87),
                              //                               ),
                              //                             ),
                              //                             Positioned(
                              //                                 bottom:1,left:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       data["item_condition"]["atlocation"].clear();
                              //                                       data["showItemAtLocation"] = false;
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Color(
                              //                                         0x3389F6B9) ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.close,color: Colors.black,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 )),
                              //                             Positioned(
                              //                                 top:1,right:2,
                              //                                 child: InkWell(
                              //                                   onTap:(){
                              //                                     setState((){
                              //                                       Constants.showToast("From Location,To Location and At Location are allowed");
                              //                                     });
                              //                                   },
                              //                                   child: CircleAvatar(
                              //                                     radius:8,
                              //                                     backgroundColor: Constants.primaryColor1 ,
                              //                                     child: Center(
                              //                                         child:Icon(Icons.add,color: Colors.white,size:14,)
                              //                                     ),
                              //                                   ),
                              //                                 ))
                              //                           ],
                              //                         ),
                              //                         const SizedBox(height:5,),
                              //                         Padding(
                              //                           padding: EdgeInsets.only(left:4.0),
                              //                           child: Text("At location", style: BlackDescStyle,),
                              //                         ),
                              //                       ],
                              //                     ),
                              //                   ):SizedBox(),
                              //
                              //                   const SizedBox(width: 8,),
                              //                 ],
                              //               )):SizedBox(),
                              //           const SizedBox(height: 15,),
                              //           const Divider(height: 2,thickness: 2),
                              //           const SizedBox(height: 10,),
                              //         ],
                              //       ),
                              //     );
                              //   },
                              // ),
                              // Container(
                              //   width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                              //   padding: const EdgeInsets.only(bottom: 10),
                              //   decoration: const BoxDecoration(
                              //     color: Color(0xFFE7E6E6),
                              //     // borderRadius: BorderRadius.circular(5),
                              //   ),
                              //   child: Column(
                              //     children: [
                              //       const Padding(
                              //         padding: EdgeInsets.symmetric(horizontal: 15.0,vertical: 8),
                              //         child: Align(
                              //             alignment: Alignment.topLeft,
                              //             child: Text(
                              //               "Offer Instruction & bids",
                              //               style: BlackFieldStyleBold,
                              //             )),
                              //       ),
                              //       OfferInstruction1Visible==true? Stack(
                              //         children: [
                              //           Padding(
                              //             padding: const EdgeInsets.only(right: 15.0,top:8,bottom: 5,left: 15),
                              //             child: Container(
                              //               height: 37,
                              //               padding: EdgeInsets.only(left:12),
                              //               decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                 BoxShadow(
                              //                     blurRadius: 2.0,
                              //                     color: Colors.black54,
                              //                     offset: Offset(0.0, 0.5) ),
                              //               ], borderRadius: BorderRadius.circular(5)),
                              //               child: TextFormField(
                              //                 controller: OfferInstruction1Controller,
                              //                 keyboardType: TextInputType.text,
                              //                 decoration: InputDecoration(hintText:"Offer Instruction Remarks Bits Counter & details", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                   focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                   enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                   floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                   contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                   border: const OutlineInputBorder(),
                              //                   // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                 ),
                              //                 readOnly: false,
                              //                 style: Black87HintStyle,
                              //               ),
                              //             ),
                              //           ),
                              //           // Positioned(
                              //           //     bottom:4,left:17,
                              //           //     child: InkWell(
                              //           //       onTap:(){
                              //           //         setState((){
                              //           //           OfferInstruction1Visible = false;
                              //           //         });
                              //           //       },
                              //           //       child: CircleAvatar(
                              //           //         radius:9,
                              //           //         backgroundColor: Color(
                              //           //             0x3389F6B9) ,
                              //           //         child: Center(
                              //           //             child:Icon(Icons.close,color: Colors.black,size:14,)
                              //           //         ),
                              //           //       ),
                              //           //     )),
                              //           // OfferInstruction2Visible==true?SizedBox(): Positioned(
                              //           //     top:5,right:12,
                              //           //     child: InkWell(
                              //           //       onTap:(){
                              //           //         setState((){
                              //           //           OfferInstruction2Visible = true;
                              //           //         });
                              //           //       },
                              //           //       child: CircleAvatar(
                              //           //         radius:9,
                              //           //         backgroundColor: Constants.primaryColor ,
                              //           //         child: Center(
                              //           //             child:Icon(Icons.add,color: Colors.white,size:14,)
                              //           //         ),
                              //           //       ),
                              //           //     )),
                              //         ],
                              //       ):SizedBox(),
                              //       SizedBox(height: 10,),
                              //       OfferInstruction2Visible==true?   Stack(
                              //         children: [
                              //           Padding(
                              //             padding: const EdgeInsets.only(right: 15.0,top:8,bottom: 5,left: 15),
                              //             child: Container(
                              //               height: 37,
                              //               padding: EdgeInsets.only(left:12),
                              //               decoration: BoxDecoration(color: Colors.white, boxShadow: [
                              //                 BoxShadow(
                              //                     blurRadius: 2.0,
                              //                     color: Colors.black54,
                              //                     offset: Offset(0.0, 0.5) ),
                              //               ], borderRadius: BorderRadius.circular(5)),
                              //               child: TextFormField(
                              //                 controller: OfferInstruction2Controller,
                              //                 keyboardType: TextInputType.text,
                              //                 decoration: InputDecoration(hintText:"Enter Offer Instruction Remarks", fillColor:  Colors.white, hintStyle: greyHintStyle,
                              //                   focusedBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                   enabledBorder: OutlineInputBorder(borderSide: BorderSide.none, borderRadius: BorderRadius.circular(5)),
                              //                   floatingLabelBehavior: FloatingLabelBehavior.never,
                              //                   contentPadding: const EdgeInsets.symmetric(horizontal: 10,vertical: 3),
                              //                   border: const OutlineInputBorder(),
                              //                   // hintText: 'Enter Query',hintStyle: hintstyle,
                              //                 ),
                              //                 readOnly: true,
                              //                 style: Black87HintStyle,
                              //               ),
                              //             ),
                              //           ),
                              //           // Positioned(
                              //           //     bottom:4,left:17,
                              //           //     child: InkWell(
                              //           //       onTap:(){
                              //           //         setState((){
                              //           //           OfferInstruction2Visible = false;
                              //           //         });
                              //           //       },
                              //           //       child: CircleAvatar(
                              //           //         radius:9,
                              //           //         backgroundColor: Color(
                              //           //             0x3389F6B9) ,
                              //           //         child: Center(
                              //           //             child:Icon(Icons.close,color: Colors.black,size:14,)
                              //           //         ),
                              //           //       ),
                              //           //     )),
                              //
                              //         ],
                              //       ):SizedBox(),
                              //
                              //     ],
                              //   ),
                              // ),
                            ],
                          )
                      ),
                    ],
                  ),
                ),
                segmentLoader==true?
                Container(
                  color: Colors.black12,
                  height: MediaQuery.of(context).size.height,
                  width: ResponsiveHelper.isMobile(context)? width:tabWidth,
                  child: const Center(
                    child: ButtonLoaderGreen(),
                  ),
                ):const SizedBox()
              ],),
            bottomNavigationBar: Container(
                padding: const EdgeInsets.symmetric(vertical: 10.0),
                decoration: const BoxDecoration(
                    color: Colors.white,
                    boxShadow: [BoxShadow(color: Colors.black38, spreadRadius: 1.5, blurRadius: 1.5),],
                    borderRadius: BorderRadius.only(topRight: Radius.circular(15), topLeft: Radius.circular(15))),
                child: Row(
                  mainAxisAlignment:MainAxisAlignment.spaceBetween,
                  children: [
                    SizedBox(
                      width: ResponsiveHelper.isMobile(context)? width*0.2:tabWidth*0.2,
                    ),
                    ElevatedButton(
                        style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 2),
                            shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(5)),
                            backgroundColor:
                            searchCategoryId == "" || searchSegmentId=="" || searchSubSegmentId=="" ||
                                ItemsList[0]["name"].text.toString()==""||ItemsList[0]["name"].text.toString()=="null"||ItemsList[0]["name"].text.isEmpty ||
                                ItemsList[0]["media"].isEmpty ||
                                OfferInstruction1Controller.text.isEmpty?
                            nullBtnColor:
                            Constants.primaryColor1,
                            elevation: 1),
                        onPressed:
                        selectedTap.toString().toUpperCase().trim() == "CANCEL"?(){
                          DrawAuraAPi.changeOfferStatus(offerId:widget.OfferData.offerData!.id.toString() ,CLOSED: "CLOSED").then((value) {
                            if(value["status"] == "200"){
                              Constants.showToast("Offer canceled");
                              Get.to(()=> NewOfferCreateScreen(Address: "",AddressTitle: "",From: "New",PrefillOfferData: PrefillOfferDataModel(),Type: "",OfferId: "",SubId: ""));
                            } else {
                              Constants.showToast(value["message"]);
                            }
                          });
                        }:
                        searchCategoryId == "" || searchSegmentId=="" || searchSubSegmentId=="" ||
                            ItemsList[0]["name"].text.toString()==""||ItemsList[0]["name"].text.toString()=="null"||ItemsList[0]["name"].text.isEmpty ||
                            ItemsList[0]["media"].isEmpty ||
                            OfferInstruction1Controller.text.isEmpty
                            ?(){
                          if(searchCategoryId == "" || searchSegmentId=="" || searchSubSegmentId==""){
                            Constants.showToastAtBottom("${Url.CatSegSubSegEnterMessage}");
                          }else if( ItemsList[0]["name"].text.toString()==""||ItemsList[0]["name"].text.toString()=="null"||ItemsList[0]["name"].text.isEmpty ||
                              ItemsList[0]["media"].isEmpty ){
                            Constants.showToastAtBottom("${Url.itemNameEnterMessage}");
                          }else if ( OfferInstruction1Controller.text.isEmpty){
                            Constants.showToastAtBottom("${Url.BidsMessage}");
                          }

                             }:


                        selectedTap.toString().toUpperCase().trim() == "DUPLICATE" ?
                            () {
                          List<PrefillOfferBids>  FillBids = [];
                          List<PrefillOfferItems>  FillItmsList = [];
                          for(var j  = 0 ; j<ItemsList.length ;j++){
                            final ImageData = [];
                            for(var k = 0 ; k< ItemsList[j]["media"]!.length ; k++){
                              ImageData.add({
                                "id": "${ItemsList[j]["media"]![k]["file"]}",
                                "file":"${ItemsList[j]["fileUrl"][k]}",
                                "name": "${ItemsList[j]["media"]![k]["name"]}",
                              });
                            }
                            FillItmsList.add(
                                PrefillOfferItems(
                                    name: "${ItemsList[j]["name"].text.toString()}" ,
                                    addon: ItemsList[j]["addon"],
                                    desc: "${ItemsList[j]["desc"].text.toString()}",
                                    itemMedia:ImageData,
                                    offerItemConditions: PrefillOfferItemConditions(
                                      priority: "${ItemsList[j]["item_condition"]["priority"].toString().trim()}",
                                      periodicity:"${ItemsList[j]["item_condition"]["periodicity"].toString().trim()}",
                                      duration: ItemsList[j]["item_condition"]["duration"].text.toString(),
                                      fromlocation: "${ItemsList[j]["item_condition"]["fromlocation"].text.toString()}",
                                      tolocation: "${ItemsList[j]["item_condition"]["tolocation"].text.toString()}",
                                      atlocation: "${ItemsList[j]["item_condition"]["atlocation"].text.toString()}",
                                      expiry: "${ItemsList[j]["item_condition"]["expiry"].text.toString()}",
                                      fromperiod: ItemsList[j]["item_condition"]["fromperiod"].toString() == ""?null:ItemsList[j]["item_condition"]["fromperiod"].toString(),
                                      toperiod: ItemsList[j]["item_condition"]["toperiod"].toString() == ""?null:ItemsList[j]["item_condition"]["toperiod"].toString(),
                                      fromperiodtime: ItemsList[j]["item_condition"]["fromperiodtime"].toString()==""?null:ItemsList[j]["item_condition"]["fromperiodtime"].toString(),
                                      toperiodtime: ItemsList[j]["item_condition"]["toperiodtime"].toString() == ""?null:ItemsList[j]["item_condition"]["toperiodtime"].toString(),
                                      //  servicepersons: ItemsList[j]["item_condition"]["servicepersons"],
                                      servicepersons: [3],
                                      timePeriod:  "${ItemsList[j]["item_condition"]["period"].text.toString()}",
                                    ),
                                    price:ItemsList[j]["price"].text.toString() == "" || ItemsList[j]["price"].text.toString() == "null" ? null: num.parse(ItemsList[j]["price"].text.toString()),
                                    unit: ItemsList[j]["SelectedUnitId"].toString()=="" || ItemsList[j]["unit"].text.isEmpty  || ItemsList[j]["SelectedUnitId"].toString() == "null" ?PrefillUnit(): PrefillUnit(id: num.parse(ItemsList[j]["SelectedUnitId"].toString()) ,name: ItemsList[j]["unit"].text.toString()),
                                    quantity: num.parse(ItemsList[j]["quantity"].toString()),
                                    required: ItemsList[j]["required"],
                                    toggleState: ItemsList[j]["toggle_state"],
                                    advancePrice:  ItemsList[j]["AdvancePrice"].text==""?null:"${ItemsList[j]["AdvancePrice"].text}",
                                    maintenancePrice: ItemsList[j]["MaintenancePrice"].text==""?null:"${ItemsList[j]["MaintenancePrice"].text}",
                                    advanceUnit: ItemsList[j]["SelectedUnitIdAdva"].toString()=="" ||  ItemsList[j]["AdvanceUnit"].text.isEmpty  || ItemsList[j]["SelectedUnitIdAdva"].toString()  == "null"?FillAdvanceUnit():  FillAdvanceUnit(id: ItemsList[j]["SelectedUnitIdAdva"].toString()==""?null:"${ ItemsList[j]["SelectedUnitIdAdva"]}",name:ItemsList[j]["AdvanceUnit"].text.toString()),
                                    maintenanceUnit:ItemsList[j]["SelectedUnitIdMain"].toString()=="" ||  ItemsList[j]["MaintenanceUnit"].text.isEmpty  || ItemsList[j]["SelectedUnitIdMain"].toString()  == "null"?FillMaintenanceUnit():  FillMaintenanceUnit(id:  ItemsList[j]["SelectedUnitIdMain"].toString()==""?null:"${ItemsList[j]["SelectedUnitIdMain"]}",name:ItemsList[j]["MaintenanceUnit"].text.toString())
                                ));
                          }

                          var preFillDetails = PrefillOfferDataModel(
                            offerId: widget.OfferData.offerData!.id.toString(),
                            addres: widget.OfferData.offerData!.addres.toString(),
                            buyORsell:  widget.OfferData.offerData!.buyORsell.toString(),
                            category: FillCategory(
                              id:   widget.OfferData.offerData!.category!.id,
                              name:    widget.OfferData.offerData!.category!.name,
                            ),
                            segment: FillSegment(
                              name:widget.OfferData.offerData!.segment!.name,
                              id: widget.OfferData.offerData!.segment!.id,
                              category: widget.OfferData.offerData!.segment!.category,
                            ),
                            subsegment: FillSubsegment(
                              id:    widget.OfferData.offerData!.subsegment!.id,
                              name: widget.OfferData.offerData!.subsegment!.name,
                              segment:  widget.OfferData.offerData!.subsegment!.segment,
                            ),
                            offerConditions: PrefillOfferConditions(
                                id:  widget.OfferData.offerData!.offerConditions!.id.toString(),
                                fromPeriod:  offerPeriodFromDate==""?null:"${offerPeriodFromDate}",
                                toPeriodTime: offerPeriodToTime==""?null:"${offerPeriodToTime}",
                                fromPeriodTime: offerPeriodFromTime==""?null:offerPeriodFromTime,
                                toPeriod: offerPeriodToDate==""?null:offerPeriodToDate,
                                priority: selectedValuePriority.toString().trim(),
                                periodicity: selectedPeriodicityValue.toString().trim(),
                                duration: OfferDurationController.text,
                                fromlocation: OfferFromLocationController.text,
                                tolocation: OfferToLocationController.text,
                                atlocation: OfferAtLocationController.text,
                                expiry: OfferExpiryController.text,
                                servicepersons:  widget.OfferData.offerData!.offerConditions!.servicepersons,
                                timePeriod: OfferPeriodController.text
                            ),
                            tabactivity: "New",
                            offerareas:  serviceAreaList,
                            offerBids: FillBids,
                            offerItems: FillItmsList,
                              privacy:  widget.OfferData.offerData!.privacy.toString()
                          );
                          print("FillItmsList");
                          print(FillItmsList);
                          Navigator.push(context, MaterialPageRoute(builder: (context) => NewOfferCreateScreen(Address: "",AddressTitle: "",From: "Fill",PrefillOfferData:preFillDetails ,Type: "Duplicate",OfferId:  widget.OfferData.offerData!.id.toString(),SubId:  widget.OfferData.offerData!.subscribers!.id.toString()),));
                        }:
                            () {


                            setState((){
                              PublishLoader =true;
                            });
                            List offerAreas = [];
                            for (var i in serviceAreaList){
                              setState(() {
                                offerAreas.add({"Address": i.address.toString()});
                              });
                            }
                            List bids = [];
                            OfferInstruction1Controller.text != ""?bids.add({"id":"${widget.OfferData.offerData!.offerBids![0].id}","comment": "${OfferInstruction1Controller.text}"}):null;
                            OfferInstruction2Controller.text != "" ?bids.add({"id":"${widget.OfferData.offerData!.offerBids![1].id}","comment": "${OfferInstruction2Controller.text}"}):null;
                            final List<dynamic> ItemsFinalList = [];
                            String TextModeration = "${OfferInstruction1Controller.text} ${OfferInstruction2Controller.text}";
                            for(var i=0; i<ItemsList.length ;i++){
                              TextModeration = "${TextModeration} ${ItemsList[i]["name"].text.toString()} ${ItemsList[i]["desc"].text.toString()}";
                              ItemsFinalList.add(
                                  {
                                    "id":"${ItemsList[i]["ItemId"].toString()}",
                                    "name":ItemsList[i]["name"].text.isEmpty?"":"${ItemsList[i]["name"].text.toString()}",
                                    "desc":ItemsList[i]["desc"].text.isEmpty?"":"${ItemsList[i]["desc"].text.toString()}",
                                    "price":ItemsList[i]["price"].text==""||ItemsList[i]["price"].text.isEmpty?null:"${ItemsList[i]["price"].text}",
                                    "unit": ItemsList[i]["SelectedUnitId"].toString()=="" || ItemsList[i]["unit"].text.isEmpty  || ItemsList[i]["unit"].text == ""?null:"${ItemsList[i]["SelectedUnitId"].toString()}",
                                    "advance_price" : ItemsList[i]["AdvancePrice"].text==""?null:"${ItemsList[i]["AdvancePrice"].text}",
                                    "maintenance_price" : ItemsList[i]["MaintenancePrice"].text==""?null:"${ItemsList[i]["MaintenancePrice"].text}",
                                    "advance_unit" : ItemsList[i]["SelectedUnitIdAdva"].toString()=="" ||  ItemsList[i]["AdvanceUnit"].text.isEmpty  || ItemsList[i]["AdvanceUnit"].text == ""?null:"${ ItemsList[i]["SelectedUnitIdAdva"]}",
                                    "maintenance_unit" : ItemsList[i]["SelectedUnitIdMain"].toString()=="" ||  ItemsList[i]["MaintenanceUnit"].text.isEmpty  || ItemsList[i]["MaintenanceUnit"].text == "" ?null:"${ItemsList[i]["SelectedUnitIdMain"]}",
                                    "quantity":"${ItemsList[i]["quantity"].toString()}",
                                    "currency":"INR",
                                    "addon":"${ItemsList[i]["addon"].toString()}",
                                    "required":"${ItemsList[i]["required"].toString()}",
                                    "toggle_state":"${ItemsList[i]["toggle_state"].toString()}",
                                    "media": ItemsList[i]["media"],
                                    "item_condition":{
                                      "id":"${ItemsList[i]["item_condition"]["ItemConditionId"].toString()}",
                                      "periodicity":"${ItemsList[i]["item_condition"]["periodicity"].toString()}",
                                      "fromperiod":ItemsList[i]["item_condition"]["fromperiod"].toString() == ""?null:ItemsList[i]["item_condition"]["fromperiod"].toString(),
                                      "toperiod":ItemsList[i]["item_condition"]["toperiod"].toString() == ""?null:ItemsList[i]["item_condition"]["toperiod"].toString(),
                                      "duration": ItemsList[i]["item_condition"]["duration"].text.toString() == ""?null :isItemSinglePeriodSelect==false?ItemsList[i]["item_condition"]["duration"].text.toString():ItemsList[i]["item_condition"]["duration"].text.toString()==3?ItemsList[i]["item_condition"]["duration"].text.toString()+"00:00:00:00":ItemsList[i]["item_condition"]["duration"].text.toString()==6?ItemsList[i]["item_condition"]["duration"].text.toString()+"00:00:00":ItemsList[i]["item_condition"]["duration"].text.toString()==9?ItemsList[i]["item_condition"]["duration"].text.toString()+"00:00":ItemsList[i]["item_condition"]["duration"].text.toString()==12?ItemsList[i]["item_condition"]["duration"].text.toString()+"00":ItemsList[i]["item_condition"]["duration"].text.toString(),
                                      "fromperiodtime":ItemsList[i]["item_condition"]["fromperiodtime"].toString()==""?null:ItemsList[i]["item_condition"]["fromperiodtime"].toString(),
                                      "toperiodtime":ItemsList[i]["item_condition"]["toperiodtime"].toString() == ""?null:ItemsList[i]["item_condition"]["toperiodtime"].toString(),
                                      "durationoftime":null,
                                      "fromlocation":ItemsList[i]["item_condition"]["fromlocation"].text.toString()==""?null:"${ItemsList[i]["item_condition"]["fromlocation"].text.toString()}",
                                      "tolocation":ItemsList[i]["item_condition"]["tolocation"].text.toString()==""?null:"${ItemsList[i]["item_condition"]["tolocation"].text.toString()}",
                                      "atlocation":ItemsList[i]["item_condition"]["atlocation"].text.toString()==""?null:"${ItemsList[i]["item_condition"]["atlocation"].text.toString()}",
                                      "servicepersons": ItemsList[i]["item_condition"]["servicepersons"].where((e)=> e.toString() == "-1" || e.toString() == "0").length >= 1 ? [] : ItemsList[i]["item_condition"]["servicepersons"],
                                      "priority":ItemsList[i]["item_condition"]["priority"].toString()==""?null:"${ItemsList[i]["item_condition"]["priority"].toString().toUpperCase()}",
                                      "expiry":ItemsList[i]["item_condition"]["expiry"].text.toString()==""?null:ItemsList[i]["item_condition"]["expiry"].text.toString()
                                    }});
                            }
                            Map<String, dynamic> CreateOfferParam = {
                              "id":widget.OfferData.offerData!.id.toString(),
                              "subscribers":"${DataManager.getInstance().userId.toString()}",
                              "category": "${searchCategoryId.toString()}",
                              "segment": "${searchSegmentId.toString()}",
                              "subsegment": "${searchSubSegmentId.toString()}",
                              "addres":adressLocationController.text.toString(),
                              "offerareas":jsonEncode(offerAreas).toString(),
                              "privacy":  isPrivateOffer?"PRIVATE":"PUBLIC",
                              "tabactivity":selectedTap.toUpperCase().toString().toUpperCase(),
                              "buyORsell": selectedTap.toString().toUpperCase().trim() == "DELIVER"?_currentTapindex==0?"DELIVER_BUY":"DELIVER_SELL":_currentTapindex==0?"BUY":"SELL",
                              "offerexecutestart": null,
                              "offerexecuteend": null,
                              "offer_condition":{
                                "id":widget.OfferData.offerData!.offerConditions!.id.toString(),
                                "periodicity":selectedPeriodicityValue,
                                "fromperiod": offerPeriodFromDate==""?null:"${offerPeriodFromDate}",
                                "toperiod": offerPeriodToDate==""?null:"${offerPeriodToDate}",
                                "duration":OfferDurationController.text == ""?null :isSinglePeriodSelect==false?OfferDurationController.text.toString():OfferDurationController.text.length==3?OfferDurationController.text+"00:00:00:00":OfferDurationController.text.length==6?OfferDurationController.text+"00:00:00":OfferDurationController.text.length==9?OfferDurationController.text+"00:00":OfferDurationController.text.length==12?OfferDurationController.text+"00":OfferDurationController.text,
                                "fromperiodtime":offerPeriodFromTime==""?null:offerPeriodFromTime,
                                "toperiodtime":offerPeriodToTime==""?null:offerPeriodToTime,
                                "durationoftime":"",
                                "fromlocation":OfferAtLocationController.text,
                                "tolocation":OfferToLocationController.text,
                                "atlocation":OfferAtLocationController.text,
                                "servicepersons": selectedItems.where((e)=> e.toString() == "-1" || e.toString() == "0" ).length >= 1  ? [] : selectedItems,
                                "servicepersons_need":  selectedItems.where((e)=> e.toString() == "0" ).length == 1  ?"true" :
                                selectedItems.where((e)=> e.toString() == "-1" ).length == 1 ?"false":
                                selectedItems.isEmpty ? "false":"true",
                                "priority":selectedValuePriority==null?null:selectedValuePriority!.toUpperCase().toString(),
                                "expiry":offerExpiryDateTime==""?null:offerExpiryDateTime.toString(),
                              },
                              "bids":bids,
                              "items":ItemsFinalList
                            };
                            Future.delayed(Duration(seconds: 2),() {
                              print("CreateOfferParam");
                              print(CreateOfferParam);
                              log(CreateOfferParam.toString());
                              var TextModerationBody = {
                                "text": TextModeration,
                                "lang":"en",
                                "mode":"ml",
                                "api_user":"1460174402",
                                "api_secret":"T4dJ3z9fvFNTwHJCRaKDTvFhhd"
                              };
                              DrawAuraAPi.TextModeration(body:TextModerationBody ).then((value) {
                                if( double.parse(value["moderation_classes"]["sexual"].toString()) > 0.05){
                                  var reportUserBody = {
                                    "user_id":DataManager.getInstance().getuserId().toString()
                                  };
                                  DrawAuraAPi.CreateDataApi(ApiEndPoint: "reportUser",body: reportUserBody ).then((reportUserRes){
                                    MessageShowDialogWithTextForBlock(context,
                                        Text(reportUserRes["message"],textAlign: TextAlign.center,style: BlackTitle500height,)
                                        ,(){
                                          if(reportUserRes["blocked"] == false){
                                            Navigator.pop(context);
                                          }else{
                                            Future.delayed(const Duration(
                                                milliseconds: 200), () async {
                                              final SharedPreferences sharedpreferences = await SharedPreferences.getInstance();
                                              sharedpreferences.clear();
                                              var body = {
                                                "id":DataManager.getInstance().getuserId().toString(),
                                                "deviceToken" : "",
                                              };
                                              DrawAuraAPi.CreateDataApi(ApiEndPoint: "updateSubscriberProfile",body: body);
                                              Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context) => login_screen(isGuestUser: false),), (route) => false);
                                            });
                                          }
                                     });
                                  });
                                }
                              });
                              DrawAuraAPi().UpdateOfferDetails(CreateOfferParam).then((response){
                                print(response.body);
                                if (response.statusCode == 200) {
                                  print(response.body);

                                  var data = json.decode(response.body);
                                   if(data["status"] == 200){
                                     Constants.showToastAtBottom("Offer Modified");

                                     Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context) => Dashboard_screen(backIndex: 4),), (route) => false);
                                   }else{
                                     Constants.showToastAtBottom("${data["message"]}");
                                   }
                                  // showDialog(
                                  //   context: context,
                                  //   builder: (context) {
                                  //     return  StatefulBuilder(builder: (context, setState) {
                                  //       return Dialog(
                                  //         alignment: Alignment.center,
                                  //
                                  //         elevation: BorderSide.strokeAlignOutside,
                                  //         child: Container(
                                  //           height:MediaQuery.of(context).size.height*0.25,
                                  //           width: ResponsiveHelper.isMobile(context)? width*0.8:tabWidth*0.8,
                                  //           decoration:  BoxDecoration(color: Color(
                                  //               0x1A52B46B)),
                                  //           child: Column(
                                  //             mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  //             children: [
                                  //
                                  //               Padding(
                                  //                 padding: const EdgeInsets.only(top: 40),
                                  //                 child: SizedBox(
                                  //                   width: ResponsiveHelper.isMobile(context)? width*0.5:tabWidth*0.5,
                                  //                   child: Center(
                                  //                     child: RichText(
                                  //                       textAlign: TextAlign.center,
                                  //                       text: const TextSpan(
                                  //                           children: [
                                  //                             TextSpan(text: 'Your Offers', style: BlackTitle700height),
                                  //                             TextSpan(text: ' Is Update.', style: BlackTitle500height),
                                  //                           ]
                                  //                       ),
                                  //                     ),
                                  //                   ),
                                  //                 ),
                                  //               ),
                                  //               Padding(
                                  //                 padding: const EdgeInsets.only(bottom: 20),
                                  //                 child: ElevatedButton(
                                  //                     style: ElevatedButton.styleFrom(
                                  //                         padding: const EdgeInsets.symmetric(horizontal: 70, vertical: 2),
                                  //                         shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)), backgroundColor:Constants.primaryColor1, elevation: 1),
                                  //                     onPressed: () {
                                  //                       Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context) => Dashboard_screen(backIndex: 4),), (route) => false);
                                  //                     },
                                  //                     child: Text("ok",style: WhiteButtonStyle,)),
                                  //               ),
                                  //             ],
                                  //           ),
                                  //         ),
                                  //       );
                                  //     },);
                                  //   },).then((value) {
                                  //   Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context) => Dashboard_screen(backIndex: 4),), (route) => false);
                                  // });
                                }else if(response.statusCode == 500){

                                  Navigator.pop(context);
                                }
                                else{

                                  Navigator.pop(context);
                                }
                              }).then((value) {
                                setState((){
                                  PublishLoader =false;
                                });
                              });
                            },);

                        },
                        child:PublishLoader == true?SizedBox(height:15,width: 15,child: CircularProgressIndicator(color: Colors.white,strokeWidth: 2.5,)):Text(selectedTap.toString().toUpperCase().trim() == "DUPLICATE" || selectedTap.toString().toUpperCase().trim() == "CANCEL" ?"PUBLISH":"MODIFY",style: WhiteButtonStyle16500,
                        )),
                    Container(
                      height: 45,
                      width: 45,
                      margin: const EdgeInsets.only(bottom: 5,right: 20),
                      padding: EdgeInsets.zero,
                      decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(5),
                          color: Constants.greyDark
                      ),
                      child: Center(child: Container(
                        height: 35,width: 35,
                        decoration: DataManager.getInstance().getuserImage().toString() == "null" ||  DataManager.getInstance().getuserImage() == null ||DataManager.getInstance().getuserImage()=="" ? BoxDecoration(
                          // border: Border.all(color: Constants.white,width: 4),
                            shape: BoxShape.circle,
                            image: DecorationImage(image: NetworkImage("https://st3.depositphotos.com/6672868/13701/v/450/depositphotos_137014128-stock-illustration-user-profile-icon.jpg"),)
                        ):  BoxDecoration(
                            border: Border.all(color: Constants.white,width: 2),
                            shape: BoxShape.circle,
                            image: DecorationImage(image: NetworkImage("${Url.IMAGE_URL}${DataManager.getInstance().getuserImage()}"),fit: BoxFit.fill)
                        ),
                      )),
                    ),
                  ],
                )),
          )),
    );
  }

}
